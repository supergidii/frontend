{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoo\\\\Desktop\\\\betting\\\\betsite\\\\frontend\\\\src\\\\components\\\\Aviator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\nconst Aviator = () => {\n  _s();\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setBalance(1000);\n    }\n  };\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n\n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n\n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n\n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n\n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n\n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n\n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n\n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            lastCountdownUpdate.current = Date.now();\n          }\n        }\n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          stateUpdates.timeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n        }\n      } else if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting crashed state to show crash multiplier');\n        // When backend indicates crash, first show the crash state with the actual crash multiplier\n        stateUpdates.gameState = 'crashed';\n        // Keep the current multiplier to show the crash point\n        // Don't reset multiplier here - let it show the crash point\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n\n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n      }\n\n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n\n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n\n      // Update multiplier and time only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          if (typeof gameData.time_remaining === 'number' && Math.abs(gameData.time_remaining - timeLeft) > 0.1) {\n            setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n\n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n\n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n\n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n\n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      return null;\n    }\n  };\n  const fetchGameHistory = async () => {\n    try {\n      var _response$data;\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n\n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data.map(game => Number(game.crash_point)).filter(point => !isNaN(point) && point > 0);\n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - only allowed during waiting phase\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed during waiting phase');\n      return;\n    }\n    if (isBetPlaced) {\n      setError('You already have an active bet in this round');\n      return;\n    }\n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    try {\n      var _response$data2, _response$data2$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1' // Simple user ID for anonymous betting\n      });\n      setBalance(response.data.balance);\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      setError(null);\n      if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && (_response$data2$bet = _response$data2.bet) !== null && _response$data2$bet !== void 0 && _response$data2$bet.id) {\n        setActiveBets(prev => [{\n          id: response.data.bet.id,\n          amount: Number(response.data.bet.amount)\n        }, ...prev]);\n      } else {\n        // Fallback: refresh slips from backend\n        try {\n          var _r$data;\n          const r = await axios.get(`${API_BASE_URL}/api/aviator/active-bets/?user_id=player_1&round_number=${roundNumber}`);\n          const list = (((_r$data = r.data) === null || _r$data === void 0 ? void 0 : _r$data.bets) || []).map(b => ({\n            id: b.id,\n            amount: Number(b.amount)\n          }));\n          setActiveBets(list);\n        } catch (_) {}\n      }\n\n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - only allowed when bet is placed and game is active\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n\n    // Validate cashout conditions\n    if (!isBetPlaced && activeBets.length === 0) {\n      setError('No active bet to cashout');\n      return;\n    }\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    setIsCashingOut(true);\n    try {\n      var _response$data3, _response$data3$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',\n        // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      setBalance(response.data.balance);\n      if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && (_response$data3$bet = _response$data3.bet) !== null && _response$data3$bet !== void 0 && _response$data3$bet.id) {\n        setActiveBets(prev => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      setError(null);\n\n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n\n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n  const addChip = amount => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    try {\n      // Force refresh all data\n      await Promise.all([fetchBalance(), fetchCurrentGame(), fetchGameHistory(), fetchBetHistory()]);\n\n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n\n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Smart auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n\n    // Auto-refresh conditions:\n    // 1. No successful polls for 15+ seconds\n    // 2. Game state seems stuck (same state for too long during active gameplay)\n    // 3. Round number hasn't updated when it should have\n\n    if (timeSinceLastPoll > 15000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 15+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if game state is stuck\n    if (gameState === 'playing' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameState === 'waiting' && timeSinceLastPoll > 12000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n\n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n\n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n\n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n\n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n          setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n\n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n\n      // Set a timeout to transition from crashed to loading state\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to loading state');\n        setIsLoading(true);\n        setGameState('loading_after_crash');\n        setMultiplier(1.00); // Reset multiplier for next round\n      }, 2000); // Show crash state for 2 seconds\n\n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n\n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n\n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n\n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([fetchBalance(), fetchCurrentGame().catch(() => undefined), fetchGameHistory(), fetchBetHistory()]);\n\n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    initializeComponent();\n\n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n\n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n\n    // Start polling immediately\n    pollForUpdates();\n\n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    setupPolling();\n\n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n\n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the smart auto-refresh detection\n      checkForAutoRefresh();\n    }, 3000); // Check every 3 seconds\n\n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: isCrashLoading ? '💥' : '⏳'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 762,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aviator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Aviator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-display\",\n          children: [\"Balance: $\", balance.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `connection-indicator ${connectionStatus}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"connection-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 15\n            }, this), connectionStatus === 'connected' ? 'Live' : connectionStatus === 'disconnected' ? 'Reconnecting...' : connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: manualRefresh,\n            className: \"refresh-btn\",\n            disabled: isLoading,\n            title: \"Refresh game state\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 777,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 771,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 798,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 799,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 797,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"API Base: \", API_BASE_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game State: \", gameState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Round: #\", roundNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Time Left: \", timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Loading: \", isLoading.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Connection: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `connection-status ${connectionStatus}`,\n          children: connectionStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 809,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Polling Errors: \", pollingErrors]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game History Count: \", gameHistory.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Bet History Count: \", betHistory.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Current Game: \", currentGame ? `Round ${currentGame.round_number}` : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 803,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiplier-display\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: [gameState === 'waiting' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"waiting-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane waiting`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 829,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 828,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Next game in \", timeLeft, \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"countdown-circle\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"countdown-number\",\n                  children: timeLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 835,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 834,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 837,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 827,\n              columnNumber: 17\n            }, this)\n          }, \"waiting\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 15\n          }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"playing-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane flying`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 852,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"multiplier-value\",\n                children: [multiplier.toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Flying!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 19\n              }, this), Number(crashPoint) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crash-point\",\n                children: [\"Target: \", (Number(crashPoint) || 1.0).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 861,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 865,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 850,\n              columnNumber: 17\n            }, this)\n          }, \"playing\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 15\n          }, this), gameState === 'crashed' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"crashed-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane crashed`,\n                  children: \"\\uD83D\\uDCA5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 880,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 879,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"crash-text\",\n                children: [\"CRASHED AT \", multiplier.toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 884,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Game Over!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 885,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 886,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"backend-info\",\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Predetermined crash point from backend\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 888,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 887,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 17\n            }, this)\n          }, \"crashed\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 871,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 817,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"betting-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-amount-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: halfBet,\n            className: \"bet-btn\",\n            children: \"\\xBD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetBet,\n            className: \"bet-btn\",\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: doubleBet,\n            className: \"bet-btn\",\n            children: \"2\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 900,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-input\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: betAmount,\n            onChange: e => setBetAmount(Math.max(1, parseInt(e.target.value) || 1)),\n            min: \"1\",\n            max: balance,\n            className: \"bet-amount-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quick-chips\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(1),\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 915,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(5),\n            children: \"+5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 916,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(10),\n            children: \"+10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 917,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(50),\n            children: \"+50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 918,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(100),\n            children: \"+100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip outline\",\n            onClick: setMaxBet,\n            children: \"Max\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip outline\",\n            onClick: clearBet,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 921,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 914,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [!hasLocalActiveBet && gameState === 'waiting' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: placeBet,\n            className: \"place-bet-btn\",\n            children: [\"Place Bet $\", betAmount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 15\n          }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '10px',\n              color: '#666',\n              marginTop: '5px'\n            },\n            children: [\"Debug: hasLocalActiveBet=\", hasLocalActiveBet.toString(), \", gameState=\", gameState, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 936,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                console.log('🧪 Manual crash test triggered');\n                console.log('🔄 Setting loading to true for test');\n                setIsLoading(true);\n                setGameState('loading_after_crash');\n              },\n              style: {\n                fontSize: '8px',\n                padding: '2px 4px',\n                marginTop: '2px'\n              },\n              children: \"Test Crash Loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 937,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 15\n          }, this), hasLocalActiveBet && gameState !== 'crashed' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: cashout,\n            className: \"cashout-btn\",\n            disabled: gameState !== 'playing' || isCashingOut,\n            style: {\n              pointerEvents: 'auto'\n            },\n            children: gameState !== 'playing' ? 'Cashout (waiting for takeoff)' : isCashingOut ? 'Cashing Out...' : `Cashout $${(betAmount * multiplier).toFixed(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 953,\n            columnNumber: 15\n          }, this), !hasLocalActiveBet && gameState !== 'waiting' && /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: true,\n            className: \"disabled-btn\",\n            children: gameState === 'playing' ? 'Game in progress' : 'Waiting for next round'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 969,\n            columnNumber: 15\n          }, this), hasLocalActiveBet && gameState === 'waiting' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-locked-state\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"locked-badge\",\n              children: [\"Bet locked for Round #\", roundNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 977,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Waiting for game to start...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 976,\n            columnNumber: 15\n          }, this), activeBets.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips\",\n            children: activeBets.map(b => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bet-slip-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Stake: $\", Number(b.amount).toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 987,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cashout-btn\",\n                disabled: gameState !== 'playing' || isCashingOut,\n                onClick: () => cashout(b.id),\n                children: gameState !== 'playing' ? 'Cashout (locked)' : `Cashout $${(Number(b.amount) * multiplier).toFixed(2)}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 988,\n                columnNumber: 21\n              }, this)]\n            }, b.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 986,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 984,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 924,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-line\",\n            children: hasLocalActiveBet ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Current value: $\", (betAmount * multiplier).toFixed(2), \" at \", multiplier.toFixed(2), \"x\"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Potential at 2.00x: $\", (betAmount * 2.00).toFixed(2)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-status ${hasLocalActiveBet ? 'active' : 'idle'}`,\n            children: hasLocalActiveBet ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Active in Round #\", roundNumber, \" - $\", betAmount, \" locked\"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"No active bet - Place bet during waiting phase\"\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1009,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1001,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 896,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 816,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recent Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 9\n      }, this), gameHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-empty\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No game history yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Games will appear here after they crash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1026,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-grid\",\n        children: gameHistory.map((result, index) => {\n          const numericResult = Number(result) || 1.0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`,\n            children: [numericResult.toFixed(2), \"x\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1033,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1021,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bet-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Bet History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-history-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1049,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1050,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Outcome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1051,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Payout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1052,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Profit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 11\n        }, this), betHistory.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-empty\",\n          children: \"No bets yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1056,\n          columnNumber: 13\n        }, this), betHistory.map((b, i) => {\n          var _b$game;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"#\", b.round || ((_b$game = b.game) === null || _b$game === void 0 ? void 0 : _b$game.round_number)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1060,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.amount).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1061,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1062,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.payout).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1063,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"profit\",\n              children: `${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1064,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1059,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Place your bet during the waiting phase (before takeoff)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Once bet is placed, your stake is locked for that round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1074,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Watch the multiplier increase in real-time during flight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click \\\"Cashout\\\" before the plane crashes to win!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1076,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"If the plane crashes before you cashout, you lose your bet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1077,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"After each round, you must place a new bet manually\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1078,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Real-time Multiplier:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 11\n        }, this), \" Increases by 0.05x every second during active gameplay\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1070,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 770,\n    columnNumber: 5\n  }, this);\n};\n_s(Aviator, \"88MAhF+ux5JjOFJLwC1+mBxgbsE=\");\n_c = Aviator;\nexport default Aviator;\nvar _c;\n$RefreshReg$(_c, \"Aviator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","AnimatePresence","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","debugLog","args","NODE_ENV","console","log","Aviator","_s","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","roundNumber","setRoundNumber","betHistory","setBetHistory","currentGame","setCurrentGame","error","setError","isLoading","setIsLoading","isCashingOut","setIsCashingOut","hasLocalActiveBet","setHasLocalActiveBet","activeBets","setActiveBets","connectionStatus","setConnectionStatus","pollingErrors","setPollingErrors","gameInterval","gameCheckInterval","gameTimeout","isRunningRef","lastUpdateTime","isBetPlacedRef","hasLocalActiveBetRef","gameStateRef","pollingRetryCount","maxPollingRetries","lastSuccessfulPoll","Date","now","heartbeatInterval","autoRefreshTimeout","consecutiveErrors","lastGameState","lastRoundNumber","periodicRefreshInterval","lastCountdownUpdate","lastBetStateUpdate","fetchBalance","response","get","data","_error$response","fetchCurrentGame","isRetry","gameData","backendStatus","status","effectivePhase","phase","current","round_number","time_remaining","current_multiplier","isNewRound","Number","crash_point","stateUpdates","newTimeLeft","Math","max","ceil","game_crashed","Object","entries","forEach","key","value","checkActiveBet","abs","prev","warn","scheduleAutoRefresh","setTimeout","fetchGameHistory","_response$data","length","crashPoints","map","game","filter","point","isNaN","_error$response2","fetchBetHistory","_error$response3","hasActiveBet","has_active_bet","placeBet","_response$data2","_response$data2$bet","post","amount","user_id","bet","id","_r$data","r","list","bets","b","_","_error$response4","_error$response4$data","cashout","specificBetId","_response$data3","_response$data3$bet","bet_id","remaining","slice","_error$response5","_error$response5$data","doubleBet","halfBet","floor","resetBet","addChip","next","min","setMaxBet","clearBet","manualRefresh","Promise","all","clearTimeout","checkForAutoRefresh","timeSinceLastPoll","handleGameCrash","crashTimeout","transitionTimeout","catch","immediateCheck","clearInterval","initializeComponent","undefined","pollForUpdates","pollInterval","setupPolling","pollFrequency","setInterval","statusCheckInterval","currentFrequency","isCrashLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onClick","disabled","title","toString","mode","div","initial","opacity","scale","animate","exit","type","onChange","e","parseInt","target","style","fontSize","color","marginTop","padding","pointerEvents","result","index","numericResult","i","_b$game","round","cashout_multiplier","cashoutMultiplier","payout","profit","_c","$RefreshReg$"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\nconst Aviator = () => {\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  \n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      setBalance(1000);\n    }\n  };\n\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      \n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n      \n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n      \n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n      \n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n      \n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      \n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n      \n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n      \n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        \n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            lastCountdownUpdate.current = Date.now();\n          }\n        }\n        \n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          stateUpdates.timeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n        }\n      } else if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting crashed state to show crash multiplier');\n        // When backend indicates crash, first show the crash state with the actual crash multiplier\n        stateUpdates.gameState = 'crashed';\n        // Keep the current multiplier to show the crash point\n        // Don't reset multiplier here - let it show the crash point\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        \n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n      }\n      \n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n      \n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n      \n      // Update multiplier and time only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          if (typeof gameData.time_remaining === 'number' && Math.abs(gameData.time_remaining - timeLeft) > 0.1) {\n            setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      \n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      \n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n      \n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n      \n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n        \n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      \n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', response.data?.length);\n      \n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data\n        .map(game => Number(game.crash_point))\n        .filter(point => !isNaN(point) && point > 0);\n      \n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    \n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - only allowed during waiting phase\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed during waiting phase');\n      return;\n    }\n    \n    if (isBetPlaced) {\n      setError('You already have an active bet in this round');\n      return;\n    }\n    \n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1'  // Simple user ID for anonymous betting\n      });\n      \n      setBalance(response.data.balance);\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      setError(null);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => [{ id: response.data.bet.id, amount: Number(response.data.bet.amount) }, ...prev]);\n      }\n      else {\n        // Fallback: refresh slips from backend\n        try {\n          const r = await axios.get(`${API_BASE_URL}/api/aviator/active-bets/?user_id=player_1&round_number=${roundNumber}`);\n          const list = (r.data?.bets || []).map(b => ({ id: b.id, amount: Number(b.amount) }));\n          setActiveBets(list);\n        } catch (_) {}\n      }\n      \n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - only allowed when bet is placed and game is active\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n    \n    // Validate cashout conditions\n    if (!isBetPlaced && activeBets.length === 0) {\n      setError('No active bet to cashout');\n      return;\n    }\n    \n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    \n    setIsCashingOut(true);\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',  // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      \n      setBalance(response.data.balance);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      setError(null);\n      \n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n      \n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    \n    try {\n      // Force refresh all data\n      await Promise.all([\n        fetchBalance(),\n        fetchCurrentGame(),\n        fetchGameHistory(),\n        fetchBetHistory()\n      ]);\n      \n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      \n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n    \n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Smart auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    \n    // Auto-refresh conditions:\n    // 1. No successful polls for 15+ seconds\n    // 2. Game state seems stuck (same state for too long during active gameplay)\n    // 3. Round number hasn't updated when it should have\n    \n    if (timeSinceLastPoll > 15000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 15+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if game state is stuck\n    if (gameState === 'playing' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameState === 'waiting' && timeSinceLastPoll > 12000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n  \n\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n    \n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n    \n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n    \n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      \n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n        \n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n        setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n    \n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      \n      // Set a timeout to transition from crashed to loading state\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to loading state');\n        setIsLoading(true);\n        setGameState('loading_after_crash');\n        setMultiplier(1.00); // Reset multiplier for next round\n      }, 2000); // Show crash state for 2 seconds\n      \n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n      \n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n        \n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n      \n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        \n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        \n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    \n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        \n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n        \n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n    \n    // Start polling immediately\n    pollForUpdates();\n    \n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      \n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      \n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    \n    setupPolling();\n    \n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n    \n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the smart auto-refresh detection\n      checkForAutoRefresh();\n    }, 3000); // Check every 3 seconds\n    \n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n          <h2>{isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'}</h2>\n          <div className=\"loading-spinner\">{isCrashLoading ? '💥' : '⏳'}</div>\n          <p>{isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"header-info\">\n          <div className=\"balance-display\">\n            Balance: ${balance.toFixed(2)}\n          </div>\n          <div className=\"header-controls\">\n            <div className={`connection-indicator ${connectionStatus}`}>\n              <span className=\"connection-dot\"></span>\n              {connectionStatus === 'connected' ? 'Live' : \n               connectionStatus === 'disconnected' ? 'Reconnecting...' : \n               connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown'}\n            </div>\n            <button \n              onClick={manualRefresh} \n              className=\"refresh-btn\"\n              disabled={isLoading}\n              title=\"Refresh game state\"\n            >\n              🔄\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n      <div className=\"debug-info\">\n        <small>API Base: {API_BASE_URL}</small>\n        <small>Game State: {gameState}</small>\n        <small>Round: #{roundNumber}</small>\n        <small>Time Left: {timeLeft}s</small>\n        <small>Loading: {isLoading.toString()}</small>\n        <small>Connection: <span className={`connection-status ${connectionStatus}`}>{connectionStatus}</span></small>\n        <small>Polling Errors: {pollingErrors}</small>\n        <small>Game History Count: {gameHistory.length}</small>\n        <small>Bet History Count: {betHistory.length}</small>\n        <small>Current Game: {currentGame ? `Round ${currentGame.round_number}` : 'None'}</small>\n      </div>\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\">\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane waiting`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <h2>Next game in {timeLeft}s</h2>\n                  <div className=\"countdown-circle\">\n                    <span className=\"countdown-number\">{timeLeft}</span>\n                  </div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"playing-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane flying`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <div className=\"multiplier-value\">\n                    {multiplier.toFixed(2)}x\n                  </div>\n                  <div className=\"game-status\">Flying!</div>\n                  {Number(crashPoint) > 0 && (\n                    <div className=\"crash-point\">\n                      Target: {(Number(crashPoint) || 1.0).toFixed(2)}x\n                    </div>\n                  )}\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"crashed-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane crashed`}>\n                      💥\n                    </div>\n                  </div>\n                  <h2 className=\"crash-text\">CRASHED AT {multiplier.toFixed(2)}x</h2>\n                  <div className=\"game-status\">Game Over!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                  <div className=\"backend-info\">\n                    <small>Predetermined crash point from backend</small>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <div className=\"betting-controls\">\n          <div className=\"bet-amount-controls\">\n            <button onClick={halfBet} className=\"bet-btn\">½</button>\n            <button onClick={resetBet} className=\"bet-btn\">Reset</button>\n            <button onClick={doubleBet} className=\"bet-btn\">2×</button>\n          </div>\n          \n          <div className=\"bet-input\">\n            <input\n              type=\"number\"\n              value={betAmount}\n              onChange={(e) => setBetAmount(Math.max(1, parseInt(e.target.value) || 1))}\n              min=\"1\"\n              max={balance}\n              className=\"bet-amount-input\"\n            />\n          </div>\n\n          <div className=\"quick-chips\">\n            <button className=\"chip\" onClick={() => addChip(1)}>+1</button>\n            <button className=\"chip\" onClick={() => addChip(5)}>+5</button>\n            <button className=\"chip\" onClick={() => addChip(10)}>+10</button>\n            <button className=\"chip\" onClick={() => addChip(50)}>+50</button>\n            <button className=\"chip\" onClick={() => addChip(100)}>+100</button>\n            <button className=\"chip outline\" onClick={setMaxBet}>Max</button>\n            <button className=\"chip outline\" onClick={clearBet}>Clear</button>\n          </div>\n          \n          <div className=\"action-buttons\">\n            {/* Bet button - only shown during waiting phase when no bet is placed */}\n            {!hasLocalActiveBet && gameState === 'waiting' && (\n              <button onClick={placeBet} className=\"place-bet-btn\">\n                Place Bet ${betAmount}\n              </button>\n            )}\n            \n            {/* Debug info for bet button state */}\n            {process.env.NODE_ENV === 'development' && (\n              <div style={{fontSize: '10px', color: '#666', marginTop: '5px'}}>\n                Debug: hasLocalActiveBet={hasLocalActiveBet.toString()}, gameState={gameState}\n                <br/>\n                <button \n                  onClick={() => {\n                    console.log('🧪 Manual crash test triggered');\n                    console.log('🔄 Setting loading to true for test');\n                    setIsLoading(true);\n                    setGameState('loading_after_crash');\n                  }}\n                  style={{fontSize: '8px', padding: '2px 4px', marginTop: '2px'}}\n                >\n                  Test Crash Loading\n                </button>\n              </div>\n            )}\n            \n            {/* Cashout button - persists from bet placement until crash/cashout */}\n            {hasLocalActiveBet && gameState !== 'crashed' && (\n              <button \n                onClick={cashout} \n                className=\"cashout-btn\"\n                disabled={gameState !== 'playing' || isCashingOut}\n                style={{ pointerEvents: 'auto' }}\n              >\n                {gameState !== 'playing'\n                  ? 'Cashout (waiting for takeoff)'\n                  : isCashingOut\n                    ? 'Cashing Out...'\n                    : `Cashout $${(betAmount * multiplier).toFixed(2)}`}\n              </button>\n            )}\n\n            {/* Disabled state - when no bet is placed and game is not in waiting phase */}\n            {!hasLocalActiveBet && gameState !== 'waiting' && (\n              <button disabled className=\"disabled-btn\">\n                {gameState === 'playing' ? 'Game in progress' : 'Waiting for next round'}\n              </button>\n            )}\n\n            {/* Bet placed - show locked info while waiting */}\n            {hasLocalActiveBet && gameState === 'waiting' && (\n              <div className=\"bet-locked-state\">\n                <span className=\"locked-badge\">Bet locked for Round #{roundNumber}</span>\n                <small>Waiting for game to start...</small>\n              </div>\n            )}\n\n            {/* Show slips for multiple bets this round */}\n            {activeBets.length > 0 && (\n              <div className=\"bet-slips\">\n                {activeBets.map((b) => (\n                  <div key={b.id} className=\"bet-slip-row\">\n                    <span>Stake: ${Number(b.amount).toFixed(2)}</span>\n                    <button\n                      className=\"cashout-btn\"\n                      disabled={gameState !== 'playing' || isCashingOut}\n                      onClick={() => cashout(b.id)}\n                    >\n                      {gameState !== 'playing' ? 'Cashout (locked)' : `Cashout $${(Number(b.amount) * multiplier).toFixed(2)}`}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"bet-summary\">\n            <div className=\"summary-line\">\n              {hasLocalActiveBet ? (\n                <>Current value: ${(betAmount * multiplier).toFixed(2)} at {multiplier.toFixed(2)}x</>\n              ) : (\n                <>Potential at 2.00x: ${(betAmount * 2.00).toFixed(2)}</>\n              )}\n            </div>\n            <div className={`bet-status ${hasLocalActiveBet ? 'active' : 'idle'}`}>\n              {hasLocalActiveBet ? (\n                <>Active in Round #{roundNumber} - ${betAmount} locked</>\n              ) : (\n                <>No active bet - Place bet during waiting phase</>\n              )}\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <div className=\"game-history\">\n        <h3>Recent Results</h3>\n        {gameHistory.length === 0 ? (\n          <div className=\"history-empty\">\n            <p>No game history yet</p>\n            <small>Games will appear here after they crash</small>\n          </div>\n        ) : (\n          <div className=\"history-grid\">\n            {gameHistory.map((result, index) => {\n              const numericResult = Number(result) || 1.0;\n              return (\n                <div\n                  key={index}\n                  className={`history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`}\n                >\n                  {numericResult.toFixed(2)}x\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <div className=\"bet-history\">\n        <h3>Your Bet History</h3>\n        <div className=\"bet-history-table\">\n          <div className=\"bet-history-header\">\n            <span>Round</span>\n            <span>Stake</span>\n            <span>Outcome</span>\n            <span>Payout</span>\n            <span>Profit</span>\n          </div>\n          {betHistory.length === 0 && (\n            <div className=\"bet-history-empty\">No bets yet</div>\n          )}\n          {betHistory.map((b, i) => (\n            <div className={`bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`} key={i}>\n              <span>#{b.round || b.game?.round_number}</span>\n              <span>${Number(b.amount).toFixed(2)}</span>\n              <span>{b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'}</span>\n              <span>${Number(b.payout).toFixed(2)}</span>\n              <span className=\"profit\">{`${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"game-info\">\n        <h3>How to Play</h3>\n        <ul>\n          <li>Place your bet during the waiting phase (before takeoff)</li>\n          <li>Once bet is placed, your stake is locked for that round</li>\n          <li>Watch the multiplier increase in real-time during flight</li>\n          <li>Click \"Cashout\" before the plane crashes to win!</li>\n          <li>If the plane crashes before you cashout, you lose your bet</li>\n          <li>After each round, you must place a new bet manually</li>\n        </ul>\n        <div className=\"backend-info\">\n          <strong>Real-time Multiplier:</strong> Increases by 0.05x every second during active gameplay\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Aviator;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,MAAM,EAAEC,eAAe,QAAQ,eAAe;AACvD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,eAAe;;AAEtB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;;AAElF;AACA,MAAMC,QAAQ,GAAGA,CAAC,GAAGC,IAAI,KAAK;EAC5B,IAAIJ,OAAO,CAACC,GAAG,CAACI,QAAQ,KAAK,aAAa,EAAE;IAC1CC,OAAO,CAACC,GAAG,CAAC,GAAGH,IAAI,CAAC;EACtB;AACF,CAAC;AAED,MAAMI,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,SAAS,CAAC;EACrD,MAAM,CAACwB,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACkC,QAAQ,EAAEC,WAAW,CAAC,GAAGnC,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACwC,UAAU,EAAEC,aAAa,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC0C,WAAW,EAAEC,cAAc,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAAC4C,KAAK,EAAEC,QAAQ,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC8C,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgD,YAAY,EAAEC,eAAe,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACkD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACoD,UAAU,EAAEC,aAAa,CAAC,GAAGrD,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACsD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvD,QAAQ,CAAC,WAAW,CAAC;EACrE,MAAM,CAACwD,aAAa,EAAEC,gBAAgB,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC;EAErD,MAAM0D,YAAY,GAAGxD,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMyD,iBAAiB,GAAGzD,MAAM,CAAC,IAAI,CAAC;EACtC,MAAM0D,WAAW,GAAG1D,MAAM,CAAC,IAAI,CAAC;EAChC,MAAM2D,YAAY,GAAG3D,MAAM,CAAC,KAAK,CAAC;EAClC,MAAM4D,cAAc,GAAG5D,MAAM,CAAC,CAAC,CAAC;EAChC,MAAM6D,cAAc,GAAG7D,MAAM,CAAC,KAAK,CAAC;EACpC,MAAM8D,oBAAoB,GAAG9D,MAAM,CAAC,KAAK,CAAC;EAC1C,MAAM+D,YAAY,GAAG/D,MAAM,CAAC,SAAS,CAAC;EACtC,MAAMgE,iBAAiB,GAAGhE,MAAM,CAAC,CAAC,CAAC;EACnC,MAAMiE,iBAAiB,GAAG,CAAC;EAC3B,MAAMC,kBAAkB,GAAGlE,MAAM,CAACmE,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;EAC7C,MAAMC,iBAAiB,GAAGrE,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMsE,kBAAkB,GAAGtE,MAAM,CAAC,IAAI,CAAC;EACvC,MAAMuE,iBAAiB,GAAGvE,MAAM,CAAC,CAAC,CAAC;EACnC,MAAMwE,aAAa,GAAGxE,MAAM,CAAC,SAAS,CAAC;EACvC,MAAMyE,eAAe,GAAGzE,MAAM,CAAC,CAAC,CAAC;EACjC,MAAM0E,uBAAuB,GAAG1E,MAAM,CAAC,IAAI,CAAC;EAC5C,MAAM2E,mBAAmB,GAAG3E,MAAM,CAACmE,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;EAC9C,MAAMQ,kBAAkB,GAAG5E,MAAM,CAACmE,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC;;EAE7C;EACA,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFhE,QAAQ,CAAC,wBAAwB,EAAE,GAAGJ,YAAY,uBAAuB,CAAC;MAC1E,MAAMqE,QAAQ,GAAG,MAAM1E,KAAK,CAAC2E,GAAG,CAAC,GAAGtE,YAAY,wCAAwC,CAAC;MACzFI,QAAQ,CAAC,mBAAmB,EAAEiE,QAAQ,CAACE,IAAI,CAAC;MAC5CrD,UAAU,CAACmD,QAAQ,CAACE,IAAI,CAACtD,OAAO,CAAC;IACnC,CAAC,CAAC,OAAOgB,KAAK,EAAE;MAAA,IAAAuC,eAAA;MACdjE,OAAO,CAAC0B,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C1B,OAAO,CAAC0B,KAAK,CAAC,gBAAgB,GAAAuC,eAAA,GAAEvC,KAAK,CAACoC,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,CAAC;MACrDrD,UAAU,CAAC,IAAI,CAAC;IAClB;EACF,CAAC;EAED,MAAMuD,gBAAgB,GAAG,MAAAA,CAAOC,OAAO,GAAG,KAAK,KAAK;IAClD,IAAI;MACF,MAAML,QAAQ,GAAG,MAAM1E,KAAK,CAAC2E,GAAG,CAAC,GAAGtE,YAAY,wBAAwB,CAAC;MACzE,MAAM2E,QAAQ,GAAGN,QAAQ,CAACE,IAAI;MAC9B,MAAMK,aAAa,GAAGD,QAAQ,CAACE,MAAM,CAAC,CAAC;MACvC,MAAMC,cAAc,GAAGH,QAAQ,CAACI,KAAK,KAAKH,aAAa,KAAK,QAAQ,GAAG,SAAS,GAAGA,aAAa,CAAC;;MAEjG;MACAhC,mBAAmB,CAAC,WAAW,CAAC;MAChCE,gBAAgB,CAAC,CAAC,CAAC;MACnBS,iBAAiB,CAACyB,OAAO,GAAG,CAAC;MAC7BvB,kBAAkB,CAACuB,OAAO,GAAGtB,IAAI,CAACC,GAAG,CAAC,CAAC;MACvCG,iBAAiB,CAACkB,OAAO,GAAG,CAAC;;MAE7B;MACAjB,aAAa,CAACiB,OAAO,GAAGF,cAAc;MACtCd,eAAe,CAACgB,OAAO,GAAGL,QAAQ,CAACM,YAAY;;MAE/C;MACA7E,QAAQ,CAAC,eAAe,EAAE;QACxByE,MAAM,EAAED,aAAa;QACrBG,KAAK,EAAEJ,QAAQ,CAACI,KAAK;QACrBD,cAAc;QACdI,cAAc,EAAEP,QAAQ,CAACO,cAAc;QACvCD,YAAY,EAAEN,QAAQ,CAACM,YAAY;QACnCE,kBAAkB,EAAER,QAAQ,CAACQ;MAC/B,CAAC,CAAC;;MAEF;MACA,MAAMC,UAAU,GAAGT,QAAQ,CAACM,YAAY,KAAKtD,WAAW;;MAExD;MACA,IAAIgD,QAAQ,CAACM,YAAY,KAAKtD,WAAW,EAAE;QACzCC,cAAc,CAAC+C,QAAQ,CAACM,YAAY,CAAC;MACvC;MAEA,IAAII,MAAM,CAACV,QAAQ,CAACW,WAAW,CAAC,KAAK7D,UAAU,EAAE;QAC/CC,aAAa,CAAC2D,MAAM,CAACV,QAAQ,CAACW,WAAW,CAAC,IAAI,GAAG,CAAC;MACpD;;MAEA;MACA,MAAMC,YAAY,GAAG,CAAC,CAAC;;MAEvB;MACA,IAAIT,cAAc,KAAK,SAAS,EAAE;QAChC;QACA,IAAInE,SAAS,KAAK,SAAS,EAAE;UAC3BP,QAAQ,CAAC,iDAAiD,EAAEuE,QAAQ,CAACO,cAAc,CAAC;UACpFK,YAAY,CAAC5E,SAAS,GAAG,SAAS;QACpC;QACA4E,YAAY,CAAC1E,UAAU,GAAG,IAAI;QAE9B,IAAI,OAAO8D,QAAQ,CAACO,cAAc,KAAK,QAAQ,EAAE;UAC/C,MAAMM,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAChB,QAAQ,CAACO,cAAc,CAAC,CAAC;UACnE,IAAIM,WAAW,KAAKjE,QAAQ,EAAE;YAC5BnB,QAAQ,CAAC,qBAAqB,EAAEmB,QAAQ,EAAE,IAAI,EAAEiE,WAAW,CAAC;YAC5DD,YAAY,CAAChE,QAAQ,GAAGiE,WAAW;YACnCtB,mBAAmB,CAACc,OAAO,GAAGtB,IAAI,CAACC,GAAG,CAAC,CAAC;UAC1C;QACF;QAEA,IAAIyB,UAAU,EAAE;UACdG,YAAY,CAACpE,WAAW,GAAG,KAAK;UAChCoE,YAAY,CAAChD,iBAAiB,GAAG,KAAK;QACxC;MACF,CAAC,MAAM,IAAI,CAACuC,cAAc,KAAK,SAAS,IAAIA,cAAc,KAAK,UAAU,KAAKnE,SAAS,KAAK,SAAS,EAAE;QACrG4E,YAAY,CAAC5E,SAAS,GAAG,SAAS;QAClC,IAAI,OAAOgE,QAAQ,CAACQ,kBAAkB,KAAK,QAAQ,EAAE;UACnDI,YAAY,CAAC1E,UAAU,GAAG8D,QAAQ,CAACQ,kBAAkB;QACvD;QACA,IAAI,OAAOR,QAAQ,CAACO,cAAc,KAAK,QAAQ,EAAE;UAC/CK,YAAY,CAAChE,QAAQ,GAAGkE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAChB,QAAQ,CAACO,cAAc,CAAC,CAAC;QACzE;MACF,CAAC,MAAM,IAAIP,QAAQ,CAACiB,YAAY,IAAIjF,SAAS,KAAK,SAAS,IAAIA,SAAS,KAAK,qBAAqB,EAAE;QAClGJ,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEmE,QAAQ,CAAC;QAC/DpE,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;QAChE;QACA+E,YAAY,CAAC5E,SAAS,GAAG,SAAS;QAClC;QACA;QACA4E,YAAY,CAACpE,WAAW,GAAG,KAAK;QAChCoE,YAAY,CAAChD,iBAAiB,GAAG,KAAK;;QAEtC;QACA,IAAIoC,QAAQ,CAACM,YAAY,EAAE;UACzBM,YAAY,CAAC5D,WAAW,GAAGgD,QAAQ,CAACM,YAAY;QAClD;QACA,IAAIN,QAAQ,CAACW,WAAW,EAAE;UACxBC,YAAY,CAAC9D,UAAU,GAAG4D,MAAM,CAACV,QAAQ,CAACW,WAAW,CAAC;QACxD;MACF;;MAEA;MACAO,MAAM,CAACC,OAAO,CAACP,YAAY,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;QACrD,QAAQD,GAAG;UACT,KAAK,WAAW;YACdpF,YAAY,CAACqF,KAAK,CAAC;YACnB;UACF,KAAK,YAAY;YACfnF,aAAa,CAACmF,KAAK,CAAC;YACpB;UACF,KAAK,UAAU;YACbzE,WAAW,CAACyE,KAAK,CAAC;YAClB;UACF,KAAK,aAAa;YAChB7E,cAAc,CAAC6E,KAAK,CAAC;YACrB;UACF,KAAK,mBAAmB;YACtBzD,oBAAoB,CAACyD,KAAK,CAAC;YAC3B;UACF,KAAK,aAAa;YAChBrE,cAAc,CAACqE,KAAK,CAAC;YACrB;UACF,KAAK,YAAY;YACfvE,aAAa,CAACuE,KAAK,CAAC;YACpB;UACF,KAAK,WAAW;YACd7D,YAAY,CAAC6D,KAAK,CAAC;YACnB;UACF;YACE;YACA;QACJ;MACF,CAAC,CAAC;;MAEF;MACA,IAAInB,cAAc,KAAK,SAAS,IAAIM,UAAU,EAAE;QAC9C,MAAMc,cAAc,CAAC,CAAC;MACxB,CAAC,MAAM,IAAI,CAACpB,cAAc,KAAK,SAAS,IAAIA,cAAc,KAAK,UAAU,KAAKnE,SAAS,KAAK,SAAS,EAAE;QACrG,MAAMuF,cAAc,CAAC,CAAC;MACxB;;MAEA;MACA,IAAIX,YAAY,CAAC5E,SAAS,KAAK,SAAS,IAAImE,cAAc,KAAK,SAAS,EAAE;QACxE,MAAMnB,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;QACtB;QACA,IAAIA,GAAG,GAAGR,cAAc,CAAC6B,OAAO,GAAG,GAAG,EAAE;UACtC;UACA,IAAI,OAAOL,QAAQ,CAACQ,kBAAkB,KAAK,QAAQ,IAAIM,IAAI,CAACU,GAAG,CAACxB,QAAQ,CAACQ,kBAAkB,GAAGtE,UAAU,CAAC,GAAG,KAAK,EAAE;YACjHC,aAAa,CAAC6D,QAAQ,CAACQ,kBAAkB,CAAC;UAC5C;UACA,IAAI,OAAOR,QAAQ,CAACO,cAAc,KAAK,QAAQ,IAAIO,IAAI,CAACU,GAAG,CAACxB,QAAQ,CAACO,cAAc,GAAG3D,QAAQ,CAAC,GAAG,GAAG,EAAE;YACrGC,WAAW,CAACiE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAChB,QAAQ,CAACO,cAAc,CAAC,CAAC,CAAC;UAC9D;UACA/B,cAAc,CAAC6B,OAAO,GAAGrB,GAAG;QAC9B;MACF;MAEA,OAAOgB,QAAQ;IACjB,CAAC,CAAC,OAAO1C,KAAK,EAAE;MACd1B,OAAO,CAAC0B,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;;MAE5D;MACAW,mBAAmB,CAAC,cAAc,CAAC;MACnCE,gBAAgB,CAACsD,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MAClC7C,iBAAiB,CAACyB,OAAO,IAAI,CAAC;MAC9BlB,iBAAiB,CAACkB,OAAO,IAAI,CAAC;;MAE9B;MACA,IAAIlB,iBAAiB,CAACkB,OAAO,IAAI,CAAC,EAAE;QAClCzE,OAAO,CAAC8F,IAAI,CAAC,qDAAqD,CAAC;QACnEC,mBAAmB,CAAC,CAAC;MACvB;;MAEA;MACA,IAAI/C,iBAAiB,CAACyB,OAAO,IAAIxB,iBAAiB,EAAE;QAClDjD,OAAO,CAAC8F,IAAI,CAAC,iDAAiD,CAAC;QAC/DzD,mBAAmB,CAAC,cAAc,CAAC;;QAEnC;QACA2D,UAAU,CAAC,MAAM;UACfhD,iBAAiB,CAACyB,OAAO,GAAG,CAAC;UAC7BpC,mBAAmB,CAAC,WAAW,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC;MACV;MAEA,OAAO,IAAI;IACb;EACF,CAAC;EAED,MAAM4D,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MAAA,IAAAC,cAAA;MACFrG,QAAQ,CAAC,6BAA6B,EAAE,GAAGJ,YAAY,4BAA4B,CAAC;MACpF,MAAMqE,QAAQ,GAAG,MAAM1E,KAAK,CAAC2E,GAAG,CAAC,GAAGtE,YAAY,4BAA4B,CAAC;MAC7EI,QAAQ,CAAC,wBAAwB,EAAEiE,QAAQ,CAACE,IAAI,CAAC;MACjDnE,QAAQ,CAAC,6BAA6B,EAAE,OAAOiE,QAAQ,CAACE,IAAI,CAAC;MAC7DnE,QAAQ,CAAC,+BAA+B,GAAAqG,cAAA,GAAEpC,QAAQ,CAACE,IAAI,cAAAkC,cAAA,uBAAbA,cAAA,CAAeC,MAAM,CAAC;;MAEhE;MACA,MAAMC,WAAW,GAAGtC,QAAQ,CAACE,IAAI,CAC9BqC,GAAG,CAACC,IAAI,IAAIxB,MAAM,CAACwB,IAAI,CAACvB,WAAW,CAAC,CAAC,CACrCwB,MAAM,CAACC,KAAK,IAAI,CAACC,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,CAAC;MAE9C3G,QAAQ,CAAC,yBAAyB,EAAEuG,WAAW,CAAC;MAChDrF,cAAc,CAACqF,WAAW,CAAC;IAC7B,CAAC,CAAC,OAAO1E,KAAK,EAAE;MAAA,IAAAgF,gBAAA;MACd1G,OAAO,CAAC0B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD1B,OAAO,CAAC0B,KAAK,CAAC,gBAAgB,GAAAgF,gBAAA,GAAEhF,KAAK,CAACoC,QAAQ,cAAA4C,gBAAA,uBAAdA,gBAAA,CAAgB1C,IAAI,CAAC;MACrD;MACAjD,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;EAED,MAAM4F,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF9G,QAAQ,CAAC,4BAA4B,EAAE,GAAGJ,YAAY,uBAAuB,CAAC;MAC9E,MAAMqE,QAAQ,GAAG,MAAM1E,KAAK,CAAC2E,GAAG,CAAC,GAAGtE,YAAY,uBAAuB,CAAC;MACxEI,QAAQ,CAAC,uBAAuB,EAAEiE,QAAQ,CAACE,IAAI,CAAC;MAChDzC,aAAa,CAACuC,QAAQ,CAACE,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOtC,KAAK,EAAE;MAAA,IAAAkF,gBAAA;MACd5G,OAAO,CAAC0B,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD1B,OAAO,CAAC0B,KAAK,CAAC,gBAAgB,GAAAkF,gBAAA,GAAElF,KAAK,CAACoC,QAAQ,cAAA8C,gBAAA,uBAAdA,gBAAA,CAAgB5C,IAAI,CAAC;IACvD;EACF,CAAC;;EAED;EACA,MAAM2B,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC;IACA,IAAIvF,SAAS,KAAK,SAAS,IAAI0C,oBAAoB,CAAC2B,OAAO,EAAE;MAC3D;MACA,OAAO,IAAI;IACb;IAEA,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAM1E,KAAK,CAAC2E,GAAG,CAAC,GAAGtE,YAAY,gEAAgE2B,WAAW,EAAE,CAAC;MAC9H,MAAMyF,YAAY,GAAG/C,QAAQ,CAACE,IAAI,CAAC8C,cAAc;MACjDjG,cAAc,CAACgG,YAAY,CAAC;MAC5B,IAAIA,YAAY,EAAE;QAChB5E,oBAAoB,CAAC,IAAI,CAAC;MAC5B,CAAC,MAAM,IAAI7B,SAAS,KAAK,SAAS,EAAE;QAClC6B,oBAAoB,CAAC,KAAK,CAAC;MAC7B;MACA,OAAO4E,YAAY;IACrB,CAAC,CAAC,OAAOnF,KAAK,EAAE;MACd1B,OAAO,CAAC0B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD;MACA,IAAItB,SAAS,KAAK,SAAS,EAAE;QAC3BS,cAAc,CAAC,KAAK,CAAC;QACrBoB,oBAAoB,CAAC,KAAK,CAAC;QAC3B,OAAO,KAAK;MACd;MACA,OAAOa,oBAAoB,CAAC2B,OAAO;IACrC;EACF,CAAC;;EAED;EACA,MAAMsC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B;IACA,IAAI3G,SAAS,KAAK,SAAS,EAAE;MAC3BuB,QAAQ,CAAC,8CAA8C,CAAC;MACxD;IACF;IAEA,IAAIf,WAAW,EAAE;MACfe,QAAQ,CAAC,8CAA8C,CAAC;MACxD;IACF;IAEA,IAAIjB,OAAO,GAAGF,SAAS,EAAE;MACvBmB,QAAQ,CAAC,sBAAsB,CAAC;MAChC;IACF;IAEA,IAAI;MAAA,IAAAqF,eAAA,EAAAC,mBAAA;MACF,MAAMnD,QAAQ,GAAG,MAAM1E,KAAK,CAAC8H,IAAI,CAAC,GAAGzH,YAAY,yBAAyB,EAAE;QAC1E0H,MAAM,EAAE3G,SAAS;QACjB4G,OAAO,EAAE,UAAU,CAAE;MACvB,CAAC,CAAC;MAEFzG,UAAU,CAACmD,QAAQ,CAACE,IAAI,CAACtD,OAAO,CAAC;MACjCG,cAAc,CAAC,IAAI,CAAC;MACpBoB,oBAAoB,CAAC,IAAI,CAAC;MAC1BN,QAAQ,CAAC,IAAI,CAAC;MACd,KAAAqF,eAAA,GAAIlD,QAAQ,CAACE,IAAI,cAAAgD,eAAA,gBAAAC,mBAAA,GAAbD,eAAA,CAAeK,GAAG,cAAAJ,mBAAA,eAAlBA,mBAAA,CAAoBK,EAAE,EAAE;QAC1BnF,aAAa,CAAE0D,IAAI,IAAK,CAAC;UAAEyB,EAAE,EAAExD,QAAQ,CAACE,IAAI,CAACqD,GAAG,CAACC,EAAE;UAAEH,MAAM,EAAErC,MAAM,CAAChB,QAAQ,CAACE,IAAI,CAACqD,GAAG,CAACF,MAAM;QAAE,CAAC,EAAE,GAAGtB,IAAI,CAAC,CAAC;MAC5G,CAAC,MACI;QACH;QACA,IAAI;UAAA,IAAA0B,OAAA;UACF,MAAMC,CAAC,GAAG,MAAMpI,KAAK,CAAC2E,GAAG,CAAC,GAAGtE,YAAY,2DAA2D2B,WAAW,EAAE,CAAC;UAClH,MAAMqG,IAAI,GAAG,CAAC,EAAAF,OAAA,GAAAC,CAAC,CAACxD,IAAI,cAAAuD,OAAA,uBAANA,OAAA,CAAQG,IAAI,KAAI,EAAE,EAAErB,GAAG,CAACsB,CAAC,KAAK;YAAEL,EAAE,EAAEK,CAAC,CAACL,EAAE;YAAEH,MAAM,EAAErC,MAAM,CAAC6C,CAAC,CAACR,MAAM;UAAE,CAAC,CAAC,CAAC;UACpFhF,aAAa,CAACsF,IAAI,CAAC;QACrB,CAAC,CAAC,OAAOG,CAAC,EAAE,CAAC;MACf;;MAEA;MACA,MAAMf,YAAY,GAAG,MAAMlB,cAAc,CAAC,CAAC;MAC3C,IAAI,CAACkB,YAAY,EAAE;QACjBhG,cAAc,CAAC,KAAK,CAAC;MACvB;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MAAA,IAAAmG,gBAAA,EAAAC,qBAAA;MACdnG,QAAQ,CAAC,EAAAkG,gBAAA,GAAAnG,KAAK,CAACoC,QAAQ,cAAA+D,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7D,IAAI,cAAA8D,qBAAA,uBAApBA,qBAAA,CAAsBpG,KAAK,KAAI,qBAAqB,CAAC;MAC9D1B,OAAO,CAAC0B,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C;MACAb,cAAc,CAAC,KAAK,CAAC;MACrBoB,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC;;EAED;EACA,MAAM8F,OAAO,GAAG,MAAAA,CAAOC,aAAa,GAAG,IAAI,KAAK;IAC9C;IACA,IAAIlG,YAAY,EAAE;MAChB;IACF;;IAEA;IACA,IAAI,CAAClB,WAAW,IAAIsB,UAAU,CAACiE,MAAM,KAAK,CAAC,EAAE;MAC3CxE,QAAQ,CAAC,0BAA0B,CAAC;MACpC;IACF;IAEA,IAAIvB,SAAS,KAAK,SAAS,EAAE;MAC3BuB,QAAQ,CAAC,yCAAyC,CAAC;MACnD;IACF;IAEAI,eAAe,CAAC,IAAI,CAAC;IAErB,IAAI;MAAA,IAAAkG,eAAA,EAAAC,mBAAA;MACF,MAAMpE,QAAQ,GAAG,MAAM1E,KAAK,CAAC8H,IAAI,CAAC,GAAGzH,YAAY,uBAAuB,EAAE;QACxEiF,YAAY,EAAEtD,WAAW;QACzBd,UAAU,EAAEA,UAAU;QACtB8G,OAAO,EAAE,UAAU;QAAG;QACtBe,MAAM,EAAEH;MACV,CAAC,CAAC;MAEFrH,UAAU,CAACmD,QAAQ,CAACE,IAAI,CAACtD,OAAO,CAAC;MACjC,KAAAuH,eAAA,GAAInE,QAAQ,CAACE,IAAI,cAAAiE,eAAA,gBAAAC,mBAAA,GAAbD,eAAA,CAAeZ,GAAG,cAAAa,mBAAA,eAAlBA,mBAAA,CAAoBZ,EAAE,EAAE;QAC1BnF,aAAa,CAAE0D,IAAI,IAAKA,IAAI,CAACU,MAAM,CAACoB,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKxD,QAAQ,CAACE,IAAI,CAACqD,GAAG,CAACC,EAAE,CAAC,CAAC;MAC1E;MACA,MAAMc,SAAS,GAAGlG,UAAU,CAACiE,MAAM,GAAG,CAAC;MACvCtF,cAAc,CAACuH,SAAS,GAAG,CAAC,CAAC;MAC7BnG,oBAAoB,CAACmG,SAAS,GAAG,CAAC,CAAC;MACnC7G,aAAa,CAACsE,IAAI,IAAI,CAAC/B,QAAQ,CAACE,IAAI,CAACqD,GAAG,EAAE,GAAGxB,IAAI,CAACwC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MAChE1G,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,MAAMkC,YAAY,CAAC,CAAC;;MAEpB;MACA,MAAM8B,cAAc,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOjE,KAAK,EAAE;MAAA,IAAA4G,gBAAA,EAAAC,qBAAA;MACd5G,QAAQ,CAAC,EAAA2G,gBAAA,GAAA5G,KAAK,CAACoC,QAAQ,cAAAwE,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtE,IAAI,cAAAuE,qBAAA,uBAApBA,qBAAA,CAAsB7G,KAAK,KAAI,mBAAmB,CAAC;MAC5D1B,OAAO,CAAC0B,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC5C,CAAC,SAAS;MACRK,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;;EAGD;EACA,MAAMyG,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI9H,OAAO,IAAIF,SAAS,GAAG,CAAC,EAAE;MAC5BC,YAAY,CAACoF,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAChC;EACF,CAAC;EAED,MAAM4C,OAAO,GAAGA,CAAA,KAAM;IACpBhI,YAAY,CAACoF,IAAI,IAAIX,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACwD,KAAK,CAAC7C,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;EACzD,CAAC;EAED,MAAM8C,QAAQ,GAAGA,CAAA,KAAM;IACrBlI,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC;EAED,MAAMmI,OAAO,GAAIzB,MAAM,IAAK;IAC1B1G,YAAY,CAACoF,IAAI,IAAI;MACnB,MAAMgD,IAAI,GAAG3D,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEU,IAAI,GAAGsB,MAAM,CAAC;MACvC,OAAOjC,IAAI,CAAC4D,GAAG,CAACD,IAAI,EAAEnI,OAAO,CAAC;IAChC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMqI,SAAS,GAAGA,CAAA,KAAM;IACtBtI,YAAY,CAACyE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACwD,KAAK,CAAChI,OAAO,CAAC,CAAC,CAAC;EAChD,CAAC;EAED,MAAMsI,QAAQ,GAAGA,CAAA,KAAM;IACrBvI,YAAY,CAAC,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAMwI,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCjJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CoC,mBAAmB,CAAC,cAAc,CAAC;IACnCR,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMqH,OAAO,CAACC,GAAG,CAAC,CAChBtF,YAAY,CAAC,CAAC,EACdK,gBAAgB,CAAC,CAAC,EAClB+B,gBAAgB,CAAC,CAAC,EAClBU,eAAe,CAAC,CAAC,CAClB,CAAC;;MAEF;MACA,IAAIvF,WAAW,GAAG,CAAC,EAAE;QACnB,MAAMuE,cAAc,CAAC,CAAC;MACxB;MAEAtD,mBAAmB,CAAC,WAAW,CAAC;MAChCE,gBAAgB,CAAC,CAAC,CAAC;MACnBS,iBAAiB,CAACyB,OAAO,GAAG,CAAC;MAC7BlB,iBAAiB,CAACkB,OAAO,GAAG,CAAC;MAC7BzE,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACd1B,OAAO,CAAC0B,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDW,mBAAmB,CAAC,cAAc,CAAC;IACrC,CAAC,SAAS;MACRR,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMkE,mBAAmB,GAAGA,CAAA,KAAM;IAChC;IACA,IAAIzC,kBAAkB,CAACmB,OAAO,EAAE;MAC9B2E,YAAY,CAAC9F,kBAAkB,CAACmB,OAAO,CAAC;IAC1C;;IAEA;IACAnB,kBAAkB,CAACmB,OAAO,GAAGuB,UAAU,CAAC,MAAM;MAC5ChG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CgJ,aAAa,CAAC,CAAC;IACjB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;;EAED;EACA,MAAMI,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMjG,GAAG,GAAGD,IAAI,CAACC,GAAG,CAAC,CAAC;IACtB,MAAMkG,iBAAiB,GAAGlG,GAAG,GAAGF,kBAAkB,CAACuB,OAAO;;IAE1D;IACA;IACA;IACA;;IAEA,IAAI6E,iBAAiB,GAAG,KAAK,EAAE;MAC7BtJ,OAAO,CAAC8F,IAAI,CAAC,sDAAsD,CAAC;MACpEC,mBAAmB,CAAC,CAAC;MACrB;IACF;;IAEA;IACA,IAAI3F,SAAS,KAAK,SAAS,IAAIkJ,iBAAiB,GAAG,IAAI,EAAE;MACvDtJ,OAAO,CAAC8F,IAAI,CAAC,mDAAmD,CAAC;MACjEC,mBAAmB,CAAC,CAAC;MACrB;IACF;;IAEA;IACA,IAAI3F,SAAS,KAAK,SAAS,IAAIkJ,iBAAiB,GAAG,KAAK,EAAE;MACxDtJ,OAAO,CAAC8F,IAAI,CAAC,kDAAkD,CAAC;MAChEC,mBAAmB,CAAC,CAAC;MACrB;IACF;EACF,CAAC;;EAID;EACA,MAAMwD,eAAe,GAAGtK,WAAW,CAAC,YAAY;IAC9Ce,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;;IAErD;IACAY,cAAc,CAAC,KAAK,CAAC;IACrBoB,oBAAoB,CAAC,KAAK,CAAC;IAC3BY,cAAc,CAAC4B,OAAO,GAAG,KAAK;IAC9B3B,oBAAoB,CAAC2B,OAAO,GAAG,KAAK;;IAEpC;IACA,IAAI7D,WAAW,EAAE;MACf,MAAM+F,eAAe,CAAC,CAAC;IACzB;;IAEA;IACA,IAAI;MACF,MAAMvC,QAAQ,GAAG,MAAMF,gBAAgB,CAAC,CAAC;MACzClE,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEmE,QAAQ,CAAC;MAE1D,IAAIA,QAAQ,EAAE;QACZ;QACA,IAAIA,QAAQ,CAACM,YAAY,KAAKtD,WAAW,EAAE;UACzCC,cAAc,CAAC+C,QAAQ,CAACM,YAAY,CAAC;QACvC;QACA,IAAII,MAAM,CAACV,QAAQ,CAACW,WAAW,CAAC,KAAK7D,UAAU,EAAE;UAC/CC,aAAa,CAAC2D,MAAM,CAACV,QAAQ,CAACW,WAAW,CAAC,IAAI,GAAG,CAAC;QACpD;;QAEA;QACA,IAAI,OAAOX,QAAQ,CAACO,cAAc,KAAK,QAAQ,EAAE;UACjD1D,WAAW,CAACiE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,IAAI,CAAChB,QAAQ,CAACO,cAAc,CAAC,CAAC,CAAC;QAC5D,CAAC,MAAM;UACL1D,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;QACnB;MACF,CAAC,MAAM;QACLA,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd1B,OAAO,CAAC0B,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7DT,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB;;IAEA;IACAZ,YAAY,CAAC,SAAS,CAAC;IACvBE,aAAa,CAAC,IAAI,CAAC;IAEnBP,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EACjE,CAAC,EAAE,CAACW,WAAW,EAAEQ,WAAW,EAAEF,UAAU,CAAC,CAAC;;EAE1C;EACAnC,SAAS,CAAC,MAAM;IACd,IAAIqB,SAAS,KAAK,SAAS,EAAE;MAC3BJ,OAAO,CAACC,GAAG,CAAC,wEAAwE,CAAC;;MAErF;MACA,MAAMuJ,YAAY,GAAGxD,UAAU,CAAC,MAAM;QACpChG,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAC5D4B,YAAY,CAAC,IAAI,CAAC;QAClBxB,YAAY,CAAC,qBAAqB,CAAC;QACnCE,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV,OAAO,MAAM6I,YAAY,CAACI,YAAY,CAAC;IACzC;EACF,CAAC,EAAE,CAACpJ,SAAS,CAAC,CAAC;;EAEf;EACArB,SAAS,CAAC,MAAM;IACd,IAAIqB,SAAS,KAAK,qBAAqB,EAAE;MACvCJ,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;;MAEnD;MACA,MAAMwJ,iBAAiB,GAAGzD,UAAU,CAAC,MAAM;QACzChG,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAC5DD,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEG,SAAS,CAAC;QAC9DyB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;QACrBxB,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;QACzBL,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;QAE9D;QACA+F,UAAU,CAAC,MAAM;UACfhG,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;UAC5DiE,gBAAgB,CAAC,CAAC,CAACwF,KAAK,CAAEhI,KAAK,IAAK;YAClC1B,OAAO,CAAC0B,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;UAC3E,CAAC,CAAC;QACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACX,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV,OAAO,MAAM0H,YAAY,CAACK,iBAAiB,CAAC;IAC9C;EACF,CAAC,EAAE,CAACrJ,SAAS,CAAC,CAAC;;EAIf;EACArB,SAAS,CAAC,MAAM;IACd,IAAIqB,SAAS,KAAK,SAAS,EAAE;MAC3B;MACA,MAAMuJ,cAAc,GAAG,MAAAA,CAAA,KAAY;QACjC,MAAMhE,cAAc,CAAC,CAAC;MACxB,CAAC;MACDgE,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACvJ,SAAS,CAAC,CAAC;;EAEf;EACArB,SAAS,CAAC,MAAM;IACd8D,cAAc,CAAC4B,OAAO,GAAG7D,WAAW;EACtC,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB7B,SAAS,CAAC,MAAM;IACd+D,oBAAoB,CAAC2B,OAAO,GAAGzC,iBAAiB;EAClD,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EAEvBjD,SAAS,CAAC,MAAM;IACdgE,YAAY,CAAC0B,OAAO,GAAGrE,SAAS;EAClC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEfrB,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIyD,YAAY,CAACiC,OAAO,EAAEmF,aAAa,CAACpH,YAAY,CAACiC,OAAO,CAAC;MAC7D,IAAIhC,iBAAiB,CAACgC,OAAO,EAAEmF,aAAa,CAACnH,iBAAiB,CAACgC,OAAO,CAAC;MACvE,IAAI/B,WAAW,CAAC+B,OAAO,EAAE2E,YAAY,CAAC1G,WAAW,CAAC+B,OAAO,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA1F,SAAS,CAAC,MAAM;IACdc,QAAQ,CAAC,qDAAqD,CAAC;IAC/DgC,YAAY,CAAC,IAAI,CAAC;IAElB,MAAMgI,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACFhK,QAAQ,CAAC,uBAAuB,CAAC;QACjC,MAAMqJ,OAAO,CAACC,GAAG,CAAC,CAChBtF,YAAY,CAAC,CAAC,EACdK,gBAAgB,CAAC,CAAC,CAACwF,KAAK,CAAC,MAAMI,SAAS,CAAC,EACzC7D,gBAAgB,CAAC,CAAC,EAClBU,eAAe,CAAC,CAAC,CAClB,CAAC;;QAEF;QACA,IAAIvF,WAAW,GAAG,CAAC,EAAE;UACnB,MAAMuE,cAAc,CAAC,CAAC;QACxB;QAEA9F,QAAQ,CAAC,4CAA4C,CAAC;MACxD,CAAC,CAAC,OAAO6B,KAAK,EAAE;QACd1B,OAAO,CAAC0B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,SAAS;QACRG,YAAY,CAAC,KAAK,CAAC;QACnBhC,QAAQ,CAAC,yDAAyD,CAAC;MACrE;IACF,CAAC;IAEDgK,mBAAmB,CAAC,CAAC;;IAErB;IACA,IAAIpH,iBAAiB,CAACgC,OAAO,EAAEmF,aAAa,CAACnH,iBAAiB,CAACgC,OAAO,CAAC;;IAEvE;IACA,MAAMsF,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF;QACA,MAAMC,YAAY,GAAGjH,YAAY,CAAC0B,OAAO,KAAK,qBAAqB,GAAG,IAAI,GAAG,GAAG;QAEhF5E,QAAQ,CAAC,gCAAgC,EAAE,QAAQ,EAAEkD,YAAY,CAAC0B,OAAO,CAAC;QAC1E,MAAML,QAAQ,GAAG,MAAMF,gBAAgB,CAAC,CAAC;;QAEzC;QACA,IAAIE,QAAQ,EAAE;UACZ;UACA/B,mBAAmB,CAAC,WAAW,CAAC;UAChCE,gBAAgB,CAAC,CAAC,CAAC;QACrB;MACF,CAAC,CAAC,OAAOb,KAAK,EAAE;QACd1B,OAAO,CAAC0B,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtC;MACF;IACF,CAAC;;IAED;IACAqI,cAAc,CAAC,CAAC;;IAEhB;IACA,MAAME,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAIxH,iBAAiB,CAACgC,OAAO,EAAEmF,aAAa,CAACnH,iBAAiB,CAACgC,OAAO,CAAC;;MAEvE;MACA,MAAMyF,aAAa,GAAG9H,gBAAgB,KAAK,cAAc,GAAG,IAAI,GAAG,GAAG;MAEtEK,iBAAiB,CAACgC,OAAO,GAAG0F,WAAW,CAACJ,cAAc,EAAEG,aAAa,CAAC;IACxE,CAAC;IAEDD,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMG,mBAAmB,GAAGD,WAAW,CAAC,MAAM;MAC5C,IAAI1H,iBAAiB,CAACgC,OAAO,EAAE;QAC7B,MAAM4F,gBAAgB,GAAGjI,gBAAgB,KAAK,cAAc,GAAG,IAAI,GAAG,GAAG;QACzE;QACA,IAAIE,aAAa,GAAG,CAAC,IAAI+H,gBAAgB,KAAK,GAAG,EAAE;UACjDJ,YAAY,CAAC,CAAC;QAChB;MACF;IACF,CAAC,EAAE,IAAI,CAAC;;IAER;IACA5G,iBAAiB,CAACoB,OAAO,GAAG0F,WAAW,CAAC,MAAM;MAC5C;MACAd,mBAAmB,CAAC,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAM;MACXxJ,QAAQ,CAAC,+BAA+B,CAAC;MACzC,IAAI4C,iBAAiB,CAACgC,OAAO,EAAEmF,aAAa,CAACnH,iBAAiB,CAACgC,OAAO,CAAC;MACvE,IAAI2F,mBAAmB,EAAER,aAAa,CAACQ,mBAAmB,CAAC;MAC3D,IAAI/G,iBAAiB,CAACoB,OAAO,EAAEmF,aAAa,CAACvG,iBAAiB,CAACoB,OAAO,CAAC;MACvE,IAAInB,kBAAkB,CAACmB,OAAO,EAAE2E,YAAY,CAAC9F,kBAAkB,CAACmB,OAAO,CAAC;IAC1E,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER5E,QAAQ,CAAC,yCAAyC,EAAEO,SAAS,EAAE,WAAW,EAAEY,QAAQ,EAAE,YAAY,EAAEY,SAAS,EAAE,oBAAoB,EAAEI,iBAAiB,EAAE,cAAc,EAAEpB,WAAW,EAAE,eAAe,EAAER,SAAS,KAAK,qBAAqB,CAAC;EAE1O,IAAIwB,SAAS,EAAE;IACb,MAAM0I,cAAc,GAAGlK,SAAS,KAAK,qBAAqB;IAC1D,oBACEd,OAAA;MAAKiL,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAChClL,OAAA;QAAKiL,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BlL,OAAA;UAAAkL,QAAA,EAAKF,cAAc,GAAG,eAAe,GAAG;QAAyB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACvEtL,OAAA;UAAKiL,SAAS,EAAC,iBAAiB;UAAAC,QAAA,EAAEF,cAAc,GAAG,IAAI,GAAG;QAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACpEtL,OAAA;UAAAkL,QAAA,EAAIF,cAAc,GAAG,yBAAyB,GAAG;QAA0B;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7E;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACEtL,OAAA;IAAKiL,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChClL,OAAA;MAAKiL,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BlL,OAAA;QAAAkL,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBtL,OAAA;QAAKiL,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BlL,OAAA;UAAKiL,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAAC,YACrB,EAAC9J,OAAO,CAACmK,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACNtL,OAAA;UAAKiL,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9BlL,OAAA;YAAKiL,SAAS,EAAE,wBAAwBnI,gBAAgB,EAAG;YAAAoI,QAAA,gBACzDlL,OAAA;cAAMiL,SAAS,EAAC;YAAgB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,EACvCxI,gBAAgB,KAAK,WAAW,GAAG,MAAM,GACzCA,gBAAgB,KAAK,cAAc,GAAG,iBAAiB,GACvDA,gBAAgB,KAAK,cAAc,GAAG,iBAAiB,GAAG,SAAS;UAAA;YAAAqI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC,eACNtL,OAAA;YACEwL,OAAO,EAAE7B,aAAc;YACvBsB,SAAS,EAAC,aAAa;YACvBQ,QAAQ,EAAEnJ,SAAU;YACpBoJ,KAAK,EAAC,oBAAoB;YAAAR,QAAA,EAC3B;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAELlJ,KAAK,iBACJpC,OAAA;MAAKiL,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BlL,OAAA;QAAAkL,QAAA,EAAQ;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAAClJ,KAAK,eAC9BpC,OAAA;QAAQwL,OAAO,EAAEA,CAAA,KAAMnJ,QAAQ,CAAC,IAAI,CAAE;QAAC4I,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CACN,eAEDtL,OAAA;MAAKiL,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBlL,OAAA;QAAAkL,QAAA,GAAO,YAAU,EAAC/K,YAAY;MAAA;QAAAgL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvCtL,OAAA;QAAAkL,QAAA,GAAO,cAAY,EAACpK,SAAS;MAAA;QAAAqK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtCtL,OAAA;QAAAkL,QAAA,GAAO,UAAQ,EAACpJ,WAAW;MAAA;QAAAqJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpCtL,OAAA;QAAAkL,QAAA,GAAO,aAAW,EAACxJ,QAAQ,EAAC,GAAC;MAAA;QAAAyJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACrCtL,OAAA;QAAAkL,QAAA,GAAO,WAAS,EAAC5I,SAAS,CAACqJ,QAAQ,CAAC,CAAC;MAAA;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9CtL,OAAA;QAAAkL,QAAA,GAAO,cAAY,eAAAlL,OAAA;UAAMiL,SAAS,EAAE,qBAAqBnI,gBAAgB,EAAG;UAAAoI,QAAA,EAAEpI;QAAgB;UAAAqI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC9GtL,OAAA;QAAAkL,QAAA,GAAO,kBAAgB,EAAClI,aAAa;MAAA;QAAAmI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9CtL,OAAA;QAAAkL,QAAA,GAAO,sBAAoB,EAAC1J,WAAW,CAACqF,MAAM;MAAA;QAAAsE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACvDtL,OAAA;QAAAkL,QAAA,GAAO,qBAAmB,EAAClJ,UAAU,CAAC6E,MAAM;MAAA;QAAAsE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDtL,OAAA;QAAAkL,QAAA,GAAO,gBAAc,EAAChJ,WAAW,GAAG,SAASA,WAAW,CAACkD,YAAY,EAAE,GAAG,MAAM;MAAA;QAAA+F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtF,CAAC,eAENtL,OAAA;MAAKiL,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBlL,OAAA;QAAKiL,SAAS,EAAC,oBAAoB;QAAAC,QAAA,eACjClL,OAAA,CAACH,eAAe;UAAC+L,IAAI,EAAC,MAAM;UAAAV,QAAA,GACzBpK,SAAS,KAAK,SAAS,iBACtBd,OAAA,CAACJ,MAAM,CAACiM,GAAG;YAETC,OAAO,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YACpCC,OAAO,EAAE;cAAEF,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAE,CAAE;YAClCE,IAAI,EAAE;cAAEH,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YACjCf,SAAS,EAAC,eAAe;YAAAC,QAAA,eAEzBlL,OAAA;cAAKiL,SAAS,EAAC,cAAc;cAAAC,QAAA,gBAC3BlL,OAAA;gBAAKiL,SAAS,EAAC,yBAAyB;gBAAAC,QAAA,eACtClL,OAAA;kBAAKiL,SAAS,EAAE,uBAAwB;kBAAAC,QAAA,EAAC;gBAEzC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eACNtL,OAAA;gBAAAkL,QAAA,GAAI,eAAa,EAACxJ,QAAQ,EAAC,GAAC;cAAA;gBAAAyJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACjCtL,OAAA;gBAAKiL,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,eAC/BlL,OAAA;kBAAMiL,SAAS,EAAC,kBAAkB;kBAAAC,QAAA,EAAExJ;gBAAQ;kBAAAyJ,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACjD,CAAC,eACNtL,OAAA;gBAAKiL,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAC,SAAO,EAACpJ,WAAW;cAAA;gBAAAqJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnD;UAAC,GAjBF,SAAS;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAkBH,CACb,EAEAxK,SAAS,KAAK,SAAS,iBACtBd,OAAA,CAACJ,MAAM,CAACiM,GAAG;YAETC,OAAO,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YACpCC,OAAO,EAAE;cAAEF,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAE,CAAE;YAClCE,IAAI,EAAE;cAAEH,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YACjCf,SAAS,EAAC,eAAe;YAAAC,QAAA,eAEzBlL,OAAA;cAAKiL,SAAS,EAAC,cAAc;cAAAC,QAAA,gBAC3BlL,OAAA;gBAAKiL,SAAS,EAAC,yBAAyB;gBAAAC,QAAA,eACtClL,OAAA;kBAAKiL,SAAS,EAAE,sBAAuB;kBAAAC,QAAA,EAAC;gBAExC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eACNtL,OAAA;gBAAKiL,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,GAC9BlK,UAAU,CAACuK,OAAO,CAAC,CAAC,CAAC,EAAC,GACzB;cAAA;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eACNtL,OAAA;gBAAKiL,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,EACzC9F,MAAM,CAAC5D,UAAU,CAAC,GAAG,CAAC,iBACrB5B,OAAA;gBAAKiL,SAAS,EAAC,aAAa;gBAAAC,QAAA,GAAC,UACnB,EAAC,CAAC1F,MAAM,CAAC5D,UAAU,CAAC,IAAI,GAAG,EAAE2J,OAAO,CAAC,CAAC,CAAC,EAAC,GAClD;cAAA;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CACN,eACDtL,OAAA;gBAAKiL,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAC,SAAO,EAACpJ,WAAW;cAAA;gBAAAqJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnD;UAAC,GAtBF,SAAS;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAuBH,CACb,EAEAxK,SAAS,KAAK,SAAS,iBACtBd,OAAA,CAACJ,MAAM,CAACiM,GAAG;YAETC,OAAO,EAAE;cAAEC,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YACpCC,OAAO,EAAE;cAAEF,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAE,CAAE;YAClCE,IAAI,EAAE;cAAEH,OAAO,EAAE,CAAC;cAAEC,KAAK,EAAE;YAAI,CAAE;YACjCf,SAAS,EAAC,eAAe;YAAAC,QAAA,eAEzBlL,OAAA;cAAKiL,SAAS,EAAC,cAAc;cAAAC,QAAA,gBAC3BlL,OAAA;gBAAKiL,SAAS,EAAC,yBAAyB;gBAAAC,QAAA,eACtClL,OAAA;kBAAKiL,SAAS,EAAE,uBAAwB;kBAAAC,QAAA,EAAC;gBAEzC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eACNtL,OAAA;gBAAIiL,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAC,aAAW,EAAClK,UAAU,CAACuK,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;cAAA;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACnEtL,OAAA;gBAAKiL,SAAS,EAAC,aAAa;gBAAAC,QAAA,EAAC;cAAU;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC7CtL,OAAA;gBAAKiL,SAAS,EAAC,YAAY;gBAAAC,QAAA,GAAC,SAAO,EAACpJ,WAAW;cAAA;gBAAAqJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eACtDtL,OAAA;gBAAKiL,SAAS,EAAC,cAAc;gBAAAC,QAAA,eAC3BlL,OAAA;kBAAAkL,QAAA,EAAO;gBAAsC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH;UAAC,GAlBF,SAAS;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAmBH,CACb;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACc;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eAENtL,OAAA;QAAKiL,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BlL,OAAA;UAAKiL,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAClClL,OAAA;YAAQwL,OAAO,EAAErC,OAAQ;YAAC8B,SAAS,EAAC,SAAS;YAAAC,QAAA,EAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACxDtL,OAAA;YAAQwL,OAAO,EAAEnC,QAAS;YAAC4B,SAAS,EAAC,SAAS;YAAAC,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC7DtL,OAAA;YAAQwL,OAAO,EAAEtC,SAAU;YAAC+B,SAAS,EAAC,SAAS;YAAAC,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,eAENtL,OAAA;UAAKiL,SAAS,EAAC,WAAW;UAAAC,QAAA,eACxBlL,OAAA;YACEmM,IAAI,EAAC,QAAQ;YACb/F,KAAK,EAAElF,SAAU;YACjBkL,QAAQ,EAAGC,CAAC,IAAKlL,YAAY,CAACyE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEyG,QAAQ,CAACD,CAAC,CAACE,MAAM,CAACnG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAE;YAC1EoD,GAAG,EAAC,GAAG;YACP3D,GAAG,EAAEzE,OAAQ;YACb6J,SAAS,EAAC;UAAkB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENtL,OAAA;UAAKiL,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BlL,OAAA;YAAQiL,SAAS,EAAC,MAAM;YAACO,OAAO,EAAEA,CAAA,KAAMlC,OAAO,CAAC,CAAC,CAAE;YAAA4B,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC/DtL,OAAA;YAAQiL,SAAS,EAAC,MAAM;YAACO,OAAO,EAAEA,CAAA,KAAMlC,OAAO,CAAC,CAAC,CAAE;YAAA4B,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC/DtL,OAAA;YAAQiL,SAAS,EAAC,MAAM;YAACO,OAAO,EAAEA,CAAA,KAAMlC,OAAO,CAAC,EAAE,CAAE;YAAA4B,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjEtL,OAAA;YAAQiL,SAAS,EAAC,MAAM;YAACO,OAAO,EAAEA,CAAA,KAAMlC,OAAO,CAAC,EAAE,CAAE;YAAA4B,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjEtL,OAAA;YAAQiL,SAAS,EAAC,MAAM;YAACO,OAAO,EAAEA,CAAA,KAAMlC,OAAO,CAAC,GAAG,CAAE;YAAA4B,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnEtL,OAAA;YAAQiL,SAAS,EAAC,cAAc;YAACO,OAAO,EAAE/B,SAAU;YAAAyB,QAAA,EAAC;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjEtL,OAAA;YAAQiL,SAAS,EAAC,cAAc;YAACO,OAAO,EAAE9B,QAAS;YAAAwB,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,eAENtL,OAAA;UAAKiL,SAAS,EAAC,gBAAgB;UAAAC,QAAA,GAE5B,CAACxI,iBAAiB,IAAI5B,SAAS,KAAK,SAAS,iBAC5Cd,OAAA;YAAQwL,OAAO,EAAE/D,QAAS;YAACwD,SAAS,EAAC,eAAe;YAAAC,QAAA,GAAC,aACxC,EAAChK,SAAS;UAAA;YAAAiK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CACT,EAGAlL,OAAO,CAACC,GAAG,CAACI,QAAQ,KAAK,aAAa,iBACrCT,OAAA;YAAKwM,KAAK,EAAE;cAACC,QAAQ,EAAE,MAAM;cAAEC,KAAK,EAAE,MAAM;cAAEC,SAAS,EAAE;YAAK,CAAE;YAAAzB,QAAA,GAAC,2BACtC,EAACxI,iBAAiB,CAACiJ,QAAQ,CAAC,CAAC,EAAC,cAAY,EAAC7K,SAAS,eAC7Ed,OAAA;cAAAmL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACLtL,OAAA;cACEwL,OAAO,EAAEA,CAAA,KAAM;gBACb9K,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;gBAC7CD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;gBAClD4B,YAAY,CAAC,IAAI,CAAC;gBAClBxB,YAAY,CAAC,qBAAqB,CAAC;cACrC,CAAE;cACFyL,KAAK,EAAE;gBAACC,QAAQ,EAAE,KAAK;gBAAEG,OAAO,EAAE,SAAS;gBAAED,SAAS,EAAE;cAAK,CAAE;cAAAzB,QAAA,EAChE;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CACN,EAGA5I,iBAAiB,IAAI5B,SAAS,KAAK,SAAS,iBAC3Cd,OAAA;YACEwL,OAAO,EAAE/C,OAAQ;YACjBwC,SAAS,EAAC,aAAa;YACvBQ,QAAQ,EAAE3K,SAAS,KAAK,SAAS,IAAI0B,YAAa;YAClDgK,KAAK,EAAE;cAAEK,aAAa,EAAE;YAAO,CAAE;YAAA3B,QAAA,EAEhCpK,SAAS,KAAK,SAAS,GACpB,+BAA+B,GAC/B0B,YAAY,GACV,gBAAgB,GAChB,YAAY,CAACtB,SAAS,GAAGF,UAAU,EAAEuK,OAAO,CAAC,CAAC,CAAC;UAAE;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CACT,EAGA,CAAC5I,iBAAiB,IAAI5B,SAAS,KAAK,SAAS,iBAC5Cd,OAAA;YAAQyL,QAAQ;YAACR,SAAS,EAAC,cAAc;YAAAC,QAAA,EACtCpK,SAAS,KAAK,SAAS,GAAG,kBAAkB,GAAG;UAAwB;YAAAqK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClE,CACT,EAGA5I,iBAAiB,IAAI5B,SAAS,KAAK,SAAS,iBAC3Cd,OAAA;YAAKiL,SAAS,EAAC,kBAAkB;YAAAC,QAAA,gBAC/BlL,OAAA;cAAMiL,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,wBAAsB,EAACpJ,WAAW;YAAA;cAAAqJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACzEtL,OAAA;cAAAkL,QAAA,EAAO;YAA4B;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CACN,EAGA1I,UAAU,CAACiE,MAAM,GAAG,CAAC,iBACpB7G,OAAA;YAAKiL,SAAS,EAAC,WAAW;YAAAC,QAAA,EACvBtI,UAAU,CAACmE,GAAG,CAAEsB,CAAC,iBAChBrI,OAAA;cAAgBiL,SAAS,EAAC,cAAc;cAAAC,QAAA,gBACtClL,OAAA;gBAAAkL,QAAA,GAAM,UAAQ,EAAC1F,MAAM,CAAC6C,CAAC,CAACR,MAAM,CAAC,CAAC0D,OAAO,CAAC,CAAC,CAAC;cAAA;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAClDtL,OAAA;gBACEiL,SAAS,EAAC,aAAa;gBACvBQ,QAAQ,EAAE3K,SAAS,KAAK,SAAS,IAAI0B,YAAa;gBAClDgJ,OAAO,EAAEA,CAAA,KAAM/C,OAAO,CAACJ,CAAC,CAACL,EAAE,CAAE;gBAAAkD,QAAA,EAE5BpK,SAAS,KAAK,SAAS,GAAG,kBAAkB,GAAG,YAAY,CAAC0E,MAAM,CAAC6C,CAAC,CAACR,MAAM,CAAC,GAAG7G,UAAU,EAAEuK,OAAO,CAAC,CAAC,CAAC;cAAE;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClG,CAAC;YAAA,GARDjD,CAAC,CAACL,EAAE;cAAAmD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAST,CACN;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eAENtL,OAAA;UAAKiL,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BlL,OAAA;YAAKiL,SAAS,EAAC,cAAc;YAAAC,QAAA,EAC1BxI,iBAAiB,gBAChB1C,OAAA,CAAAE,SAAA;cAAAgL,QAAA,GAAE,kBAAgB,EAAC,CAAChK,SAAS,GAAGF,UAAU,EAAEuK,OAAO,CAAC,CAAC,CAAC,EAAC,MAAI,EAACvK,UAAU,CAACuK,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;YAAA,eAAE,CAAC,gBAEtFvL,OAAA,CAAAE,SAAA;cAAAgL,QAAA,GAAE,uBAAqB,EAAC,CAAChK,SAAS,GAAG,IAAI,EAAEqK,OAAO,CAAC,CAAC,CAAC;YAAA,eAAG;UACzD;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC,eACNtL,OAAA;YAAKiL,SAAS,EAAE,cAAcvI,iBAAiB,GAAG,QAAQ,GAAG,MAAM,EAAG;YAAAwI,QAAA,EACnExI,iBAAiB,gBAChB1C,OAAA,CAAAE,SAAA;cAAAgL,QAAA,GAAE,mBAAiB,EAACpJ,WAAW,EAAC,MAAI,EAACZ,SAAS,EAAC,SAAO;YAAA,eAAE,CAAC,gBAEzDlB,OAAA,CAAAE,SAAA;cAAAgL,QAAA,EAAE;YAA8C,gBAAE;UACnD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH,CAAC,eAENtL,OAAA;MAAKiL,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BlL,OAAA;QAAAkL,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtB9J,WAAW,CAACqF,MAAM,KAAK,CAAC,gBACvB7G,OAAA;QAAKiL,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BlL,OAAA;UAAAkL,QAAA,EAAG;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC1BtL,OAAA;UAAAkL,QAAA,EAAO;QAAuC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CAAC,gBAENtL,OAAA;QAAKiL,SAAS,EAAC,cAAc;QAAAC,QAAA,EAC1B1J,WAAW,CAACuF,GAAG,CAAC,CAAC+F,MAAM,EAAEC,KAAK,KAAK;UAClC,MAAMC,aAAa,GAAGxH,MAAM,CAACsH,MAAM,CAAC,IAAI,GAAG;UAC3C,oBACE9M,OAAA;YAEEiL,SAAS,EAAE,gBAAgB+B,aAAa,IAAI,CAAC,GAAG,OAAO,GAAGA,aAAa,IAAI,GAAG,GAAG,QAAQ,GAAG,KAAK,EAAG;YAAA9B,QAAA,GAEnG8B,aAAa,CAACzB,OAAO,CAAC,CAAC,CAAC,EAAC,GAC5B;UAAA,GAJOwB,KAAK;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIP,CAAC;QAEV,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENtL,OAAA;MAAKiL,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BlL,OAAA;QAAAkL,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBtL,OAAA;QAAKiL,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChClL,OAAA;UAAKiL,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBACjClL,OAAA;YAAAkL,QAAA,EAAM;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAClBtL,OAAA;YAAAkL,QAAA,EAAM;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAClBtL,OAAA;YAAAkL,QAAA,EAAM;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACpBtL,OAAA;YAAAkL,QAAA,EAAM;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eACnBtL,OAAA;YAAAkL,QAAA,EAAM;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC,EACLtJ,UAAU,CAAC6E,MAAM,KAAK,CAAC,iBACtB7G,OAAA;UAAKiL,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACpD,EACAtJ,UAAU,CAAC+E,GAAG,CAAC,CAACsB,CAAC,EAAE4E,CAAC;UAAA,IAAAC,OAAA;UAAA,oBACnBlN,OAAA;YAAKiL,SAAS,EAAE,mBAAmB5C,CAAC,CAACyE,MAAM,KAAK,SAAS,GAAG,KAAK,GAAG,MAAM,EAAG;YAAA5B,QAAA,gBAC3ElL,OAAA;cAAAkL,QAAA,GAAM,GAAC,EAAC7C,CAAC,CAAC8E,KAAK,MAAAD,OAAA,GAAI7E,CAAC,CAACrB,IAAI,cAAAkG,OAAA,uBAANA,OAAA,CAAQ9H,YAAY;YAAA;cAAA+F,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC/CtL,OAAA;cAAAkL,QAAA,GAAM,GAAC,EAAC1F,MAAM,CAAC6C,CAAC,CAACR,MAAM,CAAC,CAAC0D,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC3CtL,OAAA;cAAAkL,QAAA,EAAO7C,CAAC,CAACyE,MAAM,KAAK,SAAS,GAAG,GAAGtH,MAAM,CAAC6C,CAAC,CAAC+E,kBAAkB,IAAI/E,CAAC,CAACgF,iBAAiB,CAAC,CAAC9B,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;YAAS;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxHtL,OAAA;cAAAkL,QAAA,GAAM,GAAC,EAAC1F,MAAM,CAAC6C,CAAC,CAACiF,MAAM,CAAC,CAAC/B,OAAO,CAAC,CAAC,CAAC;YAAA;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC3CtL,OAAA;cAAMiL,SAAS,EAAC,QAAQ;cAAAC,QAAA,EAAE,GAAG7C,CAAC,CAACkF,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE,GAAG/H,MAAM,CAAC6C,CAAC,CAACkF,MAAM,CAAC,CAAChC,OAAO,CAAC,CAAC,CAAC;YAAE;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GALZ2B,CAAC;YAAA9B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAM/E,CAAC;QAAA,CACP,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENtL,OAAA;MAAKiL,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBlL,OAAA;QAAAkL,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBtL,OAAA;QAAAkL,QAAA,gBACElL,OAAA;UAAAkL,QAAA,EAAI;QAAwD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjEtL,OAAA;UAAAkL,QAAA,EAAI;QAAuD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChEtL,OAAA;UAAAkL,QAAA,EAAI;QAAwD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjEtL,OAAA;UAAAkL,QAAA,EAAI;QAAgD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzDtL,OAAA;UAAAkL,QAAA,EAAI;QAA0D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnEtL,OAAA;UAAAkL,QAAA,EAAI;QAAmD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC,eACLtL,OAAA;QAAKiL,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3BlL,OAAA;UAAAkL,QAAA,EAAQ;QAAqB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,2DACxC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzK,EAAA,CA9iCID,OAAO;AAAA4M,EAAA,GAAP5M,OAAO;AAgjCb,eAAeA,OAAO;AAAC,IAAA4M,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}