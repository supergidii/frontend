{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import{motion,AnimatePresence}from'framer-motion';import axios from'axios';import'./Aviator.css';// Set the base URL for API calls (env override, default to local backend)\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_BASE_URL||'http://127.0.0.1:8000';// Always attach Authorization header when token exists (backend ignores it for public endpoints)\naxios.interceptors.request.use(config=>{try{const tok=localStorage.getItem('access_token');if(tok){config.headers=config.headers||{};config.headers['Authorization']=`Bearer ${tok}`;}}catch(e){}return config;});// Optional: auto-redirect on auth errors\naxios.interceptors.response.use(resp=>resp,error=>{var _error$response;const status=error===null||error===void 0?void 0:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status;if(status===401){// keep any existing intent; just send user to login\nif(!localStorage.getItem('post_login_redirect')){localStorage.setItem('post_login_redirect',JSON.stringify({path:window.location.pathname}));}// Don't hard redirect here to avoid loops during background polling\n}return Promise.reject(error);});// Debug logging helper - only logs in development\nconst debugLog=function(){if(process.env.NODE_ENV==='development'){console.log(...arguments);}};// Helper functions for Betika-style flow\nconst formatMoney=n=>n.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2});const clamp=(v,min,max)=>Math.min(max,Math.max(min,v));// Generate unique bet ID\nconst generateBetId=()=>{const a=Math.random().toString(36).slice(2,9);const b=Math.random().toString(36).slice(2,9);return`${Date.now()}-${a}${b}`;};const Aviator=()=>{const[gameState,setGameState]=useState('waiting');const[multiplier,setMultiplier]=useState(1.00);const[betAmount,setBetAmount]=useState(10);const[balance,setBalance]=useState(0);const[isBetPlaced,setIsBetPlaced]=useState(false);const[gameHistory,setGameHistory]=useState([]);const[timeLeft,setTimeLeft]=useState(5);const[crashPoint,setCrashPoint]=useState(0);const[roundNumber,setRoundNumber]=useState(0);const[betHistory,setBetHistory]=useState([]);const[currentGame,setCurrentGame]=useState(null);const[error,setError]=useState(null);const[success,setSuccess]=useState(null);const[isLoading,setIsLoading]=useState(true);const[isCashingOut,setIsCashingOut]=useState(false);const[hasLocalActiveBet,setHasLocalActiveBet]=useState(false);const[activeBets,setActiveBets]=useState([]);const[connectionStatus,setConnectionStatus]=useState('connected');const[pollingErrors,setPollingErrors]=useState(0);const[betSlips,setBetSlips]=useState([]);// Betika-style bet slips\nconst[autoBet,setAutoBet]=useState(false);const[lastStake,setLastStake]=useState(10);const[lastCrashPoint,setLastCrashPoint]=useState(null);const gameInterval=useRef(null);const gameCheckInterval=useRef(null);const gameTimeout=useRef(null);const isRunningRef=useRef(false);const lastUpdateTime=useRef(0);const lastAnimTimeRef=useRef(0);const isBetPlacedRef=useRef(false);const hasLocalActiveBetRef=useRef(false);const gameStateRef=useRef('waiting');const pollingRetryCount=useRef(0);const maxPollingRetries=5;const lastSuccessfulPoll=useRef(Date.now());const heartbeatInterval=useRef(null);const autoRefreshTimeout=useRef(null);const consecutiveErrors=useRef(0);const lastGameState=useRef('waiting');const lastRoundNumber=useRef(0);const periodicRefreshInterval=useRef(null);const lastCountdownUpdate=useRef(Date.now());const lastBetStateUpdate=useRef(Date.now());const countdownStartDetected=useRef(false);const previousTimeLeft=useRef(0);const countdownStartTimeout=useRef(null);const targetMultiplierRef=useRef(1.0);const animationFrameRef=useRef(null);const depositPollInterval=useRef(null);// API calls\nconst fetchBalance=async()=>{try{debugLog('Fetching balance from:',`${API_BASE_URL}/api/aviator/balance/`);const response=await axios.get(`${API_BASE_URL}/api/aviator/balance/`);debugLog('Balance response:',response.data);setBalance(response.data.balance);}catch(error){var _error$response2;console.error('Error fetching balance:',error);console.error('Error details:',(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data);// If unauthorized or network error, default to 0 until login\nsetBalance(0);}};const fetchCurrentGame=async function(){let isRetry=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;try{const response=await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);const gameData=response.data;const backendStatus=gameData.status;// 'waiting' | 'active' | 'crashed'\nconst effectivePhase=gameData.phase||(backendStatus==='active'?'playing':backendStatus);let didCrashThisTick=false;// Reset error counters on successful fetch\nsetConnectionStatus('connected');setPollingErrors(0);pollingRetryCount.current=0;lastSuccessfulPoll.current=Date.now();consecutiveErrors.current=0;// Track game state changes for auto-refresh detection\nlastGameState.current=effectivePhase;lastRoundNumber.current=gameData.round_number;// Debug logging\ndebugLog('Backend data:',{status:backendStatus,phase:gameData.phase,effectivePhase,time_remaining:gameData.time_remaining,round_number:gameData.round_number,current_multiplier:gameData.current_multiplier});// Check if this is a new round\nconst isNewRound=gameData.round_number!==roundNumber;// Only update state if there are actual changes to prevent unnecessary re-renders\nif(gameData.round_number!==roundNumber){setRoundNumber(gameData.round_number);}// Only update upcoming crash point when not showing a crash banner\nif(gameState!=='crashed'&&Number(gameData.crash_point)!==crashPoint){setCrashPoint(Number(gameData.crash_point)||1.5);}// Batch state updates to prevent multiple re-renders\nconst stateUpdates={};// Update game state only if it actually changed\n// PRIORITIZE crash event regardless of phase to ensure banner shows\nif(gameData.game_crashed&&gameState!=='crashed'&&gameState!=='loading_after_crash'){var _ref,_gameData$crashed_at;console.log('💥 Crash detected in fetchCurrentGame (prioritized):',gameData);stateUpdates.gameState='crashed';// Use the met crash value for the banner; do NOT overwrite with next round's crash point\nconst crashedValue=(_ref=(_gameData$crashed_at=gameData.crashed_at)!==null&&_gameData$crashed_at!==void 0?_gameData$crashed_at:gameData.previous_crash_point)!==null&&_ref!==void 0?_ref:gameData.crash_point;if(crashedValue){const numericCrashedValue=Number(crashedValue);if(!Number.isNaN(numericCrashedValue)&&numericCrashedValue>0){stateUpdates.multiplier=numericCrashedValue;stateUpdates.crashPoint=numericCrashedValue;setLastCrashPoint(numericCrashedValue);}}stateUpdates.isBetPlaced=false;stateUpdates.hasLocalActiveBet=false;if(gameData.round_number){stateUpdates.roundNumber=gameData.round_number;}didCrashThisTick=true;}else if(effectivePhase==='waiting'){// Transition to waiting state (backend controls the timing)\nif(gameState!=='waiting'){debugLog('Transitioning to waiting state, time_remaining:',gameData.time_remaining);stateUpdates.gameState='waiting';}// Do not reset multiplier while UI is showing crashed state\nif(gameState!=='crashed'){stateUpdates.multiplier=1.00;}if(typeof gameData.time_remaining==='number'){const newTimeLeft=Math.max(0,Math.ceil(gameData.time_remaining));if(newTimeLeft!==timeLeft){debugLog('Updating countdown:',timeLeft,'->',newTimeLeft);// Avoid changing the countdown while showing crash; we'll refresh on transition\nif(gameState!=='crashed'){stateUpdates.timeLeft=newTimeLeft;lastCountdownUpdate.current=Date.now();}}}if(isNewRound){stateUpdates.isBetPlaced=false;stateUpdates.hasLocalActiveBet=false;// New round: clear any legacy active bets and mark previous-round active slips as lost\nsetActiveBets([]);setBetSlips(prev=>prev.map(slip=>slip.roundId!==gameData.round_number&&slip.status==='active'?{...slip,status:'lost'}:slip));// Auto-bet if enabled\nif(autoBet&&lastStake>=10&&balance>=lastStake){setTimeout(()=>{setBetAmount(lastStake);placeBet();},1000);// Small delay to ensure round is fully initialized\n}}}else if((effectivePhase==='playing'||effectivePhase==='starting')&&gameState!=='playing'){stateUpdates.gameState='playing';if(typeof gameData.current_multiplier==='number'){stateUpdates.multiplier=gameData.current_multiplier;targetMultiplierRef.current=gameData.current_multiplier;}// Do not update countdown during gameplay; countdown is only for waiting phase\nstateUpdates.timeLeft=0;// Client-side safeguard: if live multiplier reaches or exceeds target crash point, show crash immediately\nconst targetCrashPoint=Number(gameData.crash_point);if(!Number.isNaN(targetCrashPoint)&&typeof gameData.current_multiplier==='number'){if(gameData.current_multiplier>=targetCrashPoint){stateUpdates.gameState='crashed';stateUpdates.multiplier=targetCrashPoint;stateUpdates.crashPoint=targetCrashPoint;stateUpdates.isBetPlaced=false;stateUpdates.hasLocalActiveBet=false;setLastCrashPoint(targetCrashPoint);didCrashThisTick=true;}}}// Apply all state updates at once\nObject.entries(stateUpdates).forEach(_ref2=>{let[key,value]=_ref2;switch(key){case'gameState':setGameState(value);break;case'multiplier':setMultiplier(value);break;case'timeLeft':setTimeLeft(value);break;case'isBetPlaced':setIsBetPlaced(value);break;case'hasLocalActiveBet':setHasLocalActiveBet(value);break;case'roundNumber':setRoundNumber(value);break;case'crashPoint':setCrashPoint(value);break;case'isLoading':setIsLoading(value);break;default:// No action needed for unknown keys\nbreak;}});// If crash just happened, refresh recent history immediately and retry shortly after\nif(didCrashThisTick){try{await fetchGameHistory();}catch(e){console.warn('Failed to refresh game history after crash:',e);}// Retry once after a short delay to ensure backend has persisted the crash\nsetTimeout(()=>{fetchGameHistory().catch(err=>console.warn('Retry history refresh after crash failed:',err));},800);}// Handle async operations after state updates\nif(effectivePhase==='waiting'&&isNewRound){await checkActiveBet();}else if((effectivePhase==='playing'||effectivePhase==='starting')&&gameState!=='playing'){await checkActiveBet();}// Update multiplier only during active gameplay to prevent flickering\nif(stateUpdates.gameState==='playing'||effectivePhase==='playing'){const now=Date.now();// Debounce updates to prevent rapid re-renders\nif(now-lastUpdateTime.current>100){// Only update if multiplier actually changed to prevent unnecessary re-renders\nif(typeof gameData.current_multiplier==='number'&&Math.abs(gameData.current_multiplier-multiplier)>0.001){setMultiplier(gameData.current_multiplier);}lastUpdateTime.current=now;}}return gameData;}catch(error){console.error('Error fetching real-time game state:',error);// Handle connection errors\nsetConnectionStatus('disconnected');setPollingErrors(prev=>prev+1);pollingRetryCount.current+=1;consecutiveErrors.current+=1;// Trigger auto-refresh after consecutive errors\nif(consecutiveErrors.current>=3){console.warn('🔄 Auto-refresh triggered due to consecutive errors');scheduleAutoRefresh();}// If we have too many errors, try to recover\nif(pollingRetryCount.current>=maxPollingRetries){console.warn('Too many polling errors, attempting recovery...');setConnectionStatus('reconnecting');// Try to reinitialize the connection\nsetTimeout(()=>{pollingRetryCount.current=0;setConnectionStatus('connected');},2000);}return null;}};const fetchGameHistory=async()=>{try{var _response$data;debugLog('Fetching game history from:',`${API_BASE_URL}/api/aviator/game-history/`);const response=await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);debugLog('Game history response:',response.data);debugLog('Game history response type:',typeof response.data);debugLog('Game history response length:',(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.length);// Ensure we extract numeric crash points and filter out invalid values\nconst crashPoints=response.data.map(game=>Number(game.crash_point)).filter(point=>!isNaN(point)&&point>0);debugLog('Processed crash points:',crashPoints);setGameHistory(crashPoints);}catch(error){var _error$response3;console.error('Error fetching game history:',error);console.error('Error details:',(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data);// Set empty array as fallback\nsetGameHistory([]);}};const fetchBetHistory=async()=>{try{debugLog('Fetching bet history from:',`${API_BASE_URL}/api/aviator/history/`);let response;try{response=await axios.get(`${API_BASE_URL}/api/aviator/history/`);}catch(e){// Fallback for anonymous/testing\nresponse=await axios.get(`${API_BASE_URL}/api/aviator/history-public/?user_id=player_1`);}debugLog('Bet history response:',response.data);setBetHistory(response.data);}catch(error){var _error$response4;console.error('Error fetching bet history:',error);console.error('Error details:',(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data);}};// Check if user has an active bet in the current round - simplified to prevent blinking\nconst checkActiveBet=async()=>{// Only check on new rounds or when explicitly needed\nif(gameState==='playing'&&hasLocalActiveBetRef.current){// Don't check during active gameplay to prevent button blinking\nreturn true;}try{const response=await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);const hasActiveBet=response.data.has_active_bet;setIsBetPlaced(hasActiveBet);if(hasActiveBet){setHasLocalActiveBet(true);}else if(gameState!=='playing'){setHasLocalActiveBet(false);}lastBetStateUpdate.current=Date.now();return hasActiveBet;}catch(error){console.error('Error checking active bet:',error);// Don't change state on errors during gameplay\nif(gameState!=='playing'){setIsBetPlaced(false);setHasLocalActiveBet(false);return false;}return hasLocalActiveBetRef.current;}};// Place bet - Betika-style with bet slips\nconst placeBet=async()=>{// Validate bet placement conditions\nif(gameState!=='waiting'){setError('Bets can only be placed before takeoff');return;}if(!(timeLeft>0)){setError('Bets can only be placed during the countdown');return;}if(balance<betAmount){setError('Insufficient balance');return;}try{var _response$data2,_response$data2$bet,_response$data3,_response$data3$bet,_response$data4,_response$data4$bet;const response=await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`,{amount:betAmount,user_id:'player_1'// Simple user ID for anonymous betting\n});setBalance(response.data.balance);setError(null);// Create bet slip for Betika-style display\nconst betSlip={id:((_response$data2=response.data)===null||_response$data2===void 0?void 0:(_response$data2$bet=_response$data2.bet)===null||_response$data2$bet===void 0?void 0:_response$data2$bet.id)||generateBetId(),roundId:roundNumber,stake:betAmount,status:'active',placedAt:Date.now(),cashedAt:null,cashoutOdds:null,winAmount:null,backendBetId:(_response$data3=response.data)===null||_response$data3===void 0?void 0:(_response$data3$bet=_response$data3.bet)===null||_response$data3$bet===void 0?void 0:_response$data3$bet.id};setBetSlips(prev=>[betSlip,...prev]);setLastStake(betAmount);// Update legacy bet state for compatibility\nsetIsBetPlaced(true);setHasLocalActiveBet(true);if((_response$data4=response.data)!==null&&_response$data4!==void 0&&(_response$data4$bet=_response$data4.bet)!==null&&_response$data4$bet!==void 0&&_response$data4$bet.id){setActiveBets(prev=>[{id:response.data.bet.id,amount:Number(response.data.bet.amount)},...prev]);}// Verify the bet was placed successfully\nconst hasActiveBet=await checkActiveBet();if(!hasActiveBet){setIsBetPlaced(false);}}catch(error){var _error$response5,_error$response6,_error$response6$data;const status=error===null||error===void 0?void 0:(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status;if(status===401||status===403){localStorage.setItem('post_login_redirect',JSON.stringify({path:window.location.pathname,action:'placeBet',payload:{stake:betAmount}}));window.location.href='/login';return;}setError((error===null||error===void 0?void 0:(_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.error)||(error===null||error===void 0?void 0:error.message)||'Failed to place bet');console.error('Error placing bet:',error);// Ensure bet state is false if placement failed\nsetIsBetPlaced(false);setHasLocalActiveBet(false);}};// Cashout - Betika-style with bet slips\nconst cashout=async function(){let specificBetId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;// Prevent multiple rapid clicks\nif(isCashingOut){return;}// Validate cashout conditions\nif(gameState!=='playing'){setError('Can only cashout during active gameplay');return;}setIsCashingOut(true);try{var _response$data5,_response$data5$bet;const response=await axios.post(`${API_BASE_URL}/api/aviator/cashout/`,{round_number:roundNumber,multiplier:multiplier,user_id:'player_1',// Simple user ID for anonymous betting\nbet_id:specificBetId});setBalance(response.data.balance);setError(null);// Update bet slip status\nif(specificBetId){setBetSlips(prev=>prev.map(slip=>{if(slip.id===specificBetId||slip.backendBetId===specificBetId){return{...slip,status:'cashed',cashedAt:Date.now(),cashoutOdds:multiplier,winAmount:Math.round(slip.stake*multiplier*100)/100};}return slip;}));}// Update legacy bet state\nif((_response$data5=response.data)!==null&&_response$data5!==void 0&&(_response$data5$bet=_response$data5.bet)!==null&&_response$data5$bet!==void 0&&_response$data5$bet.id){setActiveBets(prev=>prev.filter(b=>b.id!==response.data.bet.id));}const remaining=activeBets.length-1;setIsBetPlaced(remaining>0);setHasLocalActiveBet(remaining>0);setBetHistory(prev=>[response.data.bet,...prev.slice(0,19)]);// Refresh balance to ensure it's up to date\nawait fetchBalance();// Verify bet state was updated\nawait checkActiveBet();}catch(error){var _error$response7,_error$response7$data;setError(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.error)||'Failed to cashout');console.error('Error cashing out:',error);}finally{setIsCashingOut(false);}};// Bet controls\nconst doubleBet=()=>{if(balance>=betAmount*2){setBetAmount(prev=>prev*2);}};const halfBet=()=>{setBetAmount(prev=>Math.max(1,Math.floor(prev/2)));};const resetBet=()=>{setBetAmount(10);};const addChip=amount=>{setBetAmount(prev=>{const next=Math.max(1,prev+amount);return Math.min(next,balance);});};const setMaxBet=()=>{setBetAmount(Math.max(1,Math.floor(balance)));};const clearBet=()=>{setBetAmount(1);};// Handle cashout for specific bet slip\nconst handleBetSlipCashout=async betSlipId=>{const betSlip=betSlips.find(slip=>slip.id===betSlipId);if(!betSlip||betSlip.status!=='active')return;await cashout(betSlip.backendBetId||betSlipId);};// Auto-bet functionality\nconst handleAutoBetToggle=enabled=>{setAutoBet(enabled);};// Manual refresh function for recovery\nconst manualRefresh=async()=>{console.log('🔄 Manual refresh triggered');setConnectionStatus('reconnecting');setIsLoading(true);try{// Force refresh all data\nawait Promise.all([fetchBalance(),fetchCurrentGame(),fetchGameHistory(),fetchBetHistory()]);// Check for active bet\nif(roundNumber>0){await checkActiveBet();}setConnectionStatus('connected');setPollingErrors(0);pollingRetryCount.current=0;consecutiveErrors.current=0;console.log('✅ Manual refresh completed successfully');}catch(error){console.error('❌ Manual refresh failed:',error);setConnectionStatus('disconnected');}finally{setIsLoading(false);}};// Wallet actions\nconst[walletAmount,setWalletAmount]=useState('');const handleDeposit=async()=>{const accessToken=localStorage.getItem('access_token');if(!accessToken){localStorage.setItem('post_login_redirect',JSON.stringify({path:window.location.pathname,action:'deposit',payload:{amount:walletAmount}}));window.location.href='/login';return;}try{if(!walletAmount){setError('Enter an amount first');return;}const prevBalance=balance;// Initiate STK Push via M-Pesa integration\nawait axios.get(`${API_BASE_URL}/api/mpesa/stkpush/`,{params:{amount:walletAmount}});setSuccess('STK Push initiated. Enter your M-Pesa PIN to complete the payment. Your balance will update automatically once confirmed.');// Begin short polling for updated balance after confirmation\nif(depositPollInterval.current)clearInterval(depositPollInterval.current);let polls=0;depositPollInterval.current=setInterval(async()=>{try{await fetchBalance();polls+=1;if(balance>prevBalance||polls>=40){// up to ~120s at 3s interval\nclearInterval(depositPollInterval.current);}}catch(e){polls+=1;if(polls>=40){clearInterval(depositPollInterval.current);}}},3000);}catch(e){var _e$response,_e$response2,_e$response2$data;console.error('Deposit failed',e);if((e===null||e===void 0?void 0:(_e$response=e.response)===null||_e$response===void 0?void 0:_e$response.status)===401){localStorage.setItem('post_login_redirect',JSON.stringify({path:window.location.pathname,action:'deposit',payload:{amount:walletAmount}}));window.location.href='/login';return;}setError((e===null||e===void 0?void 0:(_e$response2=e.response)===null||_e$response2===void 0?void 0:(_e$response2$data=_e$response2.data)===null||_e$response2$data===void 0?void 0:_e$response2$data.error)||'Deposit failed. Please try again.');}};const handleWithdraw=async()=>{const accessToken=localStorage.getItem('access_token');if(!accessToken){localStorage.setItem('post_login_redirect',JSON.stringify({path:window.location.pathname,action:'withdraw',payload:{amount:walletAmount}}));window.location.href='/login';return;}try{const response=await axios.post(`${API_BASE_URL}/api/aviator/withdraw/`,{amount:walletAmount});setBalance(response.data.balance);setSuccess('Your withdrawal request has been received. Please note that due to high withdrawal activity today, processing may take a little longer than usual. Rest assured, your funds will be credited immediately once processing is complete. Thank you for your patience.');}catch(e){var _e$response3,_e$response4,_e$response4$data;console.error('Withdraw failed',e);if((e===null||e===void 0?void 0:(_e$response3=e.response)===null||_e$response3===void 0?void 0:_e$response3.status)===401){localStorage.setItem('post_login_redirect',JSON.stringify({path:window.location.pathname,action:'withdraw',payload:{amount:walletAmount}}));window.location.href='/login';return;}setError((e===null||e===void 0?void 0:(_e$response4=e.response)===null||_e$response4===void 0?void 0:(_e$response4$data=_e$response4.data)===null||_e$response4$data===void 0?void 0:_e$response4$data.error)||'Withdraw failed. Please try again.');}};// Automatic refresh scheduling function\nconst scheduleAutoRefresh=()=>{// Clear any existing auto-refresh timeout\nif(autoRefreshTimeout.current){clearTimeout(autoRefreshTimeout.current);}// Schedule auto-refresh after a short delay to avoid rapid refreshes\nautoRefreshTimeout.current=setTimeout(()=>{console.log('🔄 Auto-refresh executing...');manualRefresh();},2000);// 2 second delay\n};// Aggressive auto-refresh detection\nconst checkForAutoRefresh=()=>{const now=Date.now();const timeSinceLastPoll=now-lastSuccessfulPoll.current;const timeSinceCountdownUpdate=now-lastCountdownUpdate.current;const timeSinceBetStateUpdate=now-lastBetStateUpdate.current;// Auto-refresh conditions (more aggressive):\n// 1. No successful polls for 8+ seconds (reduced from 15)\n// 2. Countdown not updating for 5+ seconds during waiting state\n// 3. Bet state not updating for 10+ seconds\n// 4. Game state seems stuck\nif(timeSinceLastPoll>8000){console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');scheduleAutoRefresh();return;}// Check if countdown is stuck during waiting state\nif(gameStateRef.current==='waiting'&&timeSinceCountdownUpdate>5000){console.warn('🔄 Auto-refresh: Countdown stuck during waiting state (state:',gameStateRef.current,')');scheduleAutoRefresh();return;}// Check if bet state is stuck\nif(timeSinceBetStateUpdate>10000){console.warn('🔄 Auto-refresh: Bet state not updating');scheduleAutoRefresh();return;}// Check if game state is stuck\nif(gameStateRef.current==='playing'&&timeSinceLastPoll>6000){console.warn('🔄 Auto-refresh: Game state stuck in playing mode');scheduleAutoRefresh();return;}// Check if we're in waiting state for too long (should transition to playing)\nif(gameStateRef.current==='waiting'&&timeSinceLastPoll>8000){console.warn('🔄 Auto-refresh: Stuck in waiting state too long');scheduleAutoRefresh();return;}};// Periodic auto-refresh to prevent any stuck states\nconst startPeriodicAutoRefresh=()=>{if(periodicRefreshInterval.current){clearInterval(periodicRefreshInterval.current);}// Auto-refresh every 30 seconds as a safety net\nperiodicRefreshInterval.current=setInterval(()=>{console.log('🔄 Periodic auto-refresh triggered (safety net)');scheduleAutoRefresh();},30000);// 30 seconds\n};// Detect countdown start and trigger auto-refresh\nconst detectCountdownStart=()=>{// Clear any existing timeout\nif(countdownStartTimeout.current){clearTimeout(countdownStartTimeout.current);}// Check if countdown just started (transitioned from 0 or undefined to a positive number)\n// OR if we're in a new round and countdown is starting\nconst isNewCountdown=gameState==='waiting'&&timeLeft>0&&previousTimeLeft.current===0;const isNewRoundCountdown=gameState==='waiting'&&timeLeft>0&&roundNumber>lastRoundNumber.current;if(isNewCountdown||isNewRoundCountdown){console.log('🚀 Countdown started detected! Auto-refreshing game state...',{isNewCountdown,isNewRoundCountdown,timeLeft,previousTimeLeft:previousTimeLeft.current,roundNumber,lastRoundNumber:lastRoundNumber.current});countdownStartDetected.current=true;// Trigger auto-refresh immediately when countdown starts\nscheduleAutoRefresh();// Also set a small delay to ensure the refresh happens after countdown is fully initialized\ncountdownStartTimeout.current=setTimeout(()=>{console.log('🔄 Countdown start auto-refresh executing...');manualRefresh();},1000);// 1 second delay to ensure countdown is stable\n}// Update previous time left for next comparison\npreviousTimeLeft.current=timeLeft;};// Handle game crash\nconst handleGameCrash=useCallback(async()=>{console.log('🚨 Game crashed - handling crash state');// Reset bet state when game crashes\nsetIsBetPlaced(false);setHasLocalActiveBet(false);isBetPlacedRef.current=false;hasLocalActiveBetRef.current=false;// Clear legacy active bets list so nothing remains active visually\nsetActiveBets([]);// Mark any still-active local bet slips as lost on crash\nsetBetSlips(prev=>prev.map(slip=>slip.status==='active'?{...slip,status:'lost'}:slip));// Refresh bet history from backend to reflect losses\ntry{await fetchBetHistory();}catch(e){console.warn('Failed to refresh bet history on crash:',e);}// Optionally prefetch latest state so we have fresh round/crash info ready\ntry{await fetchCurrentGame();}catch(error){console.error('Error prefetching game after crash:',error);}console.log('✅ Crash handling complete - bets marked lost, awaiting next round');},[isBetPlaced,roundNumber,crashPoint]);// Effects - handle crash state transition (show crash then transition)\nuseEffect(()=>{if(gameState==='crashed'){console.log('🔄 Processing crash state - will transition to loading after 2 seconds');// Immediately mark any active bet as lost\ntry{handleGameCrash();}catch(e){console.error('Error while handling crash state updates:',e);}// Show crash for ~3s, then move to waiting and let backend drive countdown\nconst crashTimeout=setTimeout(()=>{console.log('✅ Transitioning from crashed to waiting state (backend countdown)');setGameState('waiting');setMultiplier(1.00);// Fetch latest state and refresh recent results to include last crash\nfetchCurrentGame().catch(error=>{console.error('Error fetching game state after crash transition:',error);});fetchGameHistory().catch(error=>{console.warn('Error refreshing game history after crash transition:',error);});},3000);return()=>clearTimeout(crashTimeout);}},[gameState]);// Effects - handle loading after crash transition\nuseEffect(()=>{if(gameState==='loading_after_crash'){console.log('🔄 Processing crash loading state...');// Set a timeout to transition from loading to waiting state\nconst transitionTimeout=setTimeout(()=>{console.log('✅ Transitioning from loading to waiting state');console.log('Current gameState before transition:',gameState);setIsLoading(false);// Set loading to false first\nsetGameState('waiting');// Then transition to waiting\nconsole.log('Loading set to false, game state set to waiting');// Force a fresh fetch to get the latest game state\nsetTimeout(()=>{console.log('Fetching fresh game state after transition...');fetchCurrentGame().catch(error=>{console.error('Error fetching game state after crash transition:',error);});},100);// Small delay to ensure state updates\n},1500);// 1.5 second loading state\nreturn()=>clearTimeout(transitionTimeout);}},[gameState]);// Only check bet state when game becomes active, not during gameplay\nuseEffect(()=>{if(gameState==='playing'){// Check bet state only once when game becomes active\nconst immediateCheck=async()=>{await checkActiveBet();};immediateCheck();}},[gameState]);// Auto-refresh when countdown gets stuck\nuseEffect(()=>{if(gameState==='waiting'&&timeLeft>0){// Set a timeout to check if countdown is stuck\nconst countdownCheck=setTimeout(()=>{const now=Date.now();const timeSinceCountdownUpdate=now-lastCountdownUpdate.current;// If countdown hasn't updated for 3+ seconds, trigger auto-refresh\nif(timeSinceCountdownUpdate>3000){console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');scheduleAutoRefresh();}},4000);// Check after 4 seconds\nreturn()=>clearTimeout(countdownCheck);}},[gameState,timeLeft]);// Monitor countdown changes and detect when it starts\nuseEffect(()=>{detectCountdownStart();},[gameState,timeLeft]);// Reset countdown detection when game state changes\nuseEffect(()=>{if(gameState!=='waiting'){countdownStartDetected.current=false;previousTimeLeft.current=0;if(countdownStartTimeout.current){clearTimeout(countdownStartTimeout.current);}}},[gameState]);// Keep a ref in sync with the state to make race-free decisions during polling\nuseEffect(()=>{isBetPlacedRef.current=isBetPlaced;},[isBetPlaced]);useEffect(()=>{hasLocalActiveBetRef.current=hasLocalActiveBet;},[hasLocalActiveBet]);useEffect(()=>{gameStateRef.current=gameState;},[gameState]);useEffect(()=>{return()=>{if(gameInterval.current)clearInterval(gameInterval.current);if(gameCheckInterval.current)clearInterval(gameCheckInterval.current);if(gameTimeout.current)clearTimeout(gameTimeout.current);if(animationFrameRef.current)cancelAnimationFrame(animationFrameRef.current);};},[]);// Initialize and periodic updates\nuseEffect(()=>{debugLog('Aviator component mounted - starting initialization');setIsLoading(true);const initializeComponent=async()=>{try{debugLog('Starting API calls...');await Promise.all([fetchBalance(),fetchCurrentGame().catch(()=>undefined),fetchGameHistory(),fetchBetHistory()]);// Check for active bet after getting current game\nif(roundNumber>0){await checkActiveBet();}debugLog('All API calls completed - server connected');}catch(error){console.error('Error during initialization:',error);}finally{setIsLoading(false);debugLog('Component initialization complete - ready for countdown');}};initializeComponent();// Poll backend for real-time updates - this will handle countdown automatically\nif(gameCheckInterval.current)clearInterval(gameCheckInterval.current);// Enhanced polling function with better error handling\nconst pollForUpdates=async()=>{try{// Always poll, even during crash loading state, but with reduced frequency\nconst pollInterval=gameStateRef.current==='loading_after_crash'?1000:500;debugLog('Polling backend for updates...','State:',gameStateRef.current);const gameData=await fetchCurrentGame();// If we got data, continue normal polling\nif(gameData){// Reset any error states\nsetConnectionStatus('connected');setPollingErrors(0);}}catch(error){console.error('Polling error:',error);// Don't stop polling on errors - keep trying\n}};// Start polling immediately\npollForUpdates();// Set up interval for continuous polling with exponential backoff on errors\nconst setupPolling=()=>{if(gameCheckInterval.current)clearInterval(gameCheckInterval.current);// Adjust polling frequency based on connection status\nconst pollFrequency=connectionStatus==='disconnected'?2000:500;gameCheckInterval.current=setInterval(pollForUpdates,pollFrequency);};setupPolling();// Re-setup polling when connection status changes\nconst statusCheckInterval=setInterval(()=>{if(gameCheckInterval.current){const currentFrequency=connectionStatus==='disconnected'?2000:500;// Only restart if frequency needs to change\nif(pollingErrors>3&&currentFrequency===500){setupPolling();}}},5000);// Heartbeat monitoring - check if we haven't received updates for too long\nheartbeatInterval.current=setInterval(()=>{// Use the aggressive auto-refresh detection\ncheckForAutoRefresh();},2000);// Check every 2 seconds (more frequent)\n// Start periodic auto-refresh as a safety net\nstartPeriodicAutoRefresh();return()=>{debugLog('Cleaning up Aviator component');if(gameCheckInterval.current)clearInterval(gameCheckInterval.current);if(statusCheckInterval)clearInterval(statusCheckInterval);if(heartbeatInterval.current)clearInterval(heartbeatInterval.current);if(periodicRefreshInterval.current)clearInterval(periodicRefreshInterval.current);if(autoRefreshTimeout.current)clearTimeout(autoRefreshTimeout.current);if(countdownStartTimeout.current)clearTimeout(countdownStartTimeout.current);};},[]);// Removed gameState dependency\n// Smooth multiplier animation toward backend target during playing state\nuseEffect(()=>{if(gameState!=='playing'){if(animationFrameRef.current)cancelAnimationFrame(animationFrameRef.current);lastAnimTimeRef.current=0;return;}let isCancelled=false;const animate=timestamp=>{if(isCancelled||gameStateRef.current!=='playing')return;if(!lastAnimTimeRef.current)lastAnimTimeRef.current=timestamp;const dtMs=timestamp-lastAnimTimeRef.current;lastAnimTimeRef.current=timestamp;const crashCap=Number(crashPoint)>0?Number(crashPoint):Infinity;const backendTarget=Math.min(targetMultiplierRef.current||1.0,crashCap);// Increase at 0.05 per second to match backend\nconst increment=0.05*(dtMs/1000);const nextVal=Math.min(backendTarget,multiplier+increment);if(nextVal!==multiplier){setMultiplier(nextVal);}// If we've reached the crash cap, let the normal crash handling flip state\nif(nextVal>=crashCap&&Number.isFinite(crashCap)){// no-op here; backend/client safeguard will set crashed\n}animationFrameRef.current=requestAnimationFrame(animate);};animationFrameRef.current=requestAnimationFrame(animate);return()=>{isCancelled=true;if(animationFrameRef.current)cancelAnimationFrame(animationFrameRef.current);};},[gameState,crashPoint,multiplier]);debugLog('Rendering Aviator component, gameState:',gameState,'timeLeft:',timeLeft,'isLoading:',isLoading,'hasLocalActiveBet:',hasLocalActiveBet,'isBetPlaced:',isBetPlaced,'crashLoading:',gameState==='loading_after_crash');if(isLoading){const isCrashLoading=gameState==='loading_after_crash';return/*#__PURE__*/_jsx(\"div\",{className:\"aviator-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-state\",children:[/*#__PURE__*/_jsx(\"h2\",{children:isCrashLoading?'Game Crashed!':'Loading Aviator Game...'}),/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\",children:isCrashLoading?'💥':'⏳'}),/*#__PURE__*/_jsx(\"p\",{children:isCrashLoading?'Preparing next round...':'Connecting to backend...'})]})});}// Waiting duration used for countdown progress (seconds)\nconst WAIT_DURATION=10;const countdownPercent=Math.max(0,Math.min(100,Math.round(timeLeft/WAIT_DURATION*100)));const cylShouldExplode=gameState==='crashed';return/*#__PURE__*/_jsxs(\"div\",{className:\"aviator-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"aviator-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Aviator\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"balance-display\",children:[\"Balance: Ksh \",balance.toFixed(2)]}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`connection-indicator ${connectionStatus}`,children:[/*#__PURE__*/_jsx(\"span\",{className:\"connection-dot\"}),connectionStatus==='connected'?'Live':connectionStatus==='disconnected'?'Reconnecting...':connectionStatus==='reconnecting'?'Reconnecting...':'Unknown']}),/*#__PURE__*/_jsx(\"button\",{onClick:manualRefresh,className:\"refresh-btn\",disabled:isLoading,title:\"Refresh game state\",type:\"button\",children:\"\\uD83D\\uDD04\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"wallet-controls\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:e=>{e.preventDefault();handleWithdraw();},className:\"wallet-btn outline\",disabled:!walletAmount,children:\"Withdraw\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:\"1\",placeholder:\"Enter amount\",value:walletAmount,onChange:e=>{const v=e.target.value;if(v===''||Number(v)>=1){setWalletAmount(v);}},className:\"wallet-input\"})]})]})]}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Error:\"}),\" \",error,/*#__PURE__*/_jsx(\"button\",{onClick:()=>setError(null),className:\"error-close\",children:\"\\xD7\"})]}),success&&/*#__PURE__*/_jsxs(\"div\",{className:\"success-message\",children:[success,/*#__PURE__*/_jsx(\"button\",{onClick:()=>setSuccess(null),className:\"error-close\",children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-area\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"multiplier-display\",children:/*#__PURE__*/_jsxs(AnimatePresence,{mode:\"wait\",children:[gameState==='waiting'&&/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,scale:0.8},animate:{opacity:1,scale:1},exit:{opacity:0,scale:0.8},className:\"waiting-state\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"game-display\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"aviator-plane-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"cyl-progress-wrap\",\"aria-label\":\"Round countdown\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`cyl-progress ${cylShouldExplode?'explode':''}`,children:[/*#__PURE__*/_jsx(\"div\",{className:\"cyl-core\"}),/*#__PURE__*/_jsx(\"div\",{className:\"cyl-fill\",style:{width:`${countdownPercent}%`}}),/*#__PURE__*/_jsx(\"div\",{className:\"cyl-gloss\"}),/*#__PURE__*/_jsx(\"div\",{className:\"cyl-ends cyl-left\"}),/*#__PURE__*/_jsx(\"div\",{className:\"cyl-ends cyl-right\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"cyl-timer-label\",children:[timeLeft,\"s\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:`aviator-plane waiting`,children:\"\\u2708\\uFE0F\"})]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Next game in \",timeLeft,\"s\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"countdown-circle\",children:/*#__PURE__*/_jsx(\"span\",{className:\"countdown-number\",children:timeLeft})}),/*#__PURE__*/_jsxs(\"div\",{className:\"round-info\",children:[\"Round #\",roundNumber]})]})},\"waiting\"),gameState==='playing'&&/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,scale:0.8},animate:{opacity:1,scale:1},exit:{opacity:0,scale:0.8},className:\"playing-state\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"game-display\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"aviator-plane-container\",children:/*#__PURE__*/_jsx(\"div\",{className:`aviator-plane flying`,children:\"\\u2708\\uFE0F\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"multiplier-value\",children:[multiplier.toFixed(2),\"x\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"game-status\",children:\"Flying!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"round-info\",children:[\"Round #\",roundNumber]})]})},\"playing\"),gameState==='crashed'&&/*#__PURE__*/_jsx(motion.div,{initial:{opacity:0,scale:0.8},animate:{opacity:1,scale:1},exit:{opacity:0,scale:0.8},className:\"crashed-state\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"game-display crashed-anim\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"aviator-plane-container\",children:/*#__PURE__*/_jsx(\"div\",{className:`aviator-plane crashed`,children:\"\\uD83D\\uDCA5\"})}),/*#__PURE__*/_jsxs(\"h2\",{className:\"crash-text animated\",children:[\"CRASHED AT \",Number((lastCrashPoint!==null&&lastCrashPoint!==void 0?lastCrashPoint:crashPoint)||multiplier).toFixed(2),\"x\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"crash-burst\",\"aria-hidden\":\"true\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]}),/*#__PURE__*/_jsx(\"div\",{className:\"game-status\",children:\"Game Over!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"round-info\",children:[\"Round #\",roundNumber]}),/*#__PURE__*/_jsx(\"div\",{className:\"backend-info\",children:/*#__PURE__*/_jsx(\"small\",{children:\"Predetermined crash point from backend\"})})]})},\"crashed\")]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"betting-panel\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"betting-controls-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"balance-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"balance-label\",children:\"Balance\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"balance-amount\",children:[\"Ksh \",formatMoney(balance)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stake-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stake-label\",children:\"Stake\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stake-input-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:betAmount,min:\"10\",max:balance,disabled:!(gameState==='waiting'&&timeLeft>0),onChange:e=>setBetAmount(Math.max(10,parseInt(e.target.value)||10)),className:\"stake-input\"}),/*#__PURE__*/_jsx(\"button\",{onClick:setMaxBet,disabled:!(gameState==='waiting'&&timeLeft>0),className:\"max-btn\",children:\"MAX\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stake-limits\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Min: Ksh 10\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"Max: Ksh \",formatMoney(balance)]})]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:e=>{e.preventDefault();placeBet();},disabled:gameState!=='waiting'||timeLeft<=0||betAmount<10||betAmount>balance,className:`place-bet-main-btn ${gameState==='waiting'&&timeLeft>0?'active':'disabled'}`,children:gameState==='waiting'&&timeLeft>0?'Bet':'Bet (locked)'}),/*#__PURE__*/_jsxs(\"div\",{className:\"auto-bet-section\",children:[/*#__PURE__*/_jsxs(\"label\",{className:\"auto-bet-label\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:autoBet,onChange:e=>handleAutoBetToggle(e.target.checked)}),\"Auto-Bet (next round)\"]}),!autoBet&&/*#__PURE__*/_jsx(\"div\",{className:\"auto-bet-note\",children:\"Will NOT auto-place on next round\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bet-slips-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bet-slips-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Your Bets\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"active-count\",children:[\"Active: \",betSlips.filter(slip=>slip.status==='active').length]})]}),betSlips.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"no-bets-message\",children:\"Place a bet before takeoff to see it here.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"bet-slips-list\",children:betSlips.map(slip=>{var _slip$cashoutOdds;return/*#__PURE__*/_jsxs(\"div\",{className:`bet-slip ${slip.status}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bet-slip-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bet-stake\",children:[\"Stake: \",/*#__PURE__*/_jsxs(\"span\",{className:\"stake-amount\",children:[\"Ksh \",formatMoney(slip.stake)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bet-details\",children:[\"Bet #\",String(slip.id).slice(0,8),\" \\u2022 Round #\",slip.roundId]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bet-slip-actions\",children:[slip.status==='active'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"potential-win\",children:[\"Potential: Ksh \",formatMoney(slip.stake*multiplier)]}),/*#__PURE__*/_jsxs(\"button\",{type:\"button\",onClick:()=>handleBetSlipCashout(slip.id),disabled:gameState!=='playing'||isCashingOut,className:`cashout-btn ${gameState==='playing'?'active':'disabled'}`,children:[\"Cashout @ \",multiplier.toFixed(2),\"x\"]})]}),slip.status==='cashed'&&/*#__PURE__*/_jsxs(\"div\",{className:\"cashed-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"cashout-odds\",children:[\"Cashed @ \",(_slip$cashoutOdds=slip.cashoutOdds)===null||_slip$cashoutOdds===void 0?void 0:_slip$cashoutOdds.toFixed(2),\"x\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"win-amount\",children:[\"+ Ksh \",formatMoney(slip.winAmount)]})]}),slip.status==='lost'&&/*#__PURE__*/_jsxs(\"div\",{className:\"lost-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"lost-label\",children:\"Lost\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"lost-amount\",children:[\"- Ksh \",formatMoney(slip.stake)]})]})]})]},slip.id);})})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-history\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Recent Results\"}),gameHistory.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"history-empty\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"No game history yet\"}),/*#__PURE__*/_jsx(\"small\",{children:\"Games will appear here after they crash\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"history-grid\",children:gameHistory.map((result,index)=>{const numericResult=Number(result)||1.0;return/*#__PURE__*/_jsxs(\"div\",{className:`history-item ${numericResult>=2?'green':numericResult>=1.5?'orange':'red'}`,children:[numericResult.toFixed(2),\"x\"]},index);})})]})]});};export default Aviator;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","AnimatePresence","axios","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","interceptors","request","use","config","tok","localStorage","getItem","headers","e","response","resp","error","_error$response","status","setItem","JSON","stringify","path","window","location","pathname","Promise","reject","debugLog","NODE_ENV","console","log","arguments","formatMoney","n","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","clamp","v","min","max","Math","generateBetId","a","random","toString","slice","b","Date","now","Aviator","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","roundNumber","setRoundNumber","betHistory","setBetHistory","currentGame","setCurrentGame","setError","success","setSuccess","isLoading","setIsLoading","isCashingOut","setIsCashingOut","hasLocalActiveBet","setHasLocalActiveBet","activeBets","setActiveBets","connectionStatus","setConnectionStatus","pollingErrors","setPollingErrors","betSlips","setBetSlips","autoBet","setAutoBet","lastStake","setLastStake","lastCrashPoint","setLastCrashPoint","gameInterval","gameCheckInterval","gameTimeout","isRunningRef","lastUpdateTime","lastAnimTimeRef","isBetPlacedRef","hasLocalActiveBetRef","gameStateRef","pollingRetryCount","maxPollingRetries","lastSuccessfulPoll","heartbeatInterval","autoRefreshTimeout","consecutiveErrors","lastGameState","lastRoundNumber","periodicRefreshInterval","lastCountdownUpdate","lastBetStateUpdate","countdownStartDetected","previousTimeLeft","countdownStartTimeout","targetMultiplierRef","animationFrameRef","depositPollInterval","fetchBalance","get","data","_error$response2","fetchCurrentGame","isRetry","length","gameData","backendStatus","effectivePhase","phase","didCrashThisTick","current","round_number","time_remaining","current_multiplier","isNewRound","Number","crash_point","stateUpdates","game_crashed","_ref","_gameData$crashed_at","crashedValue","crashed_at","previous_crash_point","numericCrashedValue","isNaN","newTimeLeft","ceil","prev","map","slip","roundId","setTimeout","placeBet","targetCrashPoint","Object","entries","forEach","_ref2","key","value","fetchGameHistory","warn","catch","err","checkActiveBet","abs","scheduleAutoRefresh","_response$data","crashPoints","game","filter","point","_error$response3","fetchBetHistory","_error$response4","hasActiveBet","has_active_bet","_response$data2","_response$data2$bet","_response$data3","_response$data3$bet","_response$data4","_response$data4$bet","post","amount","user_id","betSlip","id","bet","stake","placedAt","cashedAt","cashoutOdds","winAmount","backendBetId","_error$response5","_error$response6","_error$response6$data","action","payload","href","message","cashout","specificBetId","_response$data5","_response$data5$bet","bet_id","round","remaining","_error$response7","_error$response7$data","doubleBet","halfBet","floor","resetBet","addChip","next","setMaxBet","clearBet","handleBetSlipCashout","betSlipId","find","handleAutoBetToggle","enabled","manualRefresh","all","walletAmount","setWalletAmount","handleDeposit","accessToken","prevBalance","params","clearInterval","polls","setInterval","_e$response","_e$response2","_e$response2$data","handleWithdraw","_e$response3","_e$response4","_e$response4$data","clearTimeout","checkForAutoRefresh","timeSinceLastPoll","timeSinceCountdownUpdate","timeSinceBetStateUpdate","startPeriodicAutoRefresh","detectCountdownStart","isNewCountdown","isNewRoundCountdown","handleGameCrash","crashTimeout","transitionTimeout","immediateCheck","countdownCheck","cancelAnimationFrame","initializeComponent","pollForUpdates","pollInterval","setupPolling","pollFrequency","statusCheckInterval","currentFrequency","isCancelled","animate","timestamp","dtMs","crashCap","Infinity","backendTarget","increment","nextVal","isFinite","requestAnimationFrame","isCrashLoading","className","children","WAIT_DURATION","countdownPercent","cylShouldExplode","toFixed","onClick","disabled","title","type","preventDefault","placeholder","onChange","target","mode","div","initial","opacity","scale","exit","style","width","parseInt","checked","_slip$cashoutOdds","String","result","index","numericResult"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Always attach Authorization header when token exists (backend ignores it for public endpoints)\naxios.interceptors.request.use((config) => {\n  try {\n    const tok = localStorage.getItem('access_token');\n    if (tok) {\n      config.headers = config.headers || {};\n      config.headers['Authorization'] = `Bearer ${tok}`;\n    }\n  } catch (e) {}\n  return config;\n});\n\n// Optional: auto-redirect on auth errors\naxios.interceptors.response.use(\n  (resp) => resp,\n  (error) => {\n    const status = error?.response?.status;\n    if (status === 401) {\n      // keep any existing intent; just send user to login\n      if (!localStorage.getItem('post_login_redirect')) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname }));\n      }\n      // Don't hard redirect here to avoid loops during background polling\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = (n) => n.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\n\nconst Aviator = () => {\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(0);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  const [lastCrashPoint, setLastCrashPoint] = useState(null);\n  \n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const lastAnimTimeRef = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n  const targetMultiplierRef = useRef(1.0);\n  const animationFrameRef = useRef(null);\n  const depositPollInterval = useRef(null);\n\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      // If unauthorized or network error, default to 0 until login\n      setBalance(0);\n    }\n  };\n\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      let didCrashThisTick = false;\n      \n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n      \n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n      \n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n      \n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n      \n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      \n      // Only update upcoming crash point when not showing a crash banner\n      if (gameState !== 'crashed' && Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n      \n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n      \n      // Update game state only if it actually changed\n      // PRIORITIZE crash event regardless of phase to ensure banner shows\n      if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame (prioritized):', gameData);\n        stateUpdates.gameState = 'crashed';\n        // Use the met crash value for the banner; do NOT overwrite with next round's crash point\n        const crashedValue = gameData.crashed_at ?? gameData.previous_crash_point ?? gameData.crash_point;\n        if (crashedValue) {\n          const numericCrashedValue = Number(crashedValue);\n          if (!Number.isNaN(numericCrashedValue) && numericCrashedValue > 0) {\n            stateUpdates.multiplier = numericCrashedValue;\n            stateUpdates.crashPoint = numericCrashedValue;\n            setLastCrashPoint(numericCrashedValue);\n          }\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        didCrashThisTick = true;\n      } else if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        // Do not reset multiplier while UI is showing crashed state\n        if (gameState !== 'crashed') {\n        stateUpdates.multiplier = 1.00;\n        }\n        \n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            // Avoid changing the countdown while showing crash; we'll refresh on transition\n            if (gameState !== 'crashed') {\n            stateUpdates.timeLeft = newTimeLeft;\n              lastCountdownUpdate.current = Date.now();\n            }\n          }\n        }\n        \n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n          // New round: clear any legacy active bets and mark previous-round active slips as lost\n          setActiveBets([]);\n          setBetSlips(prev => prev.map(slip => (\n            slip.roundId !== gameData.round_number && slip.status === 'active'\n              ? { ...slip, status: 'lost' }\n              : slip\n          )));\n          \n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n          targetMultiplierRef.current = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n        // Client-side safeguard: if live multiplier reaches or exceeds target crash point, show crash immediately\n        const targetCrashPoint = Number(gameData.crash_point);\n        if (!Number.isNaN(targetCrashPoint) && typeof gameData.current_multiplier === 'number') {\n          if (gameData.current_multiplier >= targetCrashPoint) {\n            stateUpdates.gameState = 'crashed';\n            stateUpdates.multiplier = targetCrashPoint;\n            stateUpdates.crashPoint = targetCrashPoint;\n            stateUpdates.isBetPlaced = false;\n            stateUpdates.hasLocalActiveBet = false;\n            setLastCrashPoint(targetCrashPoint);\n            didCrashThisTick = true;\n          }\n        }\n      }\n      \n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n      \n      // If crash just happened, refresh recent history immediately and retry shortly after\n      if (didCrashThisTick) {\n        try {\n          await fetchGameHistory();\n        } catch (e) {\n          console.warn('Failed to refresh game history after crash:', e);\n        }\n        // Retry once after a short delay to ensure backend has persisted the crash\n        setTimeout(() => {\n          fetchGameHistory().catch((err) => console.warn('Retry history refresh after crash failed:', err));\n        }, 800);\n      }\n      \n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n      \n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      \n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      \n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n      \n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n      \n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n        \n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      \n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', response.data?.length);\n      \n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data\n        .map(game => Number(game.crash_point))\n        .filter(point => !isNaN(point) && point > 0);\n      \n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      let response;\n      try {\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      } catch (e) {\n        // Fallback for anonymous/testing\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history-public/?user_id=player_1`);\n      }\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    \n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    \n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1'  // Simple user ID for anonymous betting\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: response.data?.bet?.id || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: response.data?.bet?.id\n      };\n      \n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n      \n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => [{ id: response.data.bet.id, amount: Number(response.data.bet.amount) }, ...prev]);\n      }\n      \n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      const status = error?.response?.status;\n      if (status === 401 || status === 403) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'placeBet', payload: { stake: betAmount } }));\n        window.location.href = '/login';\n        return;\n      }\n      setError(error?.response?.data?.error || error?.message || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n    \n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    \n    setIsCashingOut(true);\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',  // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n      \n      // Update legacy bet state\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      \n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n      \n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n  \n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async (betSlipId) => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    \n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = (enabled) => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    \n    try {\n      // Force refresh all data\n      await Promise.all([\n        fetchBalance(),\n        fetchCurrentGame(),\n        fetchGameHistory(),\n        fetchBetHistory()\n      ]);\n      \n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      \n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wallet actions\n  const [walletAmount, setWalletAmount] = useState('');\n  const handleDeposit = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'deposit', payload: { amount: walletAmount } }));\n      window.location.href = '/login';\n      return;\n    }\n    try {\n      if (!walletAmount) {\n        setError('Enter an amount first');\n        return;\n      }\n      const prevBalance = balance;\n      // Initiate STK Push via M-Pesa integration\n      await axios.get(`${API_BASE_URL}/api/mpesa/stkpush/`, { params: { amount: walletAmount } });\n      setSuccess('STK Push initiated. Enter your M-Pesa PIN to complete the payment. Your balance will update automatically once confirmed.');\n      // Begin short polling for updated balance after confirmation\n      if (depositPollInterval.current) clearInterval(depositPollInterval.current);\n      let polls = 0;\n      depositPollInterval.current = setInterval(async () => {\n        try {\n          await fetchBalance();\n          polls += 1;\n          if (balance > prevBalance || polls >= 40) { // up to ~120s at 3s interval\n            clearInterval(depositPollInterval.current);\n          }\n        } catch (e) {\n          polls += 1;\n          if (polls >= 40) {\n            clearInterval(depositPollInterval.current);\n          }\n        }\n      }, 3000);\n    } catch (e) {\n      console.error('Deposit failed', e);\n      if (e?.response?.status === 401) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'deposit', payload: { amount: walletAmount } }));\n        window.location.href = '/login';\n        return;\n      }\n      setError(e?.response?.data?.error || 'Deposit failed. Please try again.');\n    }\n  };\n  const handleWithdraw = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'withdraw', payload: { amount: walletAmount } }));\n      window.location.href = '/login';\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/withdraw/`, { amount: walletAmount });\n      setBalance(response.data.balance);\n      setSuccess('Your withdrawal request has been received. Please note that due to high withdrawal activity today, processing may take a little longer than usual. Rest assured, your funds will be credited immediately once processing is complete. Thank you for your patience.');\n    } catch (e) {\n      console.error('Withdraw failed', e);\n      if (e?.response?.status === 401) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'withdraw', payload: { amount: walletAmount } }));\n        window.location.href = '/login';\n        return;\n      }\n      setError(e?.response?.data?.error || 'Withdraw failed. Please try again.');\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n    \n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n    \n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n    \n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if countdown is stuck during waiting state\n    if (gameStateRef.current === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state (state:', gameStateRef.current, ')');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if game state is stuck\n    if (gameStateRef.current === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameStateRef.current === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n    \n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    \n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n      \n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n      \n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n    \n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n  \n\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n    \n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n    // Clear legacy active bets list so nothing remains active visually\n    setActiveBets([]);\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => (\n      slip.status === 'active'\n        ? { ...slip, status: 'lost' }\n        : slip\n    )));\n    \n    // Refresh bet history from backend to reflect losses\n    try {\n      await fetchBetHistory();\n    } catch (e) {\n      console.warn('Failed to refresh bet history on crash:', e);\n    }\n    \n    // Optionally prefetch latest state so we have fresh round/crash info ready\n    try {\n      await fetchCurrentGame();\n    } catch (error) {\n      console.error('Error prefetching game after crash:', error);\n    }\n\n    console.log('✅ Crash handling complete - bets marked lost, awaiting next round');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition (show crash then transition)\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n      \n      // Show crash for ~3s, then move to waiting and let backend drive countdown\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state (backend countdown)');\n    setGameState('waiting');\n    setMultiplier(1.00);\n        // Fetch latest state and refresh recent results to include last crash\n        fetchCurrentGame().catch((error) => {\n          console.error('Error fetching game state after crash transition:', error);\n        });\n        fetchGameHistory().catch((error) => {\n          console.warn('Error refreshing game history after crash transition:', error);\n        });\n      }, 3000);\n\n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n      \n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n        \n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n      \n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n        \n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n      \n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        \n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        \n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    \n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        \n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n        \n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n    \n    // Start polling immediately\n    pollForUpdates();\n    \n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      \n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      \n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    \n    setupPolling();\n    \n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n    \n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n    \n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    \n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  // Smooth multiplier animation toward backend target during playing state\n  useEffect(() => {\n    if (gameState !== 'playing') {\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n      lastAnimTimeRef.current = 0;\n      return;\n    }\n\n    let isCancelled = false;\n\n    const animate = (timestamp) => {\n      if (isCancelled || gameStateRef.current !== 'playing') return;\n      if (!lastAnimTimeRef.current) lastAnimTimeRef.current = timestamp;\n      const dtMs = timestamp - lastAnimTimeRef.current;\n      lastAnimTimeRef.current = timestamp;\n\n      const crashCap = Number(crashPoint) > 0 ? Number(crashPoint) : Infinity;\n      const backendTarget = Math.min(targetMultiplierRef.current || 1.0, crashCap);\n\n      // Increase at 0.05 per second to match backend\n      const increment = 0.05 * (dtMs / 1000);\n      const nextVal = Math.min(backendTarget, multiplier + increment);\n\n      if (nextVal !== multiplier) {\n        setMultiplier(nextVal);\n      }\n\n      // If we've reached the crash cap, let the normal crash handling flip state\n      if (nextVal >= crashCap && Number.isFinite(crashCap)) {\n        // no-op here; backend/client safeguard will set crashed\n      }\n\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      isCancelled = true;\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, [gameState, crashPoint, multiplier]);\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  \n  if (isLoading) {\n      const isCrashLoading = gameState === 'loading_after_crash';\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n            <h2>{isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'}</h2>\n            <div className=\"loading-spinner\">{isCrashLoading ? '💥' : '⏳'}</div>\n            <p>{isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Waiting duration used for countdown progress (seconds)\n  const WAIT_DURATION = 10;\n  const countdownPercent = Math.max(0, Math.min(100, Math.round((timeLeft / WAIT_DURATION) * 100)));\n  const cylShouldExplode = gameState === 'crashed';\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"header-info\">\n        <div className=\"balance-display\">\n            Balance: Ksh {balance.toFixed(2)}\n          </div>\n          <div className=\"header-controls\">\n            <div className={`connection-indicator ${connectionStatus}`}>\n              <span className=\"connection-dot\"></span>\n              {connectionStatus === 'connected' ? 'Live' : \n               connectionStatus === 'disconnected' ? 'Reconnecting...' : \n               connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown'}\n            </div>\n            <button \n              onClick={manualRefresh} \n              className=\"refresh-btn\"\n              disabled={isLoading}\n              title=\"Refresh game state\"\n              type=\"button\"\n            >\n              🔄\n            </button>\n          </div>\n          <div className=\"wallet-controls\">\n            <button type=\"button\" onClick={(e) => { e.preventDefault(); handleWithdraw(); }} className=\"wallet-btn outline\" disabled={!walletAmount}>Withdraw</button>\n            <input\n              type=\"number\"\n              min=\"1\"\n              placeholder=\"Enter amount\"\n              value={walletAmount}\n              onChange={(e) => {\n                const v = e.target.value;\n                if (v === '' || Number(v) >= 1) {\n                  setWalletAmount(v);\n                }\n              }}\n              className=\"wallet-input\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n      {success && (\n        <div className=\"success-message\">\n          {success}\n          <button onClick={() => setSuccess(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n\n      {/* debug-info removed per request */}\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\">\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    {/* Cylindrical countdown bar within lane */}\n                    <div className=\"cyl-progress-wrap\" aria-label=\"Round countdown\">\n                      <div className={`cyl-progress ${cylShouldExplode ? 'explode' : ''}`}>\n                        <div className=\"cyl-core\"></div>\n                        <div className=\"cyl-fill\" style={{ width: `${countdownPercent}%` }}></div>\n                        <div className=\"cyl-gloss\"></div>\n                        <div className=\"cyl-ends cyl-left\"></div>\n                        <div className=\"cyl-ends cyl-right\"></div>\n                      </div>\n                      <div className=\"cyl-timer-label\">{timeLeft}s</div>\n                    </div>\n                    <div className={`aviator-plane waiting`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <h2>Next game in {timeLeft}s</h2>\n                  <div className=\"countdown-circle\">\n                    <span className=\"countdown-number\">{timeLeft}</span>\n                  </div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"playing-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane flying`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <div className=\"multiplier-value\">\n                    {multiplier.toFixed(2)}x\n                  </div>\n                  <div className=\"game-status\">Flying!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"crashed-state\"\n              >\n                <div className=\"game-display crashed-anim\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane crashed`}>\n                      💥\n                    </div>\n                  </div>\n                  <h2 className=\"crash-text animated\">CRASHED AT {Number((lastCrashPoint ?? crashPoint) || multiplier).toFixed(2)}x</h2>\n                  <div className=\"crash-burst\" aria-hidden=\"true\">\n                    <span></span><span></span><span></span><span></span><span></span>\n                  </div>\n                  <div className=\"game-status\">Game Over!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                  <div className=\"backend-info\">\n                    <small>Predetermined crash point from backend</small>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Betika-style Betting Panel */}\n        <div className=\"betting-panel\">\n          <div className=\"betting-controls-section\">\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">Ksh {formatMoney(balance)}</div>\n          </div>\n          \n            <div className=\"stake-section\">\n              <div className=\"stake-label\">Stake</div>\n              <div className=\"stake-input-group\">\n            <input\n              type=\"number\"\n              value={betAmount}\n                  min=\"10\"\n              max={balance}\n                  disabled={!(gameState === 'waiting' && timeLeft > 0)}\n                  onChange={(e) => setBetAmount(Math.max(10, parseInt(e.target.value) || 10))}\n                  className=\"stake-input\"\n            />\n                <button onClick={setMaxBet} disabled={!(gameState === 'waiting' && timeLeft > 0)} className=\"max-btn\">MAX</button>\n          </div>\n              <div className=\"stake-limits\">\n                <span>Min: Ksh 10</span>\n                <span>Max: Ksh {formatMoney(balance)}</span>\n          </div>\n              </div>\n            \n              <button \n              type=\"button\"\n              onClick={(e) => { e.preventDefault(); placeBet(); }}\n              disabled={gameState !== 'waiting' || timeLeft <= 0 || betAmount < 10 || betAmount > balance}\n              className={`place-bet-main-btn ${gameState === 'waiting' && timeLeft > 0 ? 'active' : 'disabled'}`}\n            >\n              {gameState === 'waiting' && timeLeft > 0 ? 'Bet' : 'Bet (locked)'}\n              </button>\n\n            <div className=\"auto-bet-section\">\n              <label className=\"auto-bet-label\">\n                <input \n                  type=\"checkbox\" \n                  checked={autoBet} \n                  onChange={(e) => handleAutoBetToggle(e.target.checked)}\n                />\n                Auto-Bet (next round)\n              </label>\n              {!autoBet && (\n                <div className=\"auto-bet-note\">Will NOT auto-place on next round</div>\n              )}\n            </div>\n          </div>\n\n          {/* Bet Slips Section */}\n          <div className=\"bet-slips-section\">\n            <div className=\"bet-slips-header\">\n              <h3>Your Bets</h3>\n              <div className=\"active-count\">Active: {betSlips.filter(slip => slip.status === 'active').length}</div>\n              </div>\n\n            {betSlips.length === 0 ? (\n              <div className=\"no-bets-message\">Place a bet before takeoff to see it here.</div>\n            ) : (\n              <div className=\"bet-slips-list\">\n                {betSlips.map((slip) => (\n                  <div key={slip.id} className={`bet-slip ${slip.status}`}>\n                    <div className=\"bet-slip-info\">\n                      <div className=\"bet-stake\">Stake: <span className=\"stake-amount\">Ksh {formatMoney(slip.stake)}</span></div>\n                      <div className=\"bet-details\">Bet #{String(slip.id).slice(0, 8)} • Round #{slip.roundId}</div>\n                    </div>\n\n                    <div className=\"bet-slip-actions\">\n                      {slip.status === 'active' && (\n                        <>\n                          <div className=\"potential-win\">Potential: Ksh {formatMoney(slip.stake * multiplier)}</div>\n                    <button\n                            type=\"button\"\n                            onClick={() => handleBetSlipCashout(slip.id)}\n                      disabled={gameState !== 'playing' || isCashingOut}\n                            className={`cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`}\n                    >\n                            Cashout @ {multiplier.toFixed(2)}x\n                    </button>\n                        </>\n                      )}\n                      {slip.status === 'cashed' && (\n                        <div className=\"cashed-info\">\n                          <div className=\"cashout-odds\">Cashed @ {slip.cashoutOdds?.toFixed(2)}x</div>\n                          <div className=\"win-amount\">+ Ksh {formatMoney(slip.winAmount)}</div>\n              </div>\n            )}\n                      {slip.status === 'lost' && (\n                        <div className=\"lost-info\">\n                          <div className=\"lost-label\">Lost</div>\n                          <div className=\"lost-amount\">- Ksh {formatMoney(slip.stake)}</div>\n          </div>\n              )}\n            </div>\n                  </div>\n                ))}\n              </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n      {/* Recent Results */}\n      <div className=\"game-history\">\n        <h3>Recent Results</h3>\n        {gameHistory.length === 0 ? (\n          <div className=\"history-empty\">\n            <p>No game history yet</p>\n            <small>Games will appear here after they crash</small>\n          </div>\n        ) : (\n          <div className=\"history-grid\">\n            {gameHistory.map((result, index) => {\n              const numericResult = Number(result) || 1.0;\n              return (\n                <div\n                  key={index}\n                  className={`history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`}\n                >\n                  {numericResult.toFixed(2)}x\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default Aviator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}