{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoo\\\\Desktop\\\\betting\\\\betsite\\\\frontend\\\\src\\\\components\\\\Aviator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\nconst Aviator = () => {\n  _s();\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [phase, setPhase] = useState('waiting');\n  const [phaseEndsAt, setPhaseEndsAt] = useState(null);\n  const [gameStartTime, setGameStartTime] = useState(null);\n  const [lastBackendMultiplier, setLastBackendMultiplier] = useState(1.00);\n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const countdownInterval = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setBalance(1000);\n    }\n  };\n  const fetchCurrentGame = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n\n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n\n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n\n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n\n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n\n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        stateUpdates.phase = 'waiting';\n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            // Set phase end time for countdown\n            stateUpdates.phaseEndsAt = Date.now() + newTimeLeft * 1000;\n          }\n        }\n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        console.log('🚀 Transitioning to playing state');\n        console.log('Backend multiplier:', gameData.current_multiplier);\n        stateUpdates.gameState = 'playing';\n        stateUpdates.phase = 'playing';\n        stateUpdates.gameStartTime = Date.now(); // Set game start time for simulation\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n          stateUpdates.lastBackendMultiplier = gameData.current_multiplier;\n          console.log('🎯 Setting initial multiplier:', gameData.current_multiplier);\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          stateUpdates.timeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          // Set phase end time for countdown\n          stateUpdates.phaseEndsAt = Date.now() + stateUpdates.timeLeft * 1000;\n        }\n      } else if (gameData.game_crashed && gameState !== 'crashed') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting loading to true immediately after crash');\n        // When backend indicates crash, immediately set loading to true and show loading state\n        stateUpdates.isLoading = true;\n        stateUpdates.gameState = 'loading_after_crash';\n        stateUpdates.phase = 'loading_after_crash';\n        stateUpdates.multiplier = 1.00;\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n\n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          stateUpdates.timeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n        } else {\n          stateUpdates.timeLeft = 10; // Default countdown\n        }\n      }\n\n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          case 'phase':\n            setPhase(value);\n            break;\n          case 'phaseEndsAt':\n            setPhaseEndsAt(value);\n            break;\n          case 'gameStartTime':\n            setGameStartTime(value);\n            break;\n          case 'lastBackendMultiplier':\n            setLastBackendMultiplier(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n\n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n\n      // Sync with backend multiplier during active gameplay (but don't override simulation)\n      if (gameState === 'playing' || effectivePhase === 'playing') {\n        console.log('🎮 In playing state - syncing with backend');\n        console.log('Current multiplier:', multiplier, 'Backend multiplier:', gameData.current_multiplier);\n        console.log('Game state:', gameState, 'Effective phase:', effectivePhase);\n\n        // Sync with backend occasionally to ensure accuracy\n        if (typeof gameData.current_multiplier === 'number') {\n          const now = Date.now();\n          // Less frequent sync to avoid interfering with simulation\n          if (now - lastUpdateTime.current > 1000) {\n            // Sync every 1 second\n            const backendMultiplier = gameData.current_multiplier;\n            const simulatedMultiplier = gameStartTime ? 1.00 + (now - gameStartTime) / 1000 * 0.05 : 1.00;\n\n            // If backend and simulation are too far apart, sync\n            if (Math.abs(backendMultiplier - simulatedMultiplier) > 0.1) {\n              console.log('🔄 Syncing with backend multiplier:', backendMultiplier);\n              setGameStartTime(now - (backendMultiplier - 1.00) / 0.05 * 1000);\n              setLastBackendMultiplier(backendMultiplier);\n            } else {\n              console.log('✅ Simulation in sync with backend');\n            }\n            lastUpdateTime.current = now;\n          }\n        } else {\n          console.log('❌ No valid multiplier from backend:', gameData.current_multiplier);\n        }\n      }\n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      return null;\n    }\n  };\n  const fetchGameHistory = async () => {\n    try {\n      var _response$data;\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n\n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data.map(game => Number(game.crash_point)).filter(point => !isNaN(point) && point > 0);\n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - only allowed during waiting phase\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed during waiting phase');\n      return;\n    }\n    if (isBetPlaced) {\n      setError('You already have an active bet in this round');\n      return;\n    }\n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    try {\n      var _response$data2, _response$data2$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1' // Simple user ID for anonymous betting\n      });\n      setBalance(response.data.balance);\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      setError(null);\n      if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && (_response$data2$bet = _response$data2.bet) !== null && _response$data2$bet !== void 0 && _response$data2$bet.id) {\n        setActiveBets(prev => [{\n          id: response.data.bet.id,\n          amount: Number(response.data.bet.amount)\n        }, ...prev]);\n      } else {\n        // Fallback: refresh slips from backend\n        try {\n          var _r$data;\n          const r = await axios.get(`${API_BASE_URL}/api/aviator/active-bets/?user_id=player_1&round_number=${roundNumber}`);\n          const list = (((_r$data = r.data) === null || _r$data === void 0 ? void 0 : _r$data.bets) || []).map(b => ({\n            id: b.id,\n            amount: Number(b.amount)\n          }));\n          setActiveBets(list);\n        } catch (_) {}\n      }\n\n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - only allowed when bet is placed and game is active\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n\n    // Validate cashout conditions\n    if (!isBetPlaced && activeBets.length === 0) {\n      setError('No active bet to cashout');\n      return;\n    }\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    setIsCashingOut(true);\n    try {\n      var _response$data3, _response$data3$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',\n        // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      setBalance(response.data.balance);\n      if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && (_response$data3$bet = _response$data3.bet) !== null && _response$data3$bet !== void 0 && _response$data3$bet.id) {\n        setActiveBets(prev => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      setError(null);\n\n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n\n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n  const addChip = amount => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n\n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n\n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n\n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n\n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n          setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n\n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n\n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        setPhase('waiting'); // Set phase to waiting\n        console.log('Loading set to false, game state set to waiting, phase set to waiting');\n\n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n\n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n    console.log('🎮 Game state changed to:', gameState);\n    if (gameState === 'playing') {\n      console.log('🚀 Game is now playing - multiplier should start updating');\n    }\n  }, [gameState]);\n\n  // Countdown effect - automatically updates timeLeft based on phaseEndsAt\n  useEffect(() => {\n    if (phaseEndsAt && (gameState === 'waiting' || gameState === 'playing')) {\n      const updateCountdown = () => {\n        const now = Date.now();\n        const timeRemaining = Math.max(0, Math.ceil((phaseEndsAt - now) / 1000));\n        if (timeRemaining !== timeLeft) {\n          setTimeLeft(timeRemaining);\n        }\n\n        // If countdown reaches 0 and we're in waiting phase, trigger game start\n        if (timeRemaining === 0 && gameState === 'waiting') {\n          console.log('⏰ Countdown reached 0, triggering game start');\n          // Force a fetch to get the latest game state from backend\n          fetchCurrentGame().then(gameData => {\n            if (gameData) {\n              console.log('📊 Fetched game data after countdown:', gameData);\n              if (gameData.status === 'active' || gameData.phase === 'playing') {\n                console.log('🎮 Game should now be playing, multiplier:', gameData.current_multiplier);\n              }\n            }\n          }).catch(error => {\n            console.error('Error fetching game state after countdown:', error);\n          });\n        }\n      };\n\n      // Update immediately\n      updateCountdown();\n\n      // Set up interval for updates\n      countdownInterval.current = setInterval(updateCountdown, 100);\n      return () => {\n        if (countdownInterval.current) {\n          clearInterval(countdownInterval.current);\n        }\n      };\n    }\n  }, [phaseEndsAt, gameState, timeLeft]);\n\n  // Smooth multiplier simulation - increments every 100ms during gameplay\n  useEffect(() => {\n    if (gameState === 'playing' && gameStartTime) {\n      const simulateMultiplier = () => {\n        const now = Date.now();\n        const elapsed = (now - gameStartTime) / 1000; // elapsed time in seconds\n        const simulatedMultiplier = 1.00 + elapsed * 0.05; // 0.05 per second\n\n        // Only update if the simulated multiplier is different from current\n        if (Math.abs(simulatedMultiplier - multiplier) > 0.001) {\n          console.log('🎯 Simulating multiplier:', simulatedMultiplier.toFixed(2));\n          setMultiplier(simulatedMultiplier);\n        }\n      };\n\n      // Update immediately\n      simulateMultiplier();\n\n      // Set up interval for smooth updates (every 100ms for smooth animation)\n      const multiplierSimInterval = setInterval(simulateMultiplier, 100);\n      return () => {\n        clearInterval(multiplierSimInterval);\n      };\n    }\n  }, [gameState, gameStartTime, multiplier]);\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (countdownInterval.current) clearInterval(countdownInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n\n        // Simple API calls without minimum loading time\n        await Promise.all([fetchBalance(), fetchCurrentGame().catch(() => undefined), fetchGameHistory(), fetchBetHistory()]);\n\n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    initializeComponent();\n\n    // Fallback: ensure loading is set to false after 5 seconds\n    const fallbackTimer = setTimeout(() => {\n      console.warn('Fallback: Setting loading to false after 5 seconds');\n      setIsLoading(false);\n    }, 5000);\n    return () => {\n      clearTimeout(fallbackTimer);\n    };\n\n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    // Poll every 500ms for optimal performance and real-time updates\n    gameCheckInterval.current = setInterval(() => {\n      // Don't poll during crash loading state to avoid interference\n      if (gameStateRef.current === 'loading_after_crash') {\n        debugLog('Skipping poll during crash loading state...');\n        return;\n      }\n\n      // Poll to get latest real-time state from backend (including countdown)\n      debugLog('Polling backend for updates...');\n      fetchCurrentGame().catch(error => {\n        console.error('Polling error:', error);\n      });\n    }, 500);\n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n\n  // Debug loading state changes\n  useEffect(() => {\n    debugLog('Loading state changed to:', isLoading);\n  }, [isLoading]);\n\n  // Debug multiplier changes\n  useEffect(() => {\n    debugLog('Multiplier changed to:', multiplier);\n  }, [multiplier]);\n\n  // Fallback multiplier simulation if backend is not responding\n  useEffect(() => {\n    if (gameState === 'playing' && multiplier === 1.00) {\n      console.log('⚠️ Game is playing but multiplier is still 1.00 - checking for backend response');\n\n      // Set a timeout to check if backend responds\n      const fallbackTimeout = setTimeout(() => {\n        if (multiplier === 1.00) {\n          console.log('🚨 Backend not responding with multiplier updates - using fallback');\n          // Force a fresh fetch\n          fetchCurrentGame().catch(error => {\n            console.error('Fallback fetch failed:', error);\n          });\n        }\n      }, 2000); // Wait 2 seconds for backend response\n\n      return () => clearTimeout(fallbackTimeout);\n    }\n  }, [gameState, multiplier]);\n\n  // Error boundary for rendering\n  try {\n    if (isLoading) {\n      const isCrashLoading = gameState === 'loading_after_crash';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aviator-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-state\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-spinner\",\n            children: isCrashLoading ? '💥' : '⏳'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 742,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 9\n      }, this);\n    }\n  } catch (error) {\n    console.error('Error in loading state render:', error);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Error Loading Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: \"\\u274C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Something went wrong. Please refresh the page.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 750,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aviator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Aviator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-display\",\n        children: [\"Balance: $\", balance.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 770,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"API Base: \", API_BASE_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game State: \", gameState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 778,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Phase: \", phase]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 779,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Round: #\", roundNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Multiplier: \", multiplier.toFixed(2), \"x\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Time Left: \", timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Loading: \", isLoading.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Phase Ends At: \", phaseEndsAt ? new Date(phaseEndsAt).toLocaleTimeString() : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 784,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game History Count: \", gameHistory.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Bet History Count: \", betHistory.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Current Game: Round #\", roundNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 776,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiplier-display\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: [gameState === 'waiting' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"waiting-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane waiting`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"countdown-circle\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"countdown-number\",\n                  children: timeLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Next game in \", timeLeft, \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 810,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 811,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 801,\n              columnNumber: 17\n            }, this)\n          }, \"waiting\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"playing-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane flying`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 826,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"multiplier-value\",\n                children: [multiplier.toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 830,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Flying!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 833,\n                columnNumber: 19\n              }, this), Number(crashPoint) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crash-point\",\n                children: [\"Target: \", (Number(crashPoint) || 1.0).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 835,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 839,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 17\n            }, this)\n          }, \"playing\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 15\n          }, this), gameState === 'crashed' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"crashed-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane crashed`,\n                  children: \"\\uD83D\\uDCA5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 854,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 853,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"crash-text\",\n                children: [\"CRASHED AT \", (Number(crashPoint) || 1.0).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Game Over!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 860,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"backend-info\",\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Predetermined crash point from backend\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 862,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 861,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 852,\n              columnNumber: 17\n            }, this)\n          }, \"crashed\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 845,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"betting-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-amount-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: halfBet,\n            className: \"bet-btn\",\n            children: \"\\xBD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetBet,\n            className: \"bet-btn\",\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: doubleBet,\n            className: \"bet-btn\",\n            children: \"2\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 874,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-input\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: betAmount,\n            onChange: e => setBetAmount(Math.max(1, parseInt(e.target.value) || 1)),\n            min: \"1\",\n            max: balance,\n            className: \"bet-amount-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 877,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quick-chips\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(1),\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(5),\n            children: \"+5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(10),\n            children: \"+10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(50),\n            children: \"+50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(100),\n            children: \"+100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip outline\",\n            onClick: setMaxBet,\n            children: \"Max\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip outline\",\n            onClick: clearBet,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 888,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [!hasLocalActiveBet && gameState === 'waiting' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: placeBet,\n            className: \"place-bet-btn\",\n            children: [\"Place Bet $\", betAmount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 15\n          }, this), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '10px',\n              color: '#666',\n              marginTop: '5px'\n            },\n            children: [\"Debug: hasLocalActiveBet=\", hasLocalActiveBet.toString(), \", gameState=\", gameState, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 910,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                console.log('🧪 Manual crash test triggered');\n                console.log('🔄 Setting loading to true for test');\n                setIsLoading(true);\n                setGameState('loading_after_crash');\n              },\n              style: {\n                fontSize: '8px',\n                padding: '2px 4px',\n                marginTop: '2px'\n              },\n              children: \"Test Crash Loading\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 911,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 15\n          }, this), hasLocalActiveBet && gameState !== 'crashed' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: cashout,\n            className: \"cashout-btn\",\n            disabled: gameState !== 'playing' || isCashingOut,\n            style: {\n              pointerEvents: 'auto'\n            },\n            children: gameState !== 'playing' ? 'Cashout (waiting for takeoff)' : isCashingOut ? 'Cashing Out...' : `Cashout $${(betAmount * multiplier).toFixed(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 927,\n            columnNumber: 15\n          }, this), !hasLocalActiveBet && gameState !== 'waiting' && /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: true,\n            className: \"disabled-btn\",\n            children: gameState === 'playing' ? 'Game in progress' : 'Waiting for next round'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 943,\n            columnNumber: 15\n          }, this), hasLocalActiveBet && gameState === 'waiting' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-locked-state\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"locked-badge\",\n              children: [\"Bet locked for Round #\", roundNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 951,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: \"Waiting for game to start...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 952,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 15\n          }, this), activeBets.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips\",\n            children: activeBets.map(b => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"bet-slip-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Stake: $\", Number(b.amount).toFixed(2)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 961,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cashout-btn\",\n                disabled: gameState !== 'playing' || isCashingOut,\n                onClick: () => cashout(b.id),\n                children: gameState !== 'playing' ? 'Cashout (locked)' : `Cashout $${(Number(b.amount) * multiplier).toFixed(2)}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 962,\n                columnNumber: 21\n              }, this)]\n            }, b.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 960,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 958,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 898,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-line\",\n            children: hasLocalActiveBet ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Current value: $\", (betAmount * multiplier).toFixed(2), \" at \", multiplier.toFixed(2), \"x\"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Potential at 2.00x: $\", (betAmount * 2.00).toFixed(2)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 976,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-status ${hasLocalActiveBet ? 'active' : 'idle'}`,\n            children: hasLocalActiveBet ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Active in Round #\", roundNumber, \" - $\", betAmount, \" locked\"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"No active bet - Place bet during waiting phase\"\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 983,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 975,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recent Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 9\n      }, this), gameHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-empty\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No game history yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 999,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Games will appear here after they crash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1000,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-grid\",\n        children: gameHistory.map((result, index) => {\n          const numericResult = Number(result) || 1.0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`,\n            children: [numericResult.toFixed(2), \"x\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1007,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 995,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bet-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Bet History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-history-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1023,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1024,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Outcome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1025,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Payout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Profit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1022,\n          columnNumber: 11\n        }, this), betHistory.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-empty\",\n          children: \"No bets yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 13\n        }, this), betHistory.map((b, i) => {\n          var _b$game;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"#\", b.round || ((_b$game = b.game) === null || _b$game === void 0 ? void 0 : _b$game.round_number)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1034,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.amount).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1035,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.payout).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1037,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"profit\",\n              children: `${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1033,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Place your bet during the waiting phase (before takeoff)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1047,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Once bet is placed, your stake is locked for that round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1048,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Watch the multiplier increase in real-time during flight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click \\\"Cashout\\\" before the plane crashes to win!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"If the plane crashes before you cashout, you lose your bet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"After each round, you must place a new bet manually\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1046,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Real-time Multiplier:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1055,\n          columnNumber: 11\n        }, this), \" Increases by 0.05x every second during active gameplay\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 761,\n    columnNumber: 5\n  }, this);\n};\n_s(Aviator, \"9xpjbHhE8xCn2TWxRQRGLtuSi9w=\");\n_c = Aviator;\nexport default Aviator;\nvar _c;\n$RefreshReg$(_c, \"Aviator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","AnimatePresence","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","debugLog","args","NODE_ENV","console","log","Aviator","_s","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","roundNumber","setRoundNumber","betHistory","setBetHistory","currentGame","setCurrentGame","error","setError","isLoading","setIsLoading","isCashingOut","setIsCashingOut","hasLocalActiveBet","setHasLocalActiveBet","activeBets","setActiveBets","phase","setPhase","phaseEndsAt","setPhaseEndsAt","gameStartTime","setGameStartTime","lastBackendMultiplier","setLastBackendMultiplier","gameInterval","gameCheckInterval","gameTimeout","countdownInterval","isRunningRef","lastUpdateTime","isBetPlacedRef","hasLocalActiveBetRef","gameStateRef","fetchBalance","response","get","data","_error$response","fetchCurrentGame","gameData","backendStatus","status","effectivePhase","time_remaining","round_number","current_multiplier","isNewRound","Number","crash_point","stateUpdates","newTimeLeft","Math","max","ceil","Date","now","game_crashed","Object","entries","forEach","key","value","checkActiveBet","current","backendMultiplier","simulatedMultiplier","abs","fetchGameHistory","_response$data","length","crashPoints","map","game","filter","point","isNaN","_error$response2","fetchBetHistory","_error$response3","hasActiveBet","has_active_bet","placeBet","_response$data2","_response$data2$bet","post","amount","user_id","bet","id","prev","_r$data","r","list","bets","b","_","_error$response4","_error$response4$data","cashout","specificBetId","_response$data3","_response$data3$bet","bet_id","remaining","slice","_error$response5","_error$response5$data","doubleBet","halfBet","floor","resetBet","addChip","next","min","setMaxBet","clearBet","handleGameCrash","transitionTimeout","setTimeout","catch","clearTimeout","immediateCheck","updateCountdown","timeRemaining","then","setInterval","clearInterval","simulateMultiplier","elapsed","toFixed","multiplierSimInterval","initializeComponent","Promise","all","undefined","fallbackTimer","warn","fallbackTimeout","isCrashLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toString","toLocaleTimeString","mode","div","initial","opacity","scale","animate","exit","type","onChange","e","parseInt","target","style","fontSize","color","marginTop","padding","disabled","pointerEvents","result","index","numericResult","i","_b$game","round","cashout_multiplier","cashoutMultiplier","payout","profit","_c","$RefreshReg$"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\nconst Aviator = () => {\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [phase, setPhase] = useState('waiting');\n  const [phaseEndsAt, setPhaseEndsAt] = useState(null);\n  const [gameStartTime, setGameStartTime] = useState(null);\n  const [lastBackendMultiplier, setLastBackendMultiplier] = useState(1.00);\n  \n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const countdownInterval = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      setBalance(1000);\n    }\n  };\n\n  const fetchCurrentGame = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      \n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n      \n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n      \n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      \n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n      \n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n      \n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        stateUpdates.phase = 'waiting';\n        \n          if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            // Set phase end time for countdown\n            stateUpdates.phaseEndsAt = Date.now() + (newTimeLeft * 1000);\n          }\n          }\n          \n          if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        console.log('🚀 Transitioning to playing state');\n        console.log('Backend multiplier:', gameData.current_multiplier);\n        stateUpdates.gameState = 'playing';\n        stateUpdates.phase = 'playing';\n        stateUpdates.gameStartTime = Date.now(); // Set game start time for simulation\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n          stateUpdates.lastBackendMultiplier = gameData.current_multiplier;\n          console.log('🎯 Setting initial multiplier:', gameData.current_multiplier);\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          stateUpdates.timeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          // Set phase end time for countdown\n          stateUpdates.phaseEndsAt = Date.now() + (stateUpdates.timeLeft * 1000);\n        }\n      } else if (gameData.game_crashed && gameState !== 'crashed') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting loading to true immediately after crash');\n        // When backend indicates crash, immediately set loading to true and show loading state\n        stateUpdates.isLoading = true;\n        stateUpdates.gameState = 'loading_after_crash';\n        stateUpdates.phase = 'loading_after_crash';\n        stateUpdates.multiplier = 1.00;\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        \n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          stateUpdates.timeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n        } else {\n          stateUpdates.timeLeft = 10; // Default countdown\n        }\n      }\n      \n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          case 'phase':\n            setPhase(value);\n            break;\n          case 'phaseEndsAt':\n            setPhaseEndsAt(value);\n            break;\n          case 'gameStartTime':\n            setGameStartTime(value);\n            break;\n          case 'lastBackendMultiplier':\n            setLastBackendMultiplier(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n      \n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n      \n      // Sync with backend multiplier during active gameplay (but don't override simulation)\n      if (gameState === 'playing' || effectivePhase === 'playing') {\n        console.log('🎮 In playing state - syncing with backend');\n        console.log('Current multiplier:', multiplier, 'Backend multiplier:', gameData.current_multiplier);\n        console.log('Game state:', gameState, 'Effective phase:', effectivePhase);\n        \n        // Sync with backend occasionally to ensure accuracy\n        if (typeof gameData.current_multiplier === 'number') {\n          const now = Date.now();\n          // Less frequent sync to avoid interfering with simulation\n          if (now - lastUpdateTime.current > 1000) { // Sync every 1 second\n            const backendMultiplier = gameData.current_multiplier;\n            const simulatedMultiplier = gameStartTime ? 1.00 + ((now - gameStartTime) / 1000) * 0.05 : 1.00;\n            \n            // If backend and simulation are too far apart, sync\n            if (Math.abs(backendMultiplier - simulatedMultiplier) > 0.1) {\n              console.log('🔄 Syncing with backend multiplier:', backendMultiplier);\n              setGameStartTime(now - ((backendMultiplier - 1.00) / 0.05) * 1000);\n              setLastBackendMultiplier(backendMultiplier);\n            } else {\n              console.log('✅ Simulation in sync with backend');\n            }\n            lastUpdateTime.current = now;\n          }\n        } else {\n          console.log('❌ No valid multiplier from backend:', gameData.current_multiplier);\n        }\n      }\n      \n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', response.data?.length);\n      \n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data\n        .map(game => Number(game.crash_point))\n        .filter(point => !isNaN(point) && point > 0);\n      \n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    \n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - only allowed during waiting phase\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed during waiting phase');\n      return;\n    }\n    \n    if (isBetPlaced) {\n      setError('You already have an active bet in this round');\n      return;\n    }\n    \n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1'  // Simple user ID for anonymous betting\n      });\n      \n      setBalance(response.data.balance);\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      setError(null);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => [{ id: response.data.bet.id, amount: Number(response.data.bet.amount) }, ...prev]);\n      }\n      else {\n        // Fallback: refresh slips from backend\n        try {\n          const r = await axios.get(`${API_BASE_URL}/api/aviator/active-bets/?user_id=player_1&round_number=${roundNumber}`);\n          const list = (r.data?.bets || []).map(b => ({ id: b.id, amount: Number(b.amount) }));\n          setActiveBets(list);\n        } catch (_) {}\n      }\n      \n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - only allowed when bet is placed and game is active\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n    \n    // Validate cashout conditions\n    if (!isBetPlaced && activeBets.length === 0) {\n      setError('No active bet to cashout');\n      return;\n    }\n    \n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    \n    setIsCashingOut(true);\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',  // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      \n      setBalance(response.data.balance);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      setError(null);\n      \n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n      \n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n  \n  \n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n    \n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n    \n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n    \n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      \n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n        \n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n        setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n    \n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n      \n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        setPhase('waiting'); // Set phase to waiting\n        console.log('Loading set to false, game state set to waiting, phase set to waiting');\n        \n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n      \n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n    console.log('🎮 Game state changed to:', gameState);\n    if (gameState === 'playing') {\n      console.log('🚀 Game is now playing - multiplier should start updating');\n    }\n  }, [gameState]);\n\n  // Countdown effect - automatically updates timeLeft based on phaseEndsAt\n  useEffect(() => {\n    if (phaseEndsAt && (gameState === 'waiting' || gameState === 'playing')) {\n      const updateCountdown = () => {\n        const now = Date.now();\n        const timeRemaining = Math.max(0, Math.ceil((phaseEndsAt - now) / 1000));\n        \n        if (timeRemaining !== timeLeft) {\n          setTimeLeft(timeRemaining);\n        }\n        \n        // If countdown reaches 0 and we're in waiting phase, trigger game start\n        if (timeRemaining === 0 && gameState === 'waiting') {\n          console.log('⏰ Countdown reached 0, triggering game start');\n          // Force a fetch to get the latest game state from backend\n          fetchCurrentGame().then((gameData) => {\n            if (gameData) {\n              console.log('📊 Fetched game data after countdown:', gameData);\n              if (gameData.status === 'active' || gameData.phase === 'playing') {\n                console.log('🎮 Game should now be playing, multiplier:', gameData.current_multiplier);\n              }\n            }\n          }).catch((error) => {\n            console.error('Error fetching game state after countdown:', error);\n          });\n        }\n      };\n      \n      // Update immediately\n      updateCountdown();\n      \n      // Set up interval for updates\n      countdownInterval.current = setInterval(updateCountdown, 100);\n      \n      return () => {\n        if (countdownInterval.current) {\n          clearInterval(countdownInterval.current);\n        }\n      };\n    }\n  }, [phaseEndsAt, gameState, timeLeft]);\n\n  // Smooth multiplier simulation - increments every 100ms during gameplay\n  useEffect(() => {\n    if (gameState === 'playing' && gameStartTime) {\n      const simulateMultiplier = () => {\n        const now = Date.now();\n        const elapsed = (now - gameStartTime) / 1000; // elapsed time in seconds\n        const simulatedMultiplier = 1.00 + (elapsed * 0.05); // 0.05 per second\n        \n        // Only update if the simulated multiplier is different from current\n        if (Math.abs(simulatedMultiplier - multiplier) > 0.001) {\n          console.log('🎯 Simulating multiplier:', simulatedMultiplier.toFixed(2));\n          setMultiplier(simulatedMultiplier);\n        }\n      };\n      \n      // Update immediately\n      simulateMultiplier();\n      \n      // Set up interval for smooth updates (every 100ms for smooth animation)\n      const multiplierSimInterval = setInterval(simulateMultiplier, 100);\n      \n      return () => {\n        clearInterval(multiplierSimInterval);\n      };\n    }\n  }, [gameState, gameStartTime, multiplier]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (countdownInterval.current) clearInterval(countdownInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        \n        // Simple API calls without minimum loading time\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        \n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        \n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Fallback: ensure loading is set to false after 5 seconds\n    const fallbackTimer = setTimeout(() => {\n      console.warn('Fallback: Setting loading to false after 5 seconds');\n      setIsLoading(false);\n    }, 5000);\n    \n    return () => {\n      clearTimeout(fallbackTimer);\n    };\n    \n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    // Poll every 500ms for optimal performance and real-time updates\n    gameCheckInterval.current = setInterval(() => {\n      // Don't poll during crash loading state to avoid interference\n      if (gameStateRef.current === 'loading_after_crash') {\n        debugLog('Skipping poll during crash loading state...');\n        return;\n      }\n      \n      // Poll to get latest real-time state from backend (including countdown)\n      debugLog('Polling backend for updates...');\n      fetchCurrentGame().catch((error) => {\n        console.error('Polling error:', error);\n      });\n    }, 500);\n    \n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  \n  // Debug loading state changes\n  useEffect(() => {\n    debugLog('Loading state changed to:', isLoading);\n  }, [isLoading]);\n\n  // Debug multiplier changes\n  useEffect(() => {\n    debugLog('Multiplier changed to:', multiplier);\n  }, [multiplier]);\n\n  // Fallback multiplier simulation if backend is not responding\n  useEffect(() => {\n    if (gameState === 'playing' && multiplier === 1.00) {\n      console.log('⚠️ Game is playing but multiplier is still 1.00 - checking for backend response');\n      \n      // Set a timeout to check if backend responds\n      const fallbackTimeout = setTimeout(() => {\n        if (multiplier === 1.00) {\n          console.log('🚨 Backend not responding with multiplier updates - using fallback');\n          // Force a fresh fetch\n          fetchCurrentGame().catch((error) => {\n            console.error('Fallback fetch failed:', error);\n          });\n        }\n      }, 2000); // Wait 2 seconds for backend response\n      \n      return () => clearTimeout(fallbackTimeout);\n    }\n  }, [gameState, multiplier]);\n\n  // Error boundary for rendering\n  try {\n    if (isLoading) {\n      const isCrashLoading = gameState === 'loading_after_crash';\n      return (\n        <div className=\"aviator-container\">\n          <div className=\"loading-state\">\n            <h2>{isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'}</h2>\n            <div className=\"loading-spinner\">{isCrashLoading ? '💥' : '⏳'}</div>\n            <p>{isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'}</p>\n          </div>\n        </div>\n      );\n    }\n  } catch (error) {\n    console.error('Error in loading state render:', error);\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n          <h2>Error Loading Game</h2>\n          <div className=\"loading-spinner\">❌</div>\n          <p>Something went wrong. Please refresh the page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"balance-display\">\n          Balance: ${balance.toFixed(2)}\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n      <div className=\"debug-info\">\n        <small>API Base: {API_BASE_URL}</small>\n        <small>Game State: {gameState}</small>\n        <small>Phase: {phase}</small>\n        <small>Round: #{roundNumber}</small>\n        <small>Multiplier: {multiplier.toFixed(2)}x</small>\n        <small>Time Left: {timeLeft}s</small>\n        <small>Loading: {isLoading.toString()}</small>\n        <small>Phase Ends At: {phaseEndsAt ? new Date(phaseEndsAt).toLocaleTimeString() : 'None'}</small>\n        <small>Game History Count: {gameHistory.length}</small>\n        <small>Bet History Count: {betHistory.length}</small>\n        <small>Current Game: Round #{roundNumber}</small>\n      </div>\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\">\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane waiting`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <div className=\"countdown-circle\">\n                    <span className=\"countdown-number\">{timeLeft}</span>\n                  </div>\n                  <h2>Next game in {timeLeft}s</h2>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"playing-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane flying`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <div className=\"multiplier-value\">\n                    {multiplier.toFixed(2)}x\n                  </div>\n                  <div className=\"game-status\">Flying!</div>\n                  {Number(crashPoint) > 0 && (\n                    <div className=\"crash-point\">\n                      Target: {(Number(crashPoint) || 1.0).toFixed(2)}x\n                    </div>\n                  )}\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"crashed-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane crashed`}>\n                      💥\n                    </div>\n                  </div>\n                  <h2 className=\"crash-text\">CRASHED AT {(Number(crashPoint) || 1.0).toFixed(2)}x</h2>\n                  <div className=\"game-status\">Game Over!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                  <div className=\"backend-info\">\n                    <small>Predetermined crash point from backend</small>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <div className=\"betting-controls\">\n          <div className=\"bet-amount-controls\">\n            <button onClick={halfBet} className=\"bet-btn\">½</button>\n            <button onClick={resetBet} className=\"bet-btn\">Reset</button>\n            <button onClick={doubleBet} className=\"bet-btn\">2×</button>\n          </div>\n          \n          <div className=\"bet-input\">\n            <input\n              type=\"number\"\n              value={betAmount}\n              onChange={(e) => setBetAmount(Math.max(1, parseInt(e.target.value) || 1))}\n              min=\"1\"\n              max={balance}\n              className=\"bet-amount-input\"\n            />\n          </div>\n\n          <div className=\"quick-chips\">\n            <button className=\"chip\" onClick={() => addChip(1)}>+1</button>\n            <button className=\"chip\" onClick={() => addChip(5)}>+5</button>\n            <button className=\"chip\" onClick={() => addChip(10)}>+10</button>\n            <button className=\"chip\" onClick={() => addChip(50)}>+50</button>\n            <button className=\"chip\" onClick={() => addChip(100)}>+100</button>\n            <button className=\"chip outline\" onClick={setMaxBet}>Max</button>\n            <button className=\"chip outline\" onClick={clearBet}>Clear</button>\n          </div>\n          \n          <div className=\"action-buttons\">\n            {/* Bet button - only shown during waiting phase when no bet is placed */}\n            {!hasLocalActiveBet && gameState === 'waiting' && (\n              <button onClick={placeBet} className=\"place-bet-btn\">\n                Place Bet ${betAmount}\n              </button>\n            )}\n            \n            {/* Debug info for bet button state */}\n            {process.env.NODE_ENV === 'development' && (\n              <div style={{fontSize: '10px', color: '#666', marginTop: '5px'}}>\n                Debug: hasLocalActiveBet={hasLocalActiveBet.toString()}, gameState={gameState}\n                <br/>\n                <button \n                  onClick={() => {\n                    console.log('🧪 Manual crash test triggered');\n                    console.log('🔄 Setting loading to true for test');\n                    setIsLoading(true);\n                    setGameState('loading_after_crash');\n                  }}\n                  style={{fontSize: '8px', padding: '2px 4px', marginTop: '2px'}}\n                >\n                  Test Crash Loading\n                </button>\n              </div>\n            )}\n            \n            {/* Cashout button - persists from bet placement until crash/cashout */}\n            {hasLocalActiveBet && gameState !== 'crashed' && (\n              <button \n                onClick={cashout} \n                className=\"cashout-btn\"\n                disabled={gameState !== 'playing' || isCashingOut}\n                style={{ pointerEvents: 'auto' }}\n              >\n                {gameState !== 'playing'\n                  ? 'Cashout (waiting for takeoff)'\n                  : isCashingOut\n                    ? 'Cashing Out...'\n                    : `Cashout $${(betAmount * multiplier).toFixed(2)}`}\n              </button>\n            )}\n\n            {/* Disabled state - when no bet is placed and game is not in waiting phase */}\n            {!hasLocalActiveBet && gameState !== 'waiting' && (\n              <button disabled className=\"disabled-btn\">\n                {gameState === 'playing' ? 'Game in progress' : 'Waiting for next round'}\n              </button>\n            )}\n\n            {/* Bet placed - show locked info while waiting */}\n            {hasLocalActiveBet && gameState === 'waiting' && (\n              <div className=\"bet-locked-state\">\n                <span className=\"locked-badge\">Bet locked for Round #{roundNumber}</span>\n                <small>Waiting for game to start...</small>\n              </div>\n            )}\n\n            {/* Show slips for multiple bets this round */}\n            {activeBets.length > 0 && (\n              <div className=\"bet-slips\">\n                {activeBets.map((b) => (\n                  <div key={b.id} className=\"bet-slip-row\">\n                    <span>Stake: ${Number(b.amount).toFixed(2)}</span>\n                    <button\n                      className=\"cashout-btn\"\n                      disabled={gameState !== 'playing' || isCashingOut}\n                      onClick={() => cashout(b.id)}\n                    >\n                      {gameState !== 'playing' ? 'Cashout (locked)' : `Cashout $${(Number(b.amount) * multiplier).toFixed(2)}`}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          <div className=\"bet-summary\">\n            <div className=\"summary-line\">\n              {hasLocalActiveBet ? (\n                <>Current value: ${(betAmount * multiplier).toFixed(2)} at {multiplier.toFixed(2)}x</>\n              ) : (\n                <>Potential at 2.00x: ${(betAmount * 2.00).toFixed(2)}</>\n              )}\n            </div>\n            <div className={`bet-status ${hasLocalActiveBet ? 'active' : 'idle'}`}>\n              {hasLocalActiveBet ? (\n                <>Active in Round #{roundNumber} - ${betAmount} locked</>\n              ) : (\n                <>No active bet - Place bet during waiting phase</>\n              )}\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n      <div className=\"game-history\">\n        <h3>Recent Results</h3>\n        {gameHistory.length === 0 ? (\n          <div className=\"history-empty\">\n            <p>No game history yet</p>\n            <small>Games will appear here after they crash</small>\n          </div>\n        ) : (\n          <div className=\"history-grid\">\n            {gameHistory.map((result, index) => {\n              const numericResult = Number(result) || 1.0;\n              return (\n                <div\n                  key={index}\n                  className={`history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`}\n                >\n                  {numericResult.toFixed(2)}x\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <div className=\"bet-history\">\n        <h3>Your Bet History</h3>\n        <div className=\"bet-history-table\">\n          <div className=\"bet-history-header\">\n            <span>Round</span>\n            <span>Stake</span>\n            <span>Outcome</span>\n            <span>Payout</span>\n            <span>Profit</span>\n          </div>\n          {betHistory.length === 0 && (\n            <div className=\"bet-history-empty\">No bets yet</div>\n          )}\n          {betHistory.map((b, i) => (\n            <div className={`bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`} key={i}>\n              <span>#{b.round || b.game?.round_number}</span>\n              <span>${Number(b.amount).toFixed(2)}</span>\n              <span>{b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'}</span>\n              <span>${Number(b.payout).toFixed(2)}</span>\n              <span className=\"profit\">{`${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"game-info\">\n        <h3>How to Play</h3>\n        <ul>\n          <li>Place your bet during the waiting phase (before takeoff)</li>\n          <li>Once bet is placed, your stake is locked for that round</li>\n          <li>Watch the multiplier increase in real-time during flight</li>\n          <li>Click \"Cashout\" before the plane crashes to win!</li>\n          <li>If the plane crashes before you cashout, you lose your bet</li>\n          <li>After each round, you must place a new bet manually</li>\n        </ul>\n        <div className=\"backend-info\">\n          <strong>Real-time Multiplier:</strong> Increases by 0.05x every second during active gameplay\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Aviator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}