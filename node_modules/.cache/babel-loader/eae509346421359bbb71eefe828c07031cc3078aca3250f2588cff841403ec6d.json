{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoo\\\\Desktop\\\\betting\\\\betsite\\\\frontend\\\\src\\\\components\\\\Aviator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = n => n.toLocaleString(undefined, {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\nconst Aviator = () => {\n  _s();\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setBalance(1000);\n    }\n  };\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n\n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n\n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n\n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n\n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n\n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n\n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n\n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            lastCountdownUpdate.current = Date.now();\n          }\n        }\n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n\n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n      } else if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting crashed state to show crash multiplier');\n        // When backend indicates crash, first show the crash state with the actual crash multiplier\n        stateUpdates.gameState = 'crashed';\n        // Ensure the displayed multiplier matches the crash point\n        if (gameData.crash_point) {\n          stateUpdates.multiplier = Number(gameData.crash_point);\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n\n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n      }\n\n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n\n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await Promise.all([checkActiveBet(), fetchActiveBets()]);\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await Promise.all([checkActiveBet(), fetchActiveBets()]);\n      }\n\n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n\n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n\n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n\n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n\n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      return null;\n    }\n  };\n  const fetchGameHistory = async () => {\n    try {\n      var _response$data;\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n\n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data.map(game => Number(game.crash_point)).filter(point => !isNaN(point) && point > 0);\n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n    }\n  };\n\n  // Fetch active bets to restore local slips after refresh\n  const fetchActiveBets = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/active-bets/?user_id=player_1${roundNumber ? `&round_number=${roundNumber}` : ''}`);\n      const data = response.data || {};\n      const bets = Array.isArray(data.bets) ? data.bets : [];\n      const restoredSlips = bets.map(b => {\n        var _b$game;\n        return {\n          id: b.id,\n          roundId: ((_b$game = b.game) === null || _b$game === void 0 ? void 0 : _b$game.round_number) || data.round_number || roundNumber,\n          stake: Number(b.amount),\n          status: b.status === 'active' ? 'active' : b.status === 'cashout' ? 'cashed' : 'lost',\n          placedAt: new Date(b.created_at || Date.now()).getTime(),\n          cashedAt: null,\n          cashoutOdds: b.cashout_multiplier ? Number(b.cashout_multiplier) : null,\n          winAmount: b.payout ? Number(b.payout) : null,\n          backendBetId: b.id\n        };\n      });\n      setBetSlips(prev => {\n        const nonActive = prev.filter(s => s.status !== 'active');\n        return [...restoredSlips, ...nonActive];\n      });\n      const hasActive = restoredSlips.some(s => s.status === 'active');\n      setIsBetPlaced(hasActive);\n      setHasLocalActiveBet(hasActive);\n      return restoredSlips;\n    } catch (error) {\n      console.error('Error fetching active bets:', error);\n      return [];\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(countdownStartDetected.current && timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    try {\n      var _response$data2, _response$data2$bet, _response$data3, _response$data3$bet, _response$data4, _response$data4$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1' // Simple user ID for anonymous betting\n      });\n      setBalance(response.data.balance);\n      setError(null);\n\n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$bet = _response$data2.bet) === null || _response$data2$bet === void 0 ? void 0 : _response$data2$bet.id) || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$bet = _response$data3.bet) === null || _response$data3$bet === void 0 ? void 0 : _response$data3$bet.id\n      };\n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n\n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && (_response$data4$bet = _response$data4.bet) !== null && _response$data4$bet !== void 0 && _response$data4$bet.id) {\n        setActiveBets(prev => [{\n          id: response.data.bet.id,\n          amount: Number(response.data.bet.amount)\n        }, ...prev]);\n      }\n\n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n\n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    setIsCashingOut(true);\n    try {\n      var _response$data5, _response$data5$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',\n        // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      setBalance(response.data.balance);\n      setError(null);\n\n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n\n      // Update legacy bet state\n      if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && (_response$data5$bet = _response$data5.bet) !== null && _response$data5$bet !== void 0 && _response$data5$bet.id) {\n        setActiveBets(prev => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n\n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n\n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n  const addChip = amount => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async betSlipId => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = enabled => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    try {\n      // Force refresh all data\n      await Promise.all([fetchBalance(), fetchCurrentGame(), fetchGameHistory(), fetchBetHistory()]);\n\n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n\n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n\n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n\n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if countdown is stuck during waiting state\n    if (gameState === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if game state is stuck\n    if (gameState === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameState === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n\n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n\n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n\n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n\n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n\n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => slip.status === 'active' ? {\n      ...slip,\n      status: 'lost'\n    } : slip));\n\n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n\n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n\n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n          setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n\n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n\n      // Briefly show crash, then move straight to waiting for next round without blocking UI\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state');\n        setGameState('waiting');\n        setMultiplier(1.00); // Reset multiplier for next round\n        // Force a quick refresh to pick up new countdown\n        setTimeout(() => {\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100);\n      }, 1500); // Show crash state briefly\n\n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n\n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n\n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n\n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n\n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n\n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([fetchBalance(), fetchCurrentGame().catch(() => undefined), fetchGameHistory(), fetchBetHistory()]);\n\n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await Promise.all([checkActiveBet(), fetchActiveBets()]);\n        }\n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    initializeComponent();\n\n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n\n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n\n    // Start polling immediately\n    pollForUpdates();\n\n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    setupPolling();\n\n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n\n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n\n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 976,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: isCrashLoading ? '💥' : '⏳'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 978,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aviator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Aviator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 987,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-display\",\n          children: [\"Balance: $\", balance.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 989,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `connection-indicator ${connectionStatus}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"connection-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 994,\n              columnNumber: 15\n            }, this), connectionStatus === 'connected' ? 'Live' : connectionStatus === 'disconnected' ? 'Reconnecting...' : connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 993,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: manualRefresh,\n            className: \"refresh-btn\",\n            disabled: isLoading,\n            title: \"Refresh game state\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 999,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 992,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1012,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"API Base: \", API_BASE_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game State: \", gameState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Round: #\", roundNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Time Left: \", timeLeft, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Loading: \", isLoading.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Connection: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `connection-status ${connectionStatus}`,\n          children: connectionStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Polling Errors: \", pollingErrors]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Auto-Refresh: \", autoRefreshTimeout.current ? 'Scheduled' : 'Ready']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Countdown Start: \", countdownStartDetected.current ? 'Detected' : 'Monitoring']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game History Count: \", gameHistory.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Bet History Count: \", betHistory.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Current Game: \", currentGame ? `Round ${currentGame.round_number}` : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiplier-display\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: [gameState === 'waiting' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"waiting-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane waiting`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1046,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1045,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Next game in \", timeLeft, \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1050,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"countdown-circle\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"countdown-number\",\n                  children: timeLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1052,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1051,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1054,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1044,\n              columnNumber: 17\n            }, this)\n          }, \"waiting\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1037,\n            columnNumber: 15\n          }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"playing-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane flying`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1069,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1068,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"multiplier-value\",\n                children: [multiplier.toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Flying!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1076,\n                columnNumber: 19\n              }, this), Number(crashPoint) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crash-point\",\n                children: [\"Target: \", (Number(crashPoint) || 1.0).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1078,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1082,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1067,\n              columnNumber: 17\n            }, this)\n          }, \"playing\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1060,\n            columnNumber: 15\n          }, this), gameState === 'crashed' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"crashed-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane crashed`,\n                  children: \"\\uD83D\\uDCA5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1097,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1096,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"crash-text\",\n                children: [\"CRASHED AT \", Number(crashPoint || multiplier).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1101,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Game Over!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1102,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1103,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"backend-info\",\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Predetermined crash point from backend\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1105,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1104,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1095,\n              columnNumber: 17\n            }, this)\n          }, \"crashed\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1088,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"betting-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-controls-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-label\",\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-amount\",\n              children: [\"$\", formatMoney(balance)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1118,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stake-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-label\",\n              children: \"Stake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: betAmount,\n                min: \"10\",\n                max: balance,\n                disabled: !(gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0),\n                onChange: e => setBetAmount(Math.max(10, parseInt(e.target.value) || 10)),\n                className: \"stake-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1124,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: setMaxBet,\n                disabled: !(gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0),\n                className: \"max-btn\",\n                children: \"MAX\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1133,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-limits\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Min: $10\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1136,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Max: $\", formatMoney(balance)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1137,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: placeBet,\n            disabled: gameState !== 'waiting' || !countdownStartDetected.current || timeLeft <= 0 || betAmount < 10 || betAmount > balance,\n            className: `place-bet-main-btn ${gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0 ? 'active' : 'disabled'}`,\n            children: gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0 ? 'Bet' : 'Bet (locked)'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auto-bet-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"auto-bet-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: autoBet,\n                onChange: e => handleAutoBetToggle(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1151,\n                columnNumber: 17\n              }, this), \"Auto-Bet (next round)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 15\n            }, this), !autoBet && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auto-bet-note\",\n              children: \"Will NOT auto-place on next round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1159,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-slips-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Bets (This Round)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"active-count\",\n              children: [\"Active: \", betSlips.filter(slip => slip.status === 'active').length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1166,\n            columnNumber: 13\n          }, this), betSlips.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-bets-message\",\n            children: \"Place a bet before takeoff to see it here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1172,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips-list\",\n            children: betSlips.map(slip => {\n              var _slip$cashoutOdds;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `bet-slip ${slip.status}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-slip-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bet-stake\",\n                    children: [\"Stake: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"stake-amount\",\n                      children: [\"$\", formatMoney(slip.stake)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1178,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1178,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bet-details\",\n                    children: [\"Bet #\", String(slip.id).slice(0, 8), \" \\u2022 Round #\", slip.roundId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1179,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1177,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-slip-actions\",\n                  children: [slip.status === 'active' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"potential-win\",\n                      children: [\"Potential: $\", formatMoney(slip.stake * multiplier)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1185,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleBetSlipCashout(slip.id),\n                      disabled: gameState !== 'playing' || isCashingOut,\n                      className: `cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`,\n                      children: [\"Cashout @ \", multiplier.toFixed(2), \"x\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1186,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true), slip.status === 'cashed' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cashed-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cashout-odds\",\n                      children: [\"Cashed @ \", (_slip$cashoutOdds = slip.cashoutOdds) === null || _slip$cashoutOdds === void 0 ? void 0 : _slip$cashoutOdds.toFixed(2), \"x\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1197,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"win-amount\",\n                      children: [\"+ $\", formatMoney(slip.winAmount)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1198,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1196,\n                    columnNumber: 25\n                  }, this), slip.status === 'lost' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"lost-info\",\n                    children: \"Lost\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1202,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1182,\n                  columnNumber: 21\n                }, this)]\n              }, slip.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1176,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1174,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1033,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recent Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1215,\n        columnNumber: 9\n      }, this), gameHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-empty\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No game history yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Games will appear here after they crash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1219,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1217,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-grid\",\n        children: gameHistory.map((result, index) => {\n          const numericResult = Number(result) || 1.0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`,\n            children: [numericResult.toFixed(2), \"x\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1222,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bet-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Bet History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-history-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Outcome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Payout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Profit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1241,\n          columnNumber: 11\n        }, this), betHistory.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-empty\",\n          children: \"No bets yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1249,\n          columnNumber: 13\n        }, this), betHistory.map((b, i) => {\n          var _b$game2;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"#\", b.round || ((_b$game2 = b.game) === null || _b$game2 === void 0 ? void 0 : _b$game2.round_number)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1253,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.amount).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1254,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.payout).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"profit\",\n              children: `${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1257,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1252,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1264,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Place your bet during the waiting phase (before takeoff)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Once bet is placed, your stake is locked for that round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Watch the multiplier increase in real-time during flight\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click \\\"Cashout\\\" before the plane crashes to win!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"If the plane crashes before you cashout, you lose your bet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"After each round, you must place a new bet manually\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Real-time Multiplier:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1274,\n          columnNumber: 11\n        }, this), \" Increases by 0.05x every second during active gameplay\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1263,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 985,\n    columnNumber: 5\n  }, this);\n};\n_s(Aviator, \"DBrJxsAciTZE71K39KMLSH+fDP8=\");\n_c = Aviator;\nexport default Aviator;\nvar _c;\n$RefreshReg$(_c, \"Aviator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","AnimatePresence","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","debugLog","args","NODE_ENV","console","log","formatMoney","n","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","clamp","v","min","max","Math","generateBetId","a","random","toString","slice","b","Date","now","Aviator","_s","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","roundNumber","setRoundNumber","betHistory","setBetHistory","currentGame","setCurrentGame","error","setError","isLoading","setIsLoading","isCashingOut","setIsCashingOut","hasLocalActiveBet","setHasLocalActiveBet","activeBets","setActiveBets","connectionStatus","setConnectionStatus","pollingErrors","setPollingErrors","betSlips","setBetSlips","autoBet","setAutoBet","lastStake","setLastStake","gameInterval","gameCheckInterval","gameTimeout","isRunningRef","lastUpdateTime","isBetPlacedRef","hasLocalActiveBetRef","gameStateRef","pollingRetryCount","maxPollingRetries","lastSuccessfulPoll","heartbeatInterval","autoRefreshTimeout","consecutiveErrors","lastGameState","lastRoundNumber","periodicRefreshInterval","lastCountdownUpdate","lastBetStateUpdate","countdownStartDetected","previousTimeLeft","countdownStartTimeout","fetchBalance","response","get","data","_error$response","fetchCurrentGame","isRetry","gameData","backendStatus","status","effectivePhase","phase","current","round_number","time_remaining","current_multiplier","isNewRound","Number","crash_point","stateUpdates","newTimeLeft","ceil","setTimeout","placeBet","game_crashed","Object","entries","forEach","key","value","Promise","all","checkActiveBet","fetchActiveBets","abs","prev","warn","scheduleAutoRefresh","fetchGameHistory","_response$data","length","crashPoints","map","game","filter","point","isNaN","_error$response2","fetchBetHistory","_error$response3","bets","Array","isArray","restoredSlips","_b$game","id","roundId","stake","amount","placedAt","created_at","getTime","cashedAt","cashoutOdds","cashout_multiplier","winAmount","payout","backendBetId","nonActive","s","hasActive","some","hasActiveBet","has_active_bet","_response$data2","_response$data2$bet","_response$data3","_response$data3$bet","_response$data4","_response$data4$bet","post","user_id","betSlip","bet","_error$response4","_error$response4$data","cashout","specificBetId","_response$data5","_response$data5$bet","bet_id","slip","round","remaining","_error$response5","_error$response5$data","doubleBet","halfBet","floor","resetBet","addChip","next","setMaxBet","clearBet","handleBetSlipCashout","betSlipId","find","handleAutoBetToggle","enabled","manualRefresh","clearTimeout","checkForAutoRefresh","timeSinceLastPoll","timeSinceCountdownUpdate","timeSinceBetStateUpdate","startPeriodicAutoRefresh","clearInterval","setInterval","detectCountdownStart","isNewCountdown","isNewRoundCountdown","handleGameCrash","e","crashTimeout","catch","transitionTimeout","immediateCheck","countdownCheck","initializeComponent","pollForUpdates","pollInterval","setupPolling","pollFrequency","statusCheckInterval","currentFrequency","isCrashLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","onClick","disabled","title","mode","div","initial","opacity","scale","animate","exit","type","onChange","parseInt","target","checked","_slip$cashoutOdds","String","result","index","numericResult","i","_b$game2","cashoutMultiplier","profit","_c","$RefreshReg$"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = (n) => n.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\n\nconst Aviator = () => {\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  \n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      setBalance(1000);\n    }\n  };\n\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      \n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n      \n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n      \n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n      \n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n      \n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      \n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n      \n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n      \n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        \n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            lastCountdownUpdate.current = Date.now();\n          }\n        }\n        \n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n          \n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n      } else if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting crashed state to show crash multiplier');\n        // When backend indicates crash, first show the crash state with the actual crash multiplier\n        stateUpdates.gameState = 'crashed';\n        // Ensure the displayed multiplier matches the crash point\n        if (gameData.crash_point) {\n          stateUpdates.multiplier = Number(gameData.crash_point);\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        \n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n      }\n      \n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n      \n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await Promise.all([checkActiveBet(), fetchActiveBets()]);\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await Promise.all([checkActiveBet(), fetchActiveBets()]);\n      }\n      \n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      \n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      \n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n      \n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n      \n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n        \n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      \n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', response.data?.length);\n      \n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data\n        .map(game => Number(game.crash_point))\n        .filter(point => !isNaN(point) && point > 0);\n      \n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Fetch active bets to restore local slips after refresh\n  const fetchActiveBets = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/active-bets/?user_id=player_1${roundNumber ? `&round_number=${roundNumber}` : ''}`);\n      const data = response.data || {};\n      const bets = Array.isArray(data.bets) ? data.bets : [];\n      const restoredSlips = bets.map((b) => ({\n        id: b.id,\n        roundId: b.game?.round_number || data.round_number || roundNumber,\n        stake: Number(b.amount),\n        status: b.status === 'active' ? 'active' : b.status === 'cashout' ? 'cashed' : 'lost',\n        placedAt: new Date(b.created_at || Date.now()).getTime(),\n        cashedAt: null,\n        cashoutOdds: b.cashout_multiplier ? Number(b.cashout_multiplier) : null,\n        winAmount: b.payout ? Number(b.payout) : null,\n        backendBetId: b.id\n      }));\n      setBetSlips((prev) => {\n        const nonActive = prev.filter((s) => s.status !== 'active');\n        return [...restoredSlips, ...nonActive];\n      });\n      const hasActive = restoredSlips.some((s) => s.status === 'active');\n      setIsBetPlaced(hasActive);\n      setHasLocalActiveBet(hasActive);\n      return restoredSlips;\n    } catch (error) {\n      console.error('Error fetching active bets:', error);\n      return [];\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    \n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(countdownStartDetected.current && timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    \n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1'  // Simple user ID for anonymous betting\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: response.data?.bet?.id || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: response.data?.bet?.id\n      };\n      \n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n      \n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => [{ id: response.data.bet.id, amount: Number(response.data.bet.amount) }, ...prev]);\n      }\n      \n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n    \n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    \n    setIsCashingOut(true);\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',  // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n      \n      // Update legacy bet state\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      \n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n      \n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async (betSlipId) => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    \n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = (enabled) => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    \n    try {\n      // Force refresh all data\n      await Promise.all([\n        fetchBalance(),\n        fetchCurrentGame(),\n        fetchGameHistory(),\n        fetchBetHistory()\n      ]);\n      \n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      \n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n    \n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n    \n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n    \n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if countdown is stuck during waiting state\n    if (gameState === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if game state is stuck\n    if (gameState === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameState === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n    \n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    \n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n      \n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n      \n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n    \n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n  \n\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n    \n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => (\n      slip.status === 'active'\n        ? { ...slip, status: 'lost' }\n        : slip\n    )));\n    \n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n    \n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      \n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n        \n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n        setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n    \n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n      \n      // Briefly show crash, then move straight to waiting for next round without blocking UI\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state');\n        setGameState('waiting');\n        setMultiplier(1.00); // Reset multiplier for next round\n        // Force a quick refresh to pick up new countdown\n        setTimeout(() => {\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100);\n      }, 1500); // Show crash state briefly\n      \n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n      \n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n        \n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n      \n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n        \n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n      \n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        \n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await Promise.all([checkActiveBet(), fetchActiveBets()]);\n        }\n        \n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    \n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        \n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n        \n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n    \n    // Start polling immediately\n    pollForUpdates();\n    \n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      \n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      \n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    \n    setupPolling();\n    \n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n    \n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n    \n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    \n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n          <h2>{isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'}</h2>\n          <div className=\"loading-spinner\">{isCrashLoading ? '💥' : '⏳'}</div>\n          <p>{isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"header-info\">\n          <div className=\"balance-display\">\n            Balance: ${balance.toFixed(2)}\n          </div>\n          <div className=\"header-controls\">\n            <div className={`connection-indicator ${connectionStatus}`}>\n              <span className=\"connection-dot\"></span>\n              {connectionStatus === 'connected' ? 'Live' : \n               connectionStatus === 'disconnected' ? 'Reconnecting...' : \n               connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown'}\n            </div>\n            <button \n              onClick={manualRefresh} \n              className=\"refresh-btn\"\n              disabled={isLoading}\n              title=\"Refresh game state\"\n            >\n              🔄\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n      <div className=\"debug-info\">\n        <small>API Base: {API_BASE_URL}</small>\n        <small>Game State: {gameState}</small>\n        <small>Round: #{roundNumber}</small>\n        <small>Time Left: {timeLeft}s</small>\n        <small>Loading: {isLoading.toString()}</small>\n        <small>Connection: <span className={`connection-status ${connectionStatus}`}>{connectionStatus}</span></small>\n        <small>Polling Errors: {pollingErrors}</small>\n        <small>Auto-Refresh: {autoRefreshTimeout.current ? 'Scheduled' : 'Ready'}</small>\n        <small>Countdown Start: {countdownStartDetected.current ? 'Detected' : 'Monitoring'}</small>\n        <small>Game History Count: {gameHistory.length}</small>\n        <small>Bet History Count: {betHistory.length}</small>\n        <small>Current Game: {currentGame ? `Round ${currentGame.round_number}` : 'None'}</small>\n      </div>\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\">\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane waiting`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <h2>Next game in {timeLeft}s</h2>\n                  <div className=\"countdown-circle\">\n                    <span className=\"countdown-number\">{timeLeft}</span>\n                  </div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"playing-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane flying`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <div className=\"multiplier-value\">\n                    {multiplier.toFixed(2)}x\n                  </div>\n                  <div className=\"game-status\">Flying!</div>\n                  {Number(crashPoint) > 0 && (\n                    <div className=\"crash-point\">\n                      Target: {(Number(crashPoint) || 1.0).toFixed(2)}x\n                    </div>\n                  )}\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"crashed-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane crashed`}>\n                      💥\n                    </div>\n                  </div>\n                  <h2 className=\"crash-text\">CRASHED AT {Number(crashPoint || multiplier).toFixed(2)}x</h2>\n                  <div className=\"game-status\">Game Over!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                  <div className=\"backend-info\">\n                    <small>Predetermined crash point from backend</small>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Betika-style Betting Panel */}\n        <div className=\"betting-panel\">\n          <div className=\"betting-controls-section\">\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">${formatMoney(balance)}</div>\n            </div>\n\n            <div className=\"stake-section\">\n              <div className=\"stake-label\">Stake</div>\n              <div className=\"stake-input-group\">\n                <input\n                  type=\"number\"\n                  value={betAmount}\n                  min=\"10\"\n                  max={balance}\n                  disabled={!(gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0)}\n                  onChange={(e) => setBetAmount(Math.max(10, parseInt(e.target.value) || 10))}\n                  className=\"stake-input\"\n                />\n                <button onClick={setMaxBet} disabled={!(gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0)} className=\"max-btn\">MAX</button>\n              </div>\n              <div className=\"stake-limits\">\n                <span>Min: $10</span>\n                <span>Max: ${formatMoney(balance)}</span>\n              </div>\n            </div>\n\n            <button\n              onClick={placeBet}\n              disabled={gameState !== 'waiting' || !countdownStartDetected.current || timeLeft <= 0 || betAmount < 10 || betAmount > balance}\n              className={`place-bet-main-btn ${gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0 ? 'active' : 'disabled'}`}\n            >\n              {gameState === 'waiting' && countdownStartDetected.current && timeLeft > 0 ? 'Bet' : 'Bet (locked)'}\n            </button>\n\n            <div className=\"auto-bet-section\">\n              <label className=\"auto-bet-label\">\n                <input \n                  type=\"checkbox\" \n                  checked={autoBet} \n                  onChange={(e) => handleAutoBetToggle(e.target.checked)}\n                />\n                Auto-Bet (next round)\n              </label>\n              {!autoBet && (\n                <div className=\"auto-bet-note\">Will NOT auto-place on next round</div>\n              )}\n            </div>\n          </div>\n\n          {/* Bet Slips Section */}\n          <div className=\"bet-slips-section\">\n            <div className=\"bet-slips-header\">\n              <h3>Your Bets (This Round)</h3>\n              <div className=\"active-count\">Active: {betSlips.filter(slip => slip.status === 'active').length}</div>\n            </div>\n\n            {betSlips.length === 0 ? (\n              <div className=\"no-bets-message\">Place a bet before takeoff to see it here.</div>\n            ) : (\n              <div className=\"bet-slips-list\">\n                {betSlips.map((slip) => (\n                  <div key={slip.id} className={`bet-slip ${slip.status}`}>\n                    <div className=\"bet-slip-info\">\n                      <div className=\"bet-stake\">Stake: <span className=\"stake-amount\">${formatMoney(slip.stake)}</span></div>\n                      <div className=\"bet-details\">Bet #{String(slip.id).slice(0, 8)} • Round #{slip.roundId}</div>\n                    </div>\n\n                    <div className=\"bet-slip-actions\">\n                      {slip.status === 'active' && (\n                        <>\n                          <div className=\"potential-win\">Potential: ${formatMoney(slip.stake * multiplier)}</div>\n                          <button\n                            onClick={() => handleBetSlipCashout(slip.id)}\n                            disabled={gameState !== 'playing' || isCashingOut}\n                            className={`cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`}\n                          >\n                            Cashout @ {multiplier.toFixed(2)}x\n                          </button>\n                        </>\n                      )}\n                      {slip.status === 'cashed' && (\n                        <div className=\"cashed-info\">\n                          <div className=\"cashout-odds\">Cashed @ {slip.cashoutOdds?.toFixed(2)}x</div>\n                          <div className=\"win-amount\">+ ${formatMoney(slip.winAmount)}</div>\n                        </div>\n                      )}\n                      {slip.status === 'lost' && (\n                        <div className=\"lost-info\">Lost</div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n      </div>\n\n      <div className=\"game-history\">\n        <h3>Recent Results</h3>\n        {gameHistory.length === 0 ? (\n          <div className=\"history-empty\">\n            <p>No game history yet</p>\n            <small>Games will appear here after they crash</small>\n          </div>\n        ) : (\n          <div className=\"history-grid\">\n            {gameHistory.map((result, index) => {\n              const numericResult = Number(result) || 1.0;\n              return (\n                <div\n                  key={index}\n                  className={`history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`}\n                >\n                  {numericResult.toFixed(2)}x\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      <div className=\"bet-history\">\n        <h3>Your Bet History</h3>\n        <div className=\"bet-history-table\">\n          <div className=\"bet-history-header\">\n            <span>Round</span>\n            <span>Stake</span>\n            <span>Outcome</span>\n            <span>Payout</span>\n            <span>Profit</span>\n          </div>\n          {betHistory.length === 0 && (\n            <div className=\"bet-history-empty\">No bets yet</div>\n          )}\n          {betHistory.map((b, i) => (\n            <div className={`bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`} key={i}>\n              <span>#{b.round || b.game?.round_number}</span>\n              <span>${Number(b.amount).toFixed(2)}</span>\n              <span>{b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'}</span>\n              <span>${Number(b.payout).toFixed(2)}</span>\n              <span className=\"profit\">{`${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"game-info\">\n        <h3>How to Play</h3>\n        <ul>\n          <li>Place your bet during the waiting phase (before takeoff)</li>\n          <li>Once bet is placed, your stake is locked for that round</li>\n          <li>Watch the multiplier increase in real-time during flight</li>\n          <li>Click \"Cashout\" before the plane crashes to win!</li>\n          <li>If the plane crashes before you cashout, you lose your bet</li>\n          <li>After each round, you must place a new bet manually</li>\n        </ul>\n        <div className=\"backend-info\">\n          <strong>Real-time Multiplier:</strong> Increases by 0.05x every second during active gameplay\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Aviator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}