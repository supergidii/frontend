{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoo\\\\Desktop\\\\betting\\\\betsite\\\\frontend\\\\src\\\\components\\\\Aviator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = n => n.toLocaleString(undefined, {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\nconst Aviator = () => {\n  _s();\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      var _error$response;\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      setBalance(1000);\n    }\n  };\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      let didCrashThisTick = false;\n\n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n\n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n\n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n\n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n\n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n\n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n\n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            lastCountdownUpdate.current = Date.now();\n          }\n        }\n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n\n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n      } else if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting crashed state to show crash multiplier');\n        // When backend indicates crash, first show the crash state with the actual crash multiplier\n        stateUpdates.gameState = 'crashed';\n        // Ensure the displayed multiplier matches the crash point\n        if (gameData.crash_point) {\n          stateUpdates.multiplier = Number(gameData.crash_point);\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n\n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n        didCrashThisTick = true;\n      }\n\n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n\n      // If crash just happened, refresh recent history once\n      if (didCrashThisTick) {\n        try {\n          await fetchGameHistory();\n        } catch (e) {\n          console.warn('Failed to refresh game history after crash:', e);\n        }\n      }\n\n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n\n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n\n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n\n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n\n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n\n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      return null;\n    }\n  };\n  const fetchGameHistory = async () => {\n    try {\n      var _response$data;\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n\n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data.map(game => Number(game.crash_point)).filter(point => !isNaN(point) && point > 0);\n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      let response;\n      try {\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      } catch (e) {\n        // Fallback for anonymous/testing\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history-public/?user_id=player_1`);\n      }\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    try {\n      var _response$data2, _response$data2$bet, _response$data3, _response$data3$bet, _response$data4, _response$data4$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1' // Simple user ID for anonymous betting\n      });\n      setBalance(response.data.balance);\n      setError(null);\n\n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$bet = _response$data2.bet) === null || _response$data2$bet === void 0 ? void 0 : _response$data2$bet.id) || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$bet = _response$data3.bet) === null || _response$data3$bet === void 0 ? void 0 : _response$data3$bet.id\n      };\n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n\n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && (_response$data4$bet = _response$data4.bet) !== null && _response$data4$bet !== void 0 && _response$data4$bet.id) {\n        setActiveBets(prev => [{\n          id: response.data.bet.id,\n          amount: Number(response.data.bet.amount)\n        }, ...prev]);\n      }\n\n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      setError(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n\n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    setIsCashingOut(true);\n    try {\n      var _response$data5, _response$data5$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',\n        // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      setBalance(response.data.balance);\n      setError(null);\n\n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n\n      // Update legacy bet state\n      if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && (_response$data5$bet = _response$data5.bet) !== null && _response$data5$bet !== void 0 && _response$data5$bet.id) {\n        setActiveBets(prev => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n\n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n\n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      setError(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n  const addChip = amount => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async betSlipId => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = enabled => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    try {\n      // Force refresh all data\n      await Promise.all([fetchBalance(), fetchCurrentGame(), fetchGameHistory(), fetchBetHistory()]);\n\n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wallet actions\n  const [walletAmount, setWalletAmount] = useState(100);\n  const handleDeposit = async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/deposit/`, {\n        user_id: 'player_1',\n        amount: walletAmount\n      });\n      setBalance(response.data.balance);\n    } catch (e) {\n      console.error('Deposit failed', e);\n    }\n  };\n  const handleWithdraw = async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/withdraw/`, {\n        user_id: 'player_1',\n        amount: walletAmount\n      });\n      setBalance(response.data.balance);\n    } catch (e) {\n      console.error('Withdraw failed', e);\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n\n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n\n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n\n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if countdown is stuck during waiting state\n    if (gameState === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if game state is stuck\n    if (gameState === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameState === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n\n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n\n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n\n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n\n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n\n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => slip.status === 'active' ? {\n      ...slip,\n      status: 'lost'\n    } : slip));\n\n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n\n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n\n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n          setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n\n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n\n      // Briefly show crash, then move straight to waiting for next round without blocking UI\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state');\n        setGameState('waiting');\n        setMultiplier(1.00); // Reset multiplier for next round\n        // Force a quick refresh to pick up new countdown\n        setTimeout(() => {\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100);\n      }, 1500); // Show crash state briefly\n\n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n\n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n\n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n\n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n\n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n\n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([fetchBalance(), fetchCurrentGame().catch(() => undefined), fetchGameHistory(), fetchBetHistory()]);\n\n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    initializeComponent();\n\n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n\n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n\n    // Start polling immediately\n    pollForUpdates();\n\n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    setupPolling();\n\n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n\n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n\n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 981,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: isCrashLoading ? '💥' : '⏳'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 983,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Waiting duration used for countdown progress (seconds)\n  const WAIT_DURATION = 10;\n  const countdownPercent = Math.max(0, Math.min(100, Math.round(timeLeft / WAIT_DURATION * 100)));\n  const cylShouldExplode = gameState === 'crashed';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aviator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Aviator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-display\",\n          children: [\"Balance: Ksh \", balance.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 999,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `connection-indicator ${connectionStatus}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"connection-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1004,\n              columnNumber: 15\n            }, this), connectionStatus === 'connected' ? 'Live' : connectionStatus === 'disconnected' ? 'Reconnecting...' : connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1003,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: manualRefresh,\n            className: \"refresh-btn\",\n            disabled: isLoading,\n            title: \"Refresh game state\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1009,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1002,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wallet-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            value: walletAmount,\n            onChange: e => setWalletAmount(Math.max(1, parseInt(e.target.value) || 1)),\n            className: \"wallet-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleDeposit,\n            className: \"wallet-btn\",\n            children: \"Deposit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleWithdraw,\n            className: \"wallet-btn outline\",\n            children: \"Withdraw\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1018,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 996,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1033,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiplier-display\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: [gameState === 'waiting' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"waiting-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cyl-progress-wrap\",\n                  \"aria-label\": \"Round countdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `cyl-progress ${cylShouldExplode ? 'explode' : ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-core\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1057,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-fill\",\n                      style: {\n                        width: `${countdownPercent}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1058,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-gloss\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1059,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-ends cyl-left\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1060,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-ends cyl-right\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1061,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1056,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cyl-timer-label\",\n                    children: [timeLeft, \"s\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1063,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1055,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane waiting`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1065,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1053,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Next game in \", timeLeft, \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1069,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"countdown-circle\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"countdown-number\",\n                  children: timeLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1071,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1070,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1052,\n              columnNumber: 17\n            }, this)\n          }, \"waiting\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1045,\n            columnNumber: 15\n          }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"playing-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane flying`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1088,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1087,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"multiplier-value\",\n                children: [multiplier.toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1092,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Flying!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1095,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1096,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1086,\n              columnNumber: 17\n            }, this)\n          }, \"playing\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1079,\n            columnNumber: 15\n          }, this), gameState === 'crashed' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"crashed-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display crashed-anim\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane crashed`,\n                  children: \"\\uD83D\\uDCA5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1111,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1110,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"crash-text animated\",\n                children: [\"CRASHED AT \", Number(crashPoint || multiplier).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1115,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crash-burst\",\n                \"aria-hidden\": \"true\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 60\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1117,\n                  columnNumber: 73\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1116,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Game Over!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1119,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1120,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"backend-info\",\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Predetermined crash point from backend\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1122,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1121,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1109,\n              columnNumber: 17\n            }, this)\n          }, \"crashed\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"betting-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-controls-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-label\",\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1134,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-amount\",\n              children: [\"Ksh \", formatMoney(balance)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stake-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-label\",\n              children: \"Stake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: betAmount,\n                min: \"10\",\n                max: balance,\n                disabled: !(gameState === 'waiting' && timeLeft > 0),\n                onChange: e => setBetAmount(Math.max(10, parseInt(e.target.value) || 10)),\n                className: \"stake-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1141,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: setMaxBet,\n                disabled: !(gameState === 'waiting' && timeLeft > 0),\n                className: \"max-btn\",\n                children: \"MAX\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1150,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1140,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-limits\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Min: Ksh 10\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1153,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Max: Ksh \", formatMoney(balance)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1154,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: placeBet,\n            disabled: gameState !== 'waiting' || timeLeft <= 0 || betAmount < 10 || betAmount > balance,\n            className: `place-bet-main-btn ${gameState === 'waiting' && timeLeft > 0 ? 'active' : 'disabled'}`,\n            children: gameState === 'waiting' && timeLeft > 0 ? 'Bet' : 'Bet (locked)'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auto-bet-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"auto-bet-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: autoBet,\n                onChange: e => handleAutoBetToggle(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1168,\n                columnNumber: 17\n              }, this), \"Auto-Bet (next round)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 15\n            }, this), !autoBet && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auto-bet-note\",\n              children: \"Will NOT auto-place on next round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1176,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-slips-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Bets (This Round)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1184,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"active-count\",\n              children: [\"Active: \", betSlips.filter(slip => slip.status === 'active').length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1185,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1183,\n            columnNumber: 13\n          }, this), betSlips.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-bets-message\",\n            children: \"Place a bet before takeoff to see it here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1189,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips-list\",\n            children: betSlips.map(slip => {\n              var _slip$cashoutOdds;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `bet-slip ${slip.status}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-slip-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bet-stake\",\n                    children: [\"Stake: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"stake-amount\",\n                      children: [\"Ksh \", formatMoney(slip.stake)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1195,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1195,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bet-details\",\n                    children: [\"Bet #\", String(slip.id).slice(0, 8), \" \\u2022 Round #\", slip.roundId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1196,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1194,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-slip-actions\",\n                  children: [slip.status === 'active' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"potential-win\",\n                      children: [\"Potential: Ksh \", formatMoney(slip.stake * multiplier)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1202,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleBetSlipCashout(slip.id),\n                      disabled: gameState !== 'playing' || isCashingOut,\n                      className: `cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`,\n                      children: [\"Cashout @ \", multiplier.toFixed(2), \"x\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1203,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true), slip.status === 'cashed' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cashed-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cashout-odds\",\n                      children: [\"Cashed @ \", (_slip$cashoutOdds = slip.cashoutOdds) === null || _slip$cashoutOdds === void 0 ? void 0 : _slip$cashoutOdds.toFixed(2), \"x\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1214,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"win-amount\",\n                      children: [\"+ Ksh \", formatMoney(slip.winAmount)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1215,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1213,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1199,\n                  columnNumber: 21\n                }, this)]\n              }, slip.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1193,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1191,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1182,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 995,\n    columnNumber: 5\n  }, this);\n};\n_s(Aviator, \"EzdgUMN8iP5JkAaCtUTAjzRGiWM=\");\n_c = Aviator;\nexport default Aviator;\nvar _c;\n$RefreshReg$(_c, \"Aviator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","AnimatePresence","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","debugLog","args","NODE_ENV","console","log","formatMoney","n","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","clamp","v","min","max","Math","generateBetId","a","random","toString","slice","b","Date","now","Aviator","_s","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","roundNumber","setRoundNumber","betHistory","setBetHistory","currentGame","setCurrentGame","error","setError","isLoading","setIsLoading","isCashingOut","setIsCashingOut","hasLocalActiveBet","setHasLocalActiveBet","activeBets","setActiveBets","connectionStatus","setConnectionStatus","pollingErrors","setPollingErrors","betSlips","setBetSlips","autoBet","setAutoBet","lastStake","setLastStake","gameInterval","gameCheckInterval","gameTimeout","isRunningRef","lastUpdateTime","isBetPlacedRef","hasLocalActiveBetRef","gameStateRef","pollingRetryCount","maxPollingRetries","lastSuccessfulPoll","heartbeatInterval","autoRefreshTimeout","consecutiveErrors","lastGameState","lastRoundNumber","periodicRefreshInterval","lastCountdownUpdate","lastBetStateUpdate","countdownStartDetected","previousTimeLeft","countdownStartTimeout","fetchBalance","response","get","data","_error$response","fetchCurrentGame","isRetry","gameData","backendStatus","status","effectivePhase","phase","didCrashThisTick","current","round_number","time_remaining","current_multiplier","isNewRound","Number","crash_point","stateUpdates","newTimeLeft","ceil","setTimeout","placeBet","game_crashed","Object","entries","forEach","key","value","fetchGameHistory","e","warn","checkActiveBet","abs","prev","scheduleAutoRefresh","_response$data","length","crashPoints","map","game","filter","point","isNaN","_error$response2","fetchBetHistory","_error$response3","hasActiveBet","has_active_bet","_response$data2","_response$data2$bet","_response$data3","_response$data3$bet","_response$data4","_response$data4$bet","post","amount","user_id","betSlip","id","bet","roundId","stake","placedAt","cashedAt","cashoutOdds","winAmount","backendBetId","_error$response4","_error$response4$data","cashout","specificBetId","_response$data5","_response$data5$bet","bet_id","slip","round","remaining","_error$response5","_error$response5$data","doubleBet","halfBet","floor","resetBet","addChip","next","setMaxBet","clearBet","handleBetSlipCashout","betSlipId","find","handleAutoBetToggle","enabled","manualRefresh","Promise","all","walletAmount","setWalletAmount","handleDeposit","handleWithdraw","clearTimeout","checkForAutoRefresh","timeSinceLastPoll","timeSinceCountdownUpdate","timeSinceBetStateUpdate","startPeriodicAutoRefresh","clearInterval","setInterval","detectCountdownStart","isNewCountdown","isNewRoundCountdown","handleGameCrash","crashTimeout","catch","transitionTimeout","immediateCheck","countdownCheck","initializeComponent","pollForUpdates","pollInterval","setupPolling","pollFrequency","statusCheckInterval","currentFrequency","isCrashLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","WAIT_DURATION","countdownPercent","cylShouldExplode","toFixed","onClick","disabled","title","type","onChange","parseInt","target","mode","div","initial","opacity","scale","animate","exit","style","width","checked","_slip$cashoutOdds","String","_c","$RefreshReg$"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = (n) => n.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\n\nconst Aviator = () => {\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  \n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/?user_id=player_1`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      setBalance(1000);\n    }\n  };\n\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      let didCrashThisTick = false;\n      \n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n      \n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n      \n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n      \n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n      \n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      \n      if (Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n      \n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n      \n      // Update game state only if it actually changed\n      if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        stateUpdates.multiplier = 1.00;\n        \n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            stateUpdates.timeLeft = newTimeLeft;\n            lastCountdownUpdate.current = Date.now();\n          }\n        }\n        \n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n          \n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n      } else if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame:', gameData);\n        console.log('🔄 Setting crashed state to show crash multiplier');\n        // When backend indicates crash, first show the crash state with the actual crash multiplier\n        stateUpdates.gameState = 'crashed';\n        // Ensure the displayed multiplier matches the crash point\n        if (gameData.crash_point) {\n          stateUpdates.multiplier = Number(gameData.crash_point);\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        \n        // Update round info for next round\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        if (gameData.crash_point) {\n          stateUpdates.crashPoint = Number(gameData.crash_point);\n        }\n        didCrashThisTick = true;\n      }\n      \n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n      \n      // If crash just happened, refresh recent history once\n      if (didCrashThisTick) {\n        try {\n          await fetchGameHistory();\n        } catch (e) {\n          console.warn('Failed to refresh game history after crash:', e);\n        }\n      }\n      \n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n      \n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      \n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      \n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n      \n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n      \n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n        \n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      \n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', response.data?.length);\n      \n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data\n        .map(game => Number(game.crash_point))\n        .filter(point => !isNaN(point) && point > 0);\n      \n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      let response;\n      try {\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      } catch (e) {\n        // Fallback for anonymous/testing\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history-public/?user_id=player_1`);\n      }\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    \n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    \n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1'  // Simple user ID for anonymous betting\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: response.data?.bet?.id || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: response.data?.bet?.id\n      };\n      \n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n      \n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => [{ id: response.data.bet.id, amount: Number(response.data.bet.amount) }, ...prev]);\n      }\n      \n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n    \n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    \n    setIsCashingOut(true);\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',  // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n      \n      // Update legacy bet state\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      \n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n      \n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async (betSlipId) => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    \n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = (enabled) => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    \n    try {\n      // Force refresh all data\n      await Promise.all([\n        fetchBalance(),\n        fetchCurrentGame(),\n        fetchGameHistory(),\n        fetchBetHistory()\n      ]);\n      \n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      \n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wallet actions\n  const [walletAmount, setWalletAmount] = useState(100);\n  const handleDeposit = async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/deposit/`, { user_id: 'player_1', amount: walletAmount });\n      setBalance(response.data.balance);\n    } catch (e) {\n      console.error('Deposit failed', e);\n    }\n  };\n  const handleWithdraw = async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/withdraw/`, { user_id: 'player_1', amount: walletAmount });\n      setBalance(response.data.balance);\n    } catch (e) {\n      console.error('Withdraw failed', e);\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n    \n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n    \n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n    \n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if countdown is stuck during waiting state\n    if (gameState === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if game state is stuck\n    if (gameState === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameState === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n    \n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    \n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n      \n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n      \n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n    \n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n  \n\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n    \n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => (\n      slip.status === 'active'\n        ? { ...slip, status: 'lost' }\n        : slip\n    )));\n    \n    // Update bet history if there was an active bet\n    if (isBetPlaced) {\n      await fetchBetHistory();\n    }\n    \n    // Fetch the next round's data from backend BEFORE transitioning\n    try {\n      const gameData = await fetchCurrentGame();\n      console.log('📊 Fetched game data after crash:', gameData);\n      \n      if (gameData) {\n        // Update round number and crash point first\n        if (gameData.round_number !== roundNumber) {\n          setRoundNumber(gameData.round_number);\n        }\n        if (Number(gameData.crash_point) !== crashPoint) {\n          setCrashPoint(Number(gameData.crash_point) || 1.5);\n        }\n        \n        // Set countdown time\n        if (typeof gameData.time_remaining === 'number') {\n        setTimeLeft(Math.max(0, Math.ceil(gameData.time_remaining)));\n        } else {\n          setTimeLeft(10); // Default countdown\n        }\n      } else {\n        setTimeLeft(10); // Fallback countdown\n      }\n    } catch (error) {\n      console.error('Error fetching countdown after crash:', error);\n      setTimeLeft(10); // Fallback countdown\n    }\n    \n    // Transition to waiting state AFTER fetching data\n    setGameState('waiting');\n    setMultiplier(1.00);\n\n    console.log('✅ Crash handling complete - now in waiting state');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n      \n      // Briefly show crash, then move straight to waiting for next round without blocking UI\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state');\n        setGameState('waiting');\n        setMultiplier(1.00); // Reset multiplier for next round\n        // Force a quick refresh to pick up new countdown\n        setTimeout(() => {\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100);\n      }, 1500); // Show crash state briefly\n      \n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n      \n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n        \n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n      \n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n        \n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n      \n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        \n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        \n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    \n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        \n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n        \n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n    \n    // Start polling immediately\n    pollForUpdates();\n    \n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      \n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      \n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    \n    setupPolling();\n    \n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n    \n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n    \n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    \n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n          <h2>{isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'}</h2>\n          <div className=\"loading-spinner\">{isCrashLoading ? '💥' : '⏳'}</div>\n          <p>{isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Waiting duration used for countdown progress (seconds)\n  const WAIT_DURATION = 10;\n  const countdownPercent = Math.max(0, Math.min(100, Math.round((timeLeft / WAIT_DURATION) * 100)));\n  const cylShouldExplode = gameState === 'crashed';\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"header-info\">\n          <div className=\"balance-display\">\n            Balance: Ksh {balance.toFixed(2)}\n          </div>\n          <div className=\"header-controls\">\n            <div className={`connection-indicator ${connectionStatus}`}>\n              <span className=\"connection-dot\"></span>\n              {connectionStatus === 'connected' ? 'Live' : \n               connectionStatus === 'disconnected' ? 'Reconnecting...' : \n               connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown'}\n            </div>\n            <button \n              onClick={manualRefresh} \n              className=\"refresh-btn\"\n              disabled={isLoading}\n              title=\"Refresh game state\"\n            >\n              🔄\n            </button>\n          </div>\n          <div className=\"wallet-controls\">\n            <input\n              type=\"number\"\n              min=\"1\"\n              value={walletAmount}\n              onChange={(e) => setWalletAmount(Math.max(1, parseInt(e.target.value) || 1))}\n              className=\"wallet-input\"\n            />\n            <button onClick={handleDeposit} className=\"wallet-btn\">Deposit</button>\n            <button onClick={handleWithdraw} className=\"wallet-btn outline\">Withdraw</button>\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n      {/* debug-info removed per request */}\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\">\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    {/* Cylindrical countdown bar within lane */}\n                    <div className=\"cyl-progress-wrap\" aria-label=\"Round countdown\">\n                      <div className={`cyl-progress ${cylShouldExplode ? 'explode' : ''}`}>\n                        <div className=\"cyl-core\"></div>\n                        <div className=\"cyl-fill\" style={{ width: `${countdownPercent}%` }}></div>\n                        <div className=\"cyl-gloss\"></div>\n                        <div className=\"cyl-ends cyl-left\"></div>\n                        <div className=\"cyl-ends cyl-right\"></div>\n                      </div>\n                      <div className=\"cyl-timer-label\">{timeLeft}s</div>\n                    </div>\n                    <div className={`aviator-plane waiting`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <h2>Next game in {timeLeft}s</h2>\n                  <div className=\"countdown-circle\">\n                    <span className=\"countdown-number\">{timeLeft}</span>\n                  </div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"playing-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                     <div className={`aviator-plane flying`}>\n                       ✈️\n                     </div>\n                   </div>\n                  <div className=\"multiplier-value\">\n                    {multiplier.toFixed(2)}x\n                  </div>\n                  <div className=\"game-status\">Flying!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"crashed-state\"\n              >\n                <div className=\"game-display crashed-anim\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane crashed`}>\n                      💥\n                    </div>\n                  </div>\n                  <h2 className=\"crash-text animated\">CRASHED AT {Number(crashPoint || multiplier).toFixed(2)}x</h2>\n                  <div className=\"crash-burst\" aria-hidden=\"true\">\n                    <span></span><span></span><span></span><span></span><span></span>\n                  </div>\n                  <div className=\"game-status\">Game Over!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                  <div className=\"backend-info\">\n                    <small>Predetermined crash point from backend</small>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Betika-style Betting Panel */}\n        <div className=\"betting-panel\">\n          <div className=\"betting-controls-section\">\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">Ksh {formatMoney(balance)}</div>\n            </div>\n\n            <div className=\"stake-section\">\n              <div className=\"stake-label\">Stake</div>\n              <div className=\"stake-input-group\">\n                <input\n                  type=\"number\"\n                  value={betAmount}\n                  min=\"10\"\n                  max={balance}\n                  disabled={!(gameState === 'waiting' && timeLeft > 0)}\n                  onChange={(e) => setBetAmount(Math.max(10, parseInt(e.target.value) || 10))}\n                  className=\"stake-input\"\n                />\n                <button onClick={setMaxBet} disabled={!(gameState === 'waiting' && timeLeft > 0)} className=\"max-btn\">MAX</button>\n              </div>\n              <div className=\"stake-limits\">\n                <span>Min: Ksh 10</span>\n                <span>Max: Ksh {formatMoney(balance)}</span>\n              </div>\n            </div>\n\n            <button\n              onClick={placeBet}\n              disabled={gameState !== 'waiting' || timeLeft <= 0 || betAmount < 10 || betAmount > balance}\n              className={`place-bet-main-btn ${gameState === 'waiting' && timeLeft > 0 ? 'active' : 'disabled'}`}\n            >\n              {gameState === 'waiting' && timeLeft > 0 ? 'Bet' : 'Bet (locked)'}\n            </button>\n\n            <div className=\"auto-bet-section\">\n              <label className=\"auto-bet-label\">\n                <input \n                  type=\"checkbox\" \n                  checked={autoBet} \n                  onChange={(e) => handleAutoBetToggle(e.target.checked)}\n                />\n                Auto-Bet (next round)\n              </label>\n              {!autoBet && (\n                <div className=\"auto-bet-note\">Will NOT auto-place on next round</div>\n              )}\n            </div>\n          </div>\n\n          {/* Bet Slips Section */}\n          <div className=\"bet-slips-section\">\n            <div className=\"bet-slips-header\">\n              <h3>Your Bets (This Round)</h3>\n              <div className=\"active-count\">Active: {betSlips.filter(slip => slip.status === 'active').length}</div>\n            </div>\n\n            {betSlips.length === 0 ? (\n              <div className=\"no-bets-message\">Place a bet before takeoff to see it here.</div>\n            ) : (\n              <div className=\"bet-slips-list\">\n                {betSlips.map((slip) => (\n                  <div key={slip.id} className={`bet-slip ${slip.status}`}>\n                    <div className=\"bet-slip-info\">\n                      <div className=\"bet-stake\">Stake: <span className=\"stake-amount\">Ksh {formatMoney(slip.stake)}</span></div>\n                      <div className=\"bet-details\">Bet #{String(slip.id).slice(0, 8)} • Round #{slip.roundId}</div>\n                    </div>\n\n                    <div className=\"bet-slip-actions\">\n                      {slip.status === 'active' && (\n                        <>\n                          <div className=\"potential-win\">Potential: Ksh {formatMoney(slip.stake * multiplier)}</div>\n                          <button\n                            onClick={() => handleBetSlipCashout(slip.id)}\n                            disabled={gameState !== 'playing' || isCashingOut}\n                            className={`cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`}\n                          >\n                            Cashout @ {multiplier.toFixed(2)}x\n                          </button>\n                        </>\n                      )}\n                      {slip.status === 'cashed' && (\n                        <div className=\"cashed-info\">\n                          <div className=\"cashout-odds\">Cashed @ {slip.cashoutOdds?.toFixed(2)}x</div>\n                          <div className=\"win-amount\">+ Ksh {formatMoney(slip.winAmount)}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Aviator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}