{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoo\\\\Desktop\\\\betting\\\\betsite\\\\frontend\\\\src\\\\components\\\\Aviator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Attach JWT token if present\naxios.interceptors.request.use(config => {\n  try {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers = config.headers || {};\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  } catch (_) {}\n  return config;\n});\nconst Aviator = () => {\n  _s();\n  var _currentOdds$custom_c, _currentOdds$custom_c2;\n  // Game state from backend\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [isAutoCashout, setIsAutoCashout] = useState(false);\n  const [autoCashoutValue, setAutoCashoutValue] = useState(2.00);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [isBetQueued, setIsBetQueued] = useState(false);\n  const [queuedBetAmount, setQueuedBetAmount] = useState(10);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [currentOdds, setCurrentOdds] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [gamePhase, setGamePhase] = useState('waiting');\n\n  // Real-time polling intervals\n  const realtimeInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const isRunningRef = useRef(false);\n  const gameStateRef = useRef(gameState);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  // API calls\n  const extractApiError = error => {\n    try {\n      var _error$response, _error$response2;\n      const status = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n      const data = error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data;\n      const detail = (data === null || data === void 0 ? void 0 : data.error) || (data === null || data === void 0 ? void 0 : data.detail) || (data === null || data === void 0 ? void 0 : data.message);\n      if (status || detail) {\n        return `Error${status ? ` ${status}` : ''}: ${detail || 'Request failed'}`;\n      }\n      if (error !== null && error !== void 0 && error.message) return error.message;\n      return 'Request failed';\n    } catch (_) {\n      return 'Request failed';\n    }\n  };\n  const fetchBalance = async () => {\n    try {\n      console.log('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/`);\n      console.log('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n      setBalance(1000);\n    }\n  };\n  const fetchCurrentOdds = async () => {\n    try {\n      console.log('Fetching odds from:', `${API_BASE_URL}/api/aviator/current-odds/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/current-odds/`);\n      console.log('Odds response:', response.data);\n      setCurrentOdds(response.data);\n    } catch (error) {\n      var _error$response4;\n      console.error('Error fetching current odds:', error);\n      console.error('Error details:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n      setCurrentOdds(null);\n    }\n  };\n\n  // Calculate initial multiplier based on current game state and elapsed time\n  const calculateInitialMultiplier = game => {\n    if (!game) return 1.00;\n    const now = new Date();\n    if (game.status === 'waiting') {\n      // For waiting games, always start at 1.00x\n      return 1.00;\n    } else if (game.status === 'active') {\n      // For active games, calculate based on elapsed time since start\n      if (game.started_at) {\n        const started = new Date(game.started_at);\n        const elapsed = Math.floor((now - started) / 1000);\n        const calculatedMultiplier = 1.00 + elapsed * RATE_PER_SECOND;\n        const crashPoint = Number(game.crash_point);\n        console.log(`Calculating initial multiplier: elapsed=${elapsed}s, calculated=${calculatedMultiplier.toFixed(3)}x, crashPoint=${crashPoint}x`);\n\n        // Don't exceed crash point\n        if (Number.isFinite(crashPoint) && crashPoint > 1) {\n          const finalMultiplier = Math.min(calculatedMultiplier, crashPoint);\n          console.log(`Final initial multiplier: ${finalMultiplier.toFixed(3)}x`);\n          return finalMultiplier;\n        }\n        return calculatedMultiplier;\n      }\n      return 1.00;\n    } else if (game.status === 'crashed') {\n      // For crashed games, show the final crash point\n      return Number(game.crash_point) || 1.00;\n    }\n    return 1.00;\n  };\n\n  // Calculate remaining time for active games\n  const calculateRemainingTime = game => {\n    if (!game || game.status !== 'active' || !game.started_at) return 0;\n    const now = new Date();\n    const started = new Date(game.started_at);\n    const elapsed = Math.floor((now - started) / 1000);\n    const crashPoint = Number(game.crash_point);\n    if (Number.isFinite(crashPoint) && crashPoint > 1) {\n      // Calculate time to crash based on current multiplier\n      const currentMultiplier = 1.00 + elapsed * RATE_PER_SECOND;\n      if (currentMultiplier >= crashPoint) {\n        return 0; // Already crashed\n      }\n      const remainingMultiplier = crashPoint - currentMultiplier;\n      return Math.max(0, Math.ceil(remainingMultiplier / RATE_PER_SECOND));\n    }\n    return 0;\n  };\n  const fetchCurrentGame = async () => {\n    try {\n      console.log('Fetching game from:', `${API_BASE_URL}/api/aviator/current-game/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/current-game/`);\n      const game = response.data;\n      console.log('Game response:', game);\n      setCurrentGame(game);\n      setRoundNumber(game.round_number);\n\n      // Calculate initial multiplier based on current game state\n      const initialMultiplier = calculateInitialMultiplier(game);\n      setMultiplier(initialMultiplier);\n      if (game.status === 'waiting') {\n        setGameState('waiting');\n        setCrashPoint(Number(game.crash_point));\n        const created = new Date(game.created_at);\n        const now = new Date();\n        const elapsed = Math.floor((now - created) / 1000);\n        const remaining = Math.max(0, 10 - elapsed); // Changed from 5 to 10 seconds to match backend\n        setTimeLeft(remaining);\n        setCountdownEndAt(Date.now() + remaining * 1000);\n      } else if (game.status === 'active') {\n        setGameState('playing');\n        setCrashPoint(Number(game.crash_point));\n\n        // Calculate remaining time to crash\n        const remainingTime = calculateRemainingTime(game);\n        if (remainingTime <= 0) {\n          // Game should have crashed, update to crashed state\n          setGameState('crashed');\n          setMultiplier(Number(game.crash_point));\n        } else {\n          // Continue the game from current multiplier\n          console.log(`Game is active, continuing from ${initialMultiplier.toFixed(3)}x with ${remainingTime}s remaining`);\n        }\n      } else if (game.status === 'crashed') {\n        setGameState('crashed');\n        setCrashPoint(Number(game.crash_point));\n        setMultiplier(Number(game.crash_point));\n      }\n      return game;\n    } catch (error) {\n      var _error$response5;\n      console.error('Error fetching current game:', error);\n      console.error('Error details:', (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data);\n      return null;\n    }\n  };\n\n  // Raw fetch used when we need the latest crash point without altering UI state\n  const getCurrentGameRaw = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/current-game/`);\n      return response.data;\n    } catch (error) {\n      return null;\n    }\n  };\n  const fetchGameHistory = async () => {\n    try {\n      console.log('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      console.log('Game history response:', response.data);\n      // Ensure we store numeric crash points only\n      const numericHistory = (Array.isArray(response.data) ? response.data : []).map(game => Number(game === null || game === void 0 ? void 0 : game.crash_point)).filter(value => Number.isFinite(value));\n      setGameHistory(numericHistory);\n    } catch (error) {\n      var _error$response6;\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data);\n    }\n  };\n  const fetchBetHistory = async () => {\n    try {\n      console.log('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      console.log('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      var _error$response7;\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data);\n    }\n  };\n\n  // Place bet\n  const placeBet = async () => {\n    const notEnough = balance < betAmount;\n    const wrongState = gameState !== 'waiting';\n    const alreadyPlaced = isBetPlaced;\n    if (notEnough || wrongState || alreadyPlaced) {\n      if (notEnough) setError('Insufficient balance to place this bet.');else if (wrongState) setError('You can only place a bet during the waiting phase.');else if (alreadyPlaced) setError('Bet already placed for this round.');\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: Math.floor(betAmount)\n      });\n      setBalance(response.data.balance);\n      setIsBetPlaced(true);\n      setError(null);\n    } catch (error) {\n      console.error('Place bet failed:', error);\n      setError(extractApiError(error));\n      console.error('Error placing bet:', error);\n    }\n  };\n\n  // Cashout\n  const cashout = async () => {\n    if (isBetPlaced && gameState === 'playing') {\n      try {\n        const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n          round_number: roundNumber,\n          multiplier: multiplier\n        });\n        setBalance(response.data.balance);\n        setIsBetPlaced(false);\n        setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n        setError(null);\n      } catch (error) {\n        console.error('Cashout failed:', error);\n        setError(extractApiError(error));\n        console.error('Error cashing out:', error);\n      }\n    }\n  };\n\n  // Start new game\n  const startNewGame = () => {\n    // Ensure no overlapping countdowns\n    if (countdownInterval.current) {\n      clearInterval(countdownInterval.current);\n      countdownInterval.current = null;\n    }\n    if (currentGame && currentGame.crash_point) {\n      setCrashPoint(Number(currentGame.crash_point));\n      if (currentGame.status === 'waiting') {\n        // Game is waiting, start countdown\n        setGameState('waiting');\n        setMultiplier(1.00);\n        const created = new Date(currentGame.created_at);\n        const now = new Date();\n        const elapsed = Math.floor((now - created) / 1000);\n        const remaining = Math.max(0, 10 - elapsed); // 10 seconds waiting time\n        setTimeLeft(remaining);\n        const endAt = Date.now() + remaining * 1000;\n        setCountdownEndAt(endAt);\n        countdownInterval.current = setInterval(async () => {\n          const remainingMs = endAt - Date.now();\n          const secondsLeft = Math.max(0, Math.ceil(remainingMs / 1000));\n          setTimeLeft(prev => prev !== secondsLeft ? secondsLeft : prev);\n          if (secondsLeft <= 0) {\n            clearInterval(countdownInterval.current);\n            countdownInterval.current = null;\n            // Check backend status and start with proper initial multiplier\n            const latestGame = await getCurrentGameRaw();\n            if (latestGame && latestGame.status === 'active') {\n              const initialMul = calculateInitialMultiplier(latestGame);\n              startGame(latestGame.crash_point, initialMul);\n            } else {\n              await waitForCrashPointAndStart();\n            }\n          }\n        }, 100);\n      } else if (currentGame.status === 'active') {\n        // Game is already active, continue from current state\n        const initialMul = calculateInitialMultiplier(currentGame);\n        const remainingTime = calculateRemainingTime(currentGame);\n        if (remainingTime <= 0) {\n          // Game should have crashed\n          setGameState('crashed');\n          setMultiplier(Number(currentGame.crash_point));\n        } else {\n          // Continue the active game\n          startGame(currentGame.crash_point, initialMul);\n        }\n      } else if (currentGame.status === 'crashed') {\n        // Game has crashed, show final state\n        setGameState('crashed');\n        setMultiplier(Number(currentGame.crash_point));\n      }\n    } else {\n      // No game from backend yet; wait 5s, then try to fetch and start again\n      setGameState('waiting');\n      setMultiplier(1.00);\n      setTimeLeft(5);\n      const endAt = Date.now() + 5000;\n      setCountdownEndAt(endAt);\n      countdownInterval.current = setInterval(async () => {\n        const remainingMs = endAt - Date.now();\n        const secondsLeft = Math.max(0, Math.ceil(remainingMs / 1000));\n        setTimeLeft(prev => prev !== secondsLeft ? secondsLeft : prev);\n        if (secondsLeft <= 0) {\n          clearInterval(countdownInterval.current);\n          countdownInterval.current = null;\n          const latestGame = await getCurrentGameRaw();\n          if (latestGame && latestGame.status === 'active') {\n            const initialMul = calculateInitialMultiplier(latestGame);\n            startGame(latestGame.crash_point, initialMul);\n          } else {\n            await waitForCrashPointAndStart();\n          }\n        }\n      }, 100);\n    }\n  };\n\n  // Wait briefly for backend to provide a crash point, then start immediately\n  const waitForCrashPointAndStart = async fallbackCrashPoint => {\n    const startTime = Date.now();\n    const maxWaitMs = 5000;\n    let crashPointToUse = null;\n    while (Date.now() - startTime < maxWaitMs) {\n      const g = await getCurrentGameRaw();\n      if (g && Number(g.crash_point) > 1) {\n        crashPointToUse = Number(g.crash_point);\n        break;\n      }\n      // Small delay before next attempt\n      await new Promise(r => setTimeout(r, 250));\n    }\n    if (crashPointToUse == null && Number(fallbackCrashPoint) > 1) {\n      crashPointToUse = Number(fallbackCrashPoint);\n    }\n    if (crashPointToUse != null) {\n      startGame(crashPointToUse);\n    } else {\n      // If still no crash point, start a new waiting cycle\n      startNewGame();\n    }\n  };\n\n  // Start the actual game\n  const startGame = (backendCrashPoint, initialMultiplierOverride) => {\n    if (isRunningRef.current) return;\n    // Clear any prior timers\n    if (gameInterval.current) clearInterval(gameInterval.current);\n    if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    const numericCrashPoint = Number(backendCrashPoint);\n    const targetCrashPoint = Number.isFinite(numericCrashPoint) && numericCrashPoint > 1 ? numericCrashPoint : 1.5;\n    const startMultiplier = Number.isFinite(initialMultiplierOverride) && initialMultiplierOverride > 1.0 ? initialMultiplierOverride : 1.00;\n    console.log('Starting game with crash point:', targetCrashPoint, 'initial multiplier:', startMultiplier);\n    setGameState('playing');\n    setMultiplier(startMultiplier);\n    isRunningRef.current = true;\n\n    // Safety timeout in case interval misses the boundary, using configured tick/speed\n    const estimatedTicks = Math.max(0, Math.ceil((targetCrashPoint - startMultiplier) / MULTIPLIER_INCREMENT));\n    const estimatedMsToCrash = estimatedTicks * TICK_MS + 200;\n    gameTimeout.current = setTimeout(() => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      setGameState('crashed');\n      setGameHistory(prev => [targetCrashPoint, ...prev.slice(0, 9)]);\n      isRunningRef.current = false;\n    }, estimatedMsToCrash);\n    gameInterval.current = setInterval(() => {\n      setMultiplier(prev => {\n        const newMultiplier = prev + MULTIPLIER_INCREMENT;\n        if (newMultiplier >= targetCrashPoint) {\n          clearInterval(gameInterval.current);\n          if (gameTimeout.current) clearTimeout(gameTimeout.current);\n          setGameState('crashed');\n          setGameHistory(prev => [targetCrashPoint, ...prev.slice(0, 9)]);\n          isRunningRef.current = false;\n          if (isBetPlaced) {\n            setIsBetPlaced(false);\n            setBetHistory(prev => [{\n              round: roundNumber,\n              amount: betAmount,\n              result: 'crash',\n              cashoutMultiplier: null,\n              payout: 0,\n              profit: -betAmount\n            }, ...prev.slice(0, 19)]);\n          }\n          return targetCrashPoint;\n        }\n        if (isAutoCashout && newMultiplier >= autoCashoutValue) {\n          cashout();\n        }\n        return newMultiplier;\n      });\n    }, TICK_MS);\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n  const addChip = amount => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  const clearBet = () => {\n    setBetAmount(1);\n  };\n  const queueBetForNextRound = () => {\n    if (!isBetPlaced && balance >= betAmount) {\n      setQueuedBetAmount(betAmount);\n      setIsBetQueued(true);\n    }\n  };\n  const cancelQueuedBet = () => {\n    setIsBetQueued(false);\n  };\n\n  // Effects\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      // Refresh relevant data at the end of each round\n      Promise.all([fetchBalance().catch(() => undefined), fetchGameHistory().catch(() => undefined), fetchBetHistory().catch(() => undefined)]).finally(() => {\n        startNewGame();\n      });\n    }\n  }, [gameState]);\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (countdownInterval.current) clearInterval(countdownInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates (run once on mount)\n  useEffect(() => {\n    console.log('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    const initializeComponent = async () => {\n      try {\n        console.log('Starting API calls...');\n        await Promise.all([fetchBalance(), fetchCurrentOdds(), fetchCurrentGame().catch(() => undefined), fetchGameHistory(), fetchBetHistory()]);\n        console.log('All API calls completed');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        console.log('Component initialization complete');\n      }\n    };\n    initializeComponent();\n\n    // Check for game updates every 2 seconds (ignore failures). Avoid disrupting local transitions.\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    gameCheckInterval.current = setInterval(async () => {\n      try {\n        // Use the sync endpoint for better synchronization\n        const response = await axios.get(`${API_BASE_URL}/api/aviator/sync/`);\n        const syncData = response.data;\n        const game = syncData.game;\n\n        // Update round number and crash point\n        setRoundNumber(game.round_number);\n        setCrashPoint(Number(game.crash_point));\n\n        // Only update game state if we're in waiting phase to avoid disrupting active games\n        if (gameStateRef.current === 'waiting') {\n          if (game.status === 'active') {\n            // Game has started, calculate initial multiplier and continue\n            const initialMul = calculateInitialMultiplier(game);\n            const remainingTime = calculateRemainingTime(game);\n            if (remainingTime > 0) {\n              console.log(`Game started, continuing from ${initialMul.toFixed(3)}x`);\n              startGame(game.crash_point, initialMul);\n            }\n          }\n        }\n      } catch (error) {\n        // Ignore sync errors to avoid disrupting game flow\n        console.log('Sync check failed (non-critical):', error.message);\n      }\n    }, 2000);\n\n    // Initial game start - check if we need to start immediately or wait\n    const timer = setTimeout(async () => {\n      console.log('Starting initial game...');\n\n      // Check if we already have a game state that needs immediate handling\n      if (currentGame) {\n        if (currentGame.status === 'active') {\n          // Game is already active, continue from current state\n          const initialMul = calculateInitialMultiplier(currentGame);\n          const remainingTime = calculateRemainingTime(currentGame);\n          if (remainingTime <= 0) {\n            // Game should have crashed, update state\n            setGameState('crashed');\n            setMultiplier(Number(currentGame.crash_point));\n          } else {\n            // Continue the active game\n            startGame(currentGame.crash_point, initialMul);\n          }\n        } else {\n          // Start normal game flow\n          startNewGame();\n        }\n      } else {\n        // No game data yet, start normal flow\n        startNewGame();\n      }\n    }, 1000);\n    return () => {\n      console.log('Cleaning up Aviator component');\n      clearTimeout(timer);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    };\n  }, []);\n  console.log('Rendering Aviator component, currentOdds:', currentOdds, 'isLoading:', isLoading);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading Aviator Game...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: \"\\u23F3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Connecting to backend...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aviator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Aviator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-display\",\n        children: [\"Balance: $\", balance.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"API Base: \", API_BASE_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Current Odds: \", currentOdds ? currentOdds.name : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Game State: \", gameState]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        children: [\"Round: #\", roundNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiplier-display\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          initial: false,\n          children: [gameState === 'waiting' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"waiting-state\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Next game in \", timeLeft, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"countdown-circle\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: timeLeft\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 675,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"round-info\",\n              children: [\"Round #\", roundNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 677,\n              columnNumber: 17\n            }, this), currentOdds && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"odds-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"Using: \", currentOdds.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 680,\n                columnNumber: 21\n              }, this), currentOdds.use_custom_points && /*#__PURE__*/_jsxDEV(\"small\", {\n                children: [\"Custom Points: \", ((_currentOdds$custom_c = currentOdds.custom_crash_points) === null || _currentOdds$custom_c === void 0 ? void 0 : _currentOdds$custom_c.split(',').length) || 0]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 682,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 19\n            }, this)]\n          }, \"waiting\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: false,\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            className: \"playing-state\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"multiplier-text\",\n              children: [multiplier.toFixed(2), \"x\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(motion.div, {\n              className: \"airplane\",\n              animate: {\n                y: [0, -20, 0],\n                rotate: [0, 5, -5, 0]\n              },\n              transition: {\n                duration: 2,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              },\n              children: \"\\u2708\\uFE0F\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"round-info\",\n              children: [\"Round #\", roundNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 17\n            }, this)]\n          }, \"playing\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 15\n          }, this), gameState === 'crashed' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: false,\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            className: \"crashed-state\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"crash-text\",\n              children: [\"CRASHED AT \", Number.isFinite(Number(crashPoint)) ? Number(crashPoint).toFixed(2) : String(crashPoint), \"x\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crash-animation\",\n              children: \"\\uD83D\\uDCA5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"round-info\",\n              children: [\"Round #\", roundNumber]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"backend-info\",\n              children: /*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"Predetermined crash point from backend\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 730,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 17\n            }, this)]\n          }, \"crashed\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"betting-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-amount-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: halfBet,\n            className: \"bet-btn\",\n            children: \"\\xBD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetBet,\n            className: \"bet-btn\",\n            children: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: doubleBet,\n            className: \"bet-btn\",\n            children: \"2\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-input\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: betAmount,\n            onChange: e => setBetAmount(Math.max(1, parseInt(e.target.value) || 1)),\n            min: \"1\",\n            max: balance,\n            className: \"bet-amount-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 745,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quick-chips\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(1),\n            children: \"+1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(5),\n            children: \"+5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(10),\n            children: \"+10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(50),\n            children: \"+50\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: () => addChip(100),\n            children: \"+100\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip\",\n            onClick: setMaxBet,\n            children: \"Max\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"chip outline\",\n            onClick: clearBet,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 762,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"action-buttons\",\n          children: [!isBetPlaced && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: placeBet,\n            className: \"place-bet-btn\",\n            disabled: gameState !== 'waiting' || balance < betAmount,\n            title: gameState !== 'waiting' ? 'You can only place a bet during the waiting phase.' : balance < betAmount ? 'Insufficient balance.' : 'Place your bet.',\n            children: [\"Place Bet $\", betAmount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 15\n          }, this), isBetPlaced && gameState === 'playing' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: cashout,\n            className: \"cashout-btn\",\n            children: [\"Cashout $\", (betAmount * multiplier).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 15\n          }, this), !isBetPlaced && gameState !== 'waiting' && (isBetQueued ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"queued-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"queued-badge\",\n              children: [\"Queued $\", queuedBetAmount, \" for next round\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: cancelQueuedBet,\n              className: \"queue-cancel-btn\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 793,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: queueBetForNextRound,\n            className: \"queue-bet-btn\",\n            children: [\"Queue $\", betAmount, \" for next round\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-summary\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-line\",\n            children: [\"Potential at \", autoCashoutValue.toFixed(2), \"x: $\", (betAmount * autoCashoutValue).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-status ${isBetPlaced ? 'active' : isBetQueued ? 'queued' : 'idle'}`,\n            children: isBetPlaced ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Active in Round \", roundNumber]\n            }, void 0, true) : isBetQueued ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"Queued $\", queuedBetAmount, \" for next round\"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"No active bet\"\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auto-cashout-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"auto-cashout-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isAutoCashout,\n            onChange: e => setIsAutoCashout(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 13\n          }, this), \"Auto Cashout at\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: autoCashoutValue,\n          onChange: e => setAutoCashoutValue(parseFloat(e.target.value) || 2.00),\n          min: \"1.01\",\n          step: \"0.01\",\n          className: \"auto-cashout-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 828,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recent Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 841,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-grid\",\n        children: gameHistory.map((result, index) => {\n          const num = Number(result);\n          const safeNum = Number.isFinite(num) ? num : 0;\n          const color = safeNum >= 2 ? 'green' : safeNum >= 1.5 ? 'orange' : 'red';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `history-item ${color}`,\n            children: [Number.isFinite(num) ? num.toFixed(2) : String(result), \"x\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bet-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Bet History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bet-history-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Round\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Stake\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Outcome\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Payout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 863,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Profit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 11\n        }, this), betHistory.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-history-empty\",\n          children: \"No bets yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 13\n        }, this), betHistory.map((b, i) => {\n          var _b$game;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"#\", b.round || ((_b$game = b.game) === null || _b$game === void 0 ? void 0 : _b$game.round_number)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.amount).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 872,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 873,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"$\", Number(b.payout).toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 874,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"profit\",\n              children: `${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 875,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 13\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 858,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 856,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Place your bet before the game starts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Watch the multiplier increase from 1.00x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 885,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Cash out before it crashes to win!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Set auto cashout for automatic wins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"backend-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Backend Controlled:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 890,\n          columnNumber: 11\n        }, this), \" Crash points are predetermined from your custom odds configuration\", currentOdds && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"odds-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Current Odds Set:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 893,\n              columnNumber: 18\n            }, this), \" \", currentOdds.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 893,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Early Crash:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 18\n            }, this), \" \", currentOdds.early_crash_probability, \"% (\", currentOdds.early_crash_min, \"x - \", currentOdds.early_crash_max, \"x)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 894,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"High Crash:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 895,\n              columnNumber: 18\n            }, this), \" \", currentOdds.high_crash_min, \"x - \", currentOdds.high_crash_max, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 895,\n            columnNumber: 15\n          }, this), currentOdds.use_custom_points && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Custom Points:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 897,\n              columnNumber: 20\n            }, this), \" \", ((_currentOdds$custom_c2 = currentOdds.custom_crash_points) === null || _currentOdds$custom_c2 === void 0 ? void 0 : _currentOdds$custom_c2.split(',').length) || 0, \" predetermined crash points\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 897,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 640,\n    columnNumber: 5\n  }, this);\n};\n_s(Aviator, \"U8uvVPgapZg+vKMxOYBnGegPisM=\");\n_c = Aviator;\nexport default Aviator;\nvar _c;\n$RefreshReg$(_c, \"Aviator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","AnimatePresence","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","_","Aviator","_s","_currentOdds$custom_c","_currentOdds$custom_c2","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","isAutoCashout","setIsAutoCashout","autoCashoutValue","setAutoCashoutValue","roundNumber","setRoundNumber","isBetQueued","setIsBetQueued","queuedBetAmount","setQueuedBetAmount","betHistory","setBetHistory","currentGame","setCurrentGame","error","setError","currentOdds","setCurrentOdds","isLoading","setIsLoading","gamePhase","setGamePhase","realtimeInterval","gameCheckInterval","isRunningRef","gameStateRef","current","extractApiError","_error$response","_error$response2","status","response","data","detail","message","fetchBalance","console","log","get","_error$response3","fetchCurrentOdds","_error$response4","calculateInitialMultiplier","game","now","Date","started_at","started","elapsed","Math","floor","calculatedMultiplier","RATE_PER_SECOND","Number","crash_point","toFixed","isFinite","finalMultiplier","min","calculateRemainingTime","currentMultiplier","remainingMultiplier","max","ceil","fetchCurrentGame","round_number","initialMultiplier","created","created_at","remaining","setCountdownEndAt","remainingTime","_error$response5","getCurrentGameRaw","fetchGameHistory","numericHistory","Array","isArray","map","filter","value","_error$response6","fetchBetHistory","_error$response7","placeBet","notEnough","wrongState","alreadyPlaced","post","amount","cashout","prev","bet","slice","startNewGame","countdownInterval","clearInterval","endAt","setInterval","remainingMs","secondsLeft","latestGame","initialMul","startGame","waitForCrashPointAndStart","fallbackCrashPoint","startTime","maxWaitMs","crashPointToUse","g","Promise","r","setTimeout","backendCrashPoint","initialMultiplierOverride","gameInterval","gameTimeout","clearTimeout","numericCrashPoint","targetCrashPoint","startMultiplier","estimatedTicks","MULTIPLIER_INCREMENT","estimatedMsToCrash","TICK_MS","newMultiplier","round","result","cashoutMultiplier","payout","profit","doubleBet","halfBet","resetBet","addChip","next","setMaxBet","clearBet","queueBetForNextRound","cancelQueuedBet","all","catch","undefined","finally","initializeComponent","syncData","timer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","mode","initial","div","opacity","scale","animate","exit","use_custom_points","custom_crash_points","split","length","y","rotate","transition","duration","repeat","Infinity","ease","String","type","onChange","e","parseInt","target","disabled","title","checked","parseFloat","step","index","num","safeNum","color","b","i","_b$game","cashout_multiplier","early_crash_probability","early_crash_min","early_crash_max","high_crash_min","high_crash_max","_c","$RefreshReg$"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Attach JWT token if present\naxios.interceptors.request.use((config) => {\n  try {\n    const token = localStorage.getItem('accessToken');\n    if (token) {\n      config.headers = config.headers || {};\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  } catch (_) {}\n  return config;\n});\n\nconst Aviator = () => {\n  // Game state from backend\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [isAutoCashout, setIsAutoCashout] = useState(false);\n  const [autoCashoutValue, setAutoCashoutValue] = useState(2.00);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [isBetQueued, setIsBetQueued] = useState(false);\n  const [queuedBetAmount, setQueuedBetAmount] = useState(10);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [currentOdds, setCurrentOdds] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [gamePhase, setGamePhase] = useState('waiting');\n  \n  // Real-time polling intervals\n  const realtimeInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const isRunningRef = useRef(false);\n  const gameStateRef = useRef(gameState);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  // API calls\n  const extractApiError = (error) => {\n    try {\n      const status = error?.response?.status;\n      const data = error?.response?.data;\n      const detail = data?.error || data?.detail || data?.message;\n      if (status || detail) {\n        return `Error${status ? ` ${status}` : ''}: ${detail || 'Request failed'}`;\n      }\n      if (error?.message) return error.message;\n      return 'Request failed';\n    } catch (_) {\n      return 'Request failed';\n    }\n  };\n  const fetchBalance = async () => {\n    try {\n      console.log('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/`);\n      console.log('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      setBalance(1000);\n    }\n  };\n\n  const fetchCurrentOdds = async () => {\n    try {\n      console.log('Fetching odds from:', `${API_BASE_URL}/api/aviator/current-odds/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/current-odds/`);\n      console.log('Odds response:', response.data);\n      setCurrentOdds(response.data);\n    } catch (error) {\n      console.error('Error fetching current odds:', error);\n      console.error('Error details:', error.response?.data);\n      setCurrentOdds(null);\n    }\n  };\n\n  // Calculate initial multiplier based on current game state and elapsed time\n  const calculateInitialMultiplier = (game) => {\n    if (!game) return 1.00;\n    \n    const now = new Date();\n    \n    if (game.status === 'waiting') {\n      // For waiting games, always start at 1.00x\n      return 1.00;\n    } else if (game.status === 'active') {\n      // For active games, calculate based on elapsed time since start\n      if (game.started_at) {\n        const started = new Date(game.started_at);\n        const elapsed = Math.floor((now - started) / 1000);\n        const calculatedMultiplier = 1.00 + (elapsed * RATE_PER_SECOND);\n        const crashPoint = Number(game.crash_point);\n        \n        console.log(`Calculating initial multiplier: elapsed=${elapsed}s, calculated=${calculatedMultiplier.toFixed(3)}x, crashPoint=${crashPoint}x`);\n        \n        // Don't exceed crash point\n        if (Number.isFinite(crashPoint) && crashPoint > 1) {\n          const finalMultiplier = Math.min(calculatedMultiplier, crashPoint);\n          console.log(`Final initial multiplier: ${finalMultiplier.toFixed(3)}x`);\n          return finalMultiplier;\n        }\n        return calculatedMultiplier;\n      }\n      return 1.00;\n    } else if (game.status === 'crashed') {\n      // For crashed games, show the final crash point\n      return Number(game.crash_point) || 1.00;\n    }\n    \n    return 1.00;\n  };\n\n  // Calculate remaining time for active games\n  const calculateRemainingTime = (game) => {\n    if (!game || game.status !== 'active' || !game.started_at) return 0;\n    \n    const now = new Date();\n    const started = new Date(game.started_at);\n    const elapsed = Math.floor((now - started) / 1000);\n    const crashPoint = Number(game.crash_point);\n    \n    if (Number.isFinite(crashPoint) && crashPoint > 1) {\n      // Calculate time to crash based on current multiplier\n      const currentMultiplier = 1.00 + (elapsed * RATE_PER_SECOND);\n      if (currentMultiplier >= crashPoint) {\n        return 0; // Already crashed\n      }\n      const remainingMultiplier = crashPoint - currentMultiplier;\n      return Math.max(0, Math.ceil(remainingMultiplier / RATE_PER_SECOND));\n    }\n    \n    return 0;\n  };\n\n  const fetchCurrentGame = async () => {\n    try {\n      console.log('Fetching game from:', `${API_BASE_URL}/api/aviator/current-game/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/current-game/`);\n      const game = response.data;\n      console.log('Game response:', game);\n      setCurrentGame(game);\n      setRoundNumber(game.round_number);\n      \n      // Calculate initial multiplier based on current game state\n      const initialMultiplier = calculateInitialMultiplier(game);\n      setMultiplier(initialMultiplier);\n      \n      if (game.status === 'waiting') {\n        setGameState('waiting');\n        setCrashPoint(Number(game.crash_point));\n        const created = new Date(game.created_at);\n        const now = new Date();\n        const elapsed = Math.floor((now - created) / 1000);\n        const remaining = Math.max(0, 10 - elapsed); // Changed from 5 to 10 seconds to match backend\n        setTimeLeft(remaining);\n        setCountdownEndAt(Date.now() + remaining * 1000);\n      } else if (game.status === 'active') {\n        setGameState('playing');\n        setCrashPoint(Number(game.crash_point));\n        \n        // Calculate remaining time to crash\n        const remainingTime = calculateRemainingTime(game);\n        \n        if (remainingTime <= 0) {\n          // Game should have crashed, update to crashed state\n          setGameState('crashed');\n          setMultiplier(Number(game.crash_point));\n        } else {\n          // Continue the game from current multiplier\n          console.log(`Game is active, continuing from ${initialMultiplier.toFixed(3)}x with ${remainingTime}s remaining`);\n        }\n      } else if (game.status === 'crashed') {\n        setGameState('crashed');\n        setCrashPoint(Number(game.crash_point));\n        setMultiplier(Number(game.crash_point));\n      }\n      return game;\n    } catch (error) {\n      console.error('Error fetching current game:', error);\n      console.error('Error details:', error.response?.data);\n      return null;\n    }\n  };\n\n  // Raw fetch used when we need the latest crash point without altering UI state\n  const getCurrentGameRaw = async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/current-game/`);\n      return response.data;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      console.log('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      console.log('Game history response:', response.data);\n      // Ensure we store numeric crash points only\n      const numericHistory = (Array.isArray(response.data) ? response.data : [])\n        .map(game => Number(game?.crash_point))\n        .filter(value => Number.isFinite(value));\n      setGameHistory(numericHistory);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      console.log('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      console.log('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Place bet\n  const placeBet = async () => {\n    const notEnough = balance < betAmount;\n    const wrongState = gameState !== 'waiting';\n    const alreadyPlaced = isBetPlaced;\n    if (notEnough || wrongState || alreadyPlaced) {\n      if (notEnough) setError('Insufficient balance to place this bet.');\n      else if (wrongState) setError('You can only place a bet during the waiting phase.');\n      else if (alreadyPlaced) setError('Bet already placed for this round.');\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: Math.floor(betAmount)\n      });\n      setBalance(response.data.balance);\n      setIsBetPlaced(true);\n      setError(null);\n    } catch (error) {\n      console.error('Place bet failed:', error);\n      setError(extractApiError(error));\n      console.error('Error placing bet:', error);\n    }\n  };\n\n  // Cashout\n  const cashout = async () => {\n    if (isBetPlaced && gameState === 'playing') {\n      try {\n        const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n          round_number: roundNumber,\n          multiplier: multiplier\n        });\n        \n        setBalance(response.data.balance);\n        setIsBetPlaced(false);\n        setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n        setError(null);\n      } catch (error) {\n        console.error('Cashout failed:', error);\n        setError(extractApiError(error));\n        console.error('Error cashing out:', error);\n      }\n    }\n  };\n\n  // Start new game\n  const startNewGame = () => {\n    // Ensure no overlapping countdowns\n    if (countdownInterval.current) {\n      clearInterval(countdownInterval.current);\n      countdownInterval.current = null;\n    }\n    \n    if (currentGame && currentGame.crash_point) {\n      setCrashPoint(Number(currentGame.crash_point));\n      \n      if (currentGame.status === 'waiting') {\n        // Game is waiting, start countdown\n        setGameState('waiting');\n        setMultiplier(1.00);\n        \n        const created = new Date(currentGame.created_at);\n        const now = new Date();\n        const elapsed = Math.floor((now - created) / 1000);\n        const remaining = Math.max(0, 10 - elapsed); // 10 seconds waiting time\n        setTimeLeft(remaining);\n        const endAt = Date.now() + remaining * 1000;\n        setCountdownEndAt(endAt);\n        \n        countdownInterval.current = setInterval(async () => {\n          const remainingMs = endAt - Date.now();\n          const secondsLeft = Math.max(0, Math.ceil(remainingMs / 1000));\n          setTimeLeft(prev => (prev !== secondsLeft ? secondsLeft : prev));\n          if (secondsLeft <= 0) {\n            clearInterval(countdownInterval.current);\n            countdownInterval.current = null;\n            // Check backend status and start with proper initial multiplier\n            const latestGame = await getCurrentGameRaw();\n            if (latestGame && latestGame.status === 'active') {\n              const initialMul = calculateInitialMultiplier(latestGame);\n              startGame(latestGame.crash_point, initialMul);\n            } else {\n              await waitForCrashPointAndStart();\n            }\n          }\n        }, 100);\n        \n      } else if (currentGame.status === 'active') {\n        // Game is already active, continue from current state\n        const initialMul = calculateInitialMultiplier(currentGame);\n        const remainingTime = calculateRemainingTime(currentGame);\n        \n        if (remainingTime <= 0) {\n          // Game should have crashed\n          setGameState('crashed');\n          setMultiplier(Number(currentGame.crash_point));\n        } else {\n          // Continue the active game\n          startGame(currentGame.crash_point, initialMul);\n        }\n        \n      } else if (currentGame.status === 'crashed') {\n        // Game has crashed, show final state\n        setGameState('crashed');\n        setMultiplier(Number(currentGame.crash_point));\n      }\n    } else {\n      // No game from backend yet; wait 5s, then try to fetch and start again\n      setGameState('waiting');\n      setMultiplier(1.00);\n      setTimeLeft(5);\n      const endAt = Date.now() + 5000;\n      setCountdownEndAt(endAt);\n      countdownInterval.current = setInterval(async () => {\n        const remainingMs = endAt - Date.now();\n        const secondsLeft = Math.max(0, Math.ceil(remainingMs / 1000));\n        setTimeLeft(prev => (prev !== secondsLeft ? secondsLeft : prev));\n        if (secondsLeft <= 0) {\n          clearInterval(countdownInterval.current);\n          countdownInterval.current = null;\n          const latestGame = await getCurrentGameRaw();\n          if (latestGame && latestGame.status === 'active') {\n            const initialMul = calculateInitialMultiplier(latestGame);\n            startGame(latestGame.crash_point, initialMul);\n          } else {\n            await waitForCrashPointAndStart();\n          }\n        }\n      }, 100);\n    }\n  };\n\n  // Wait briefly for backend to provide a crash point, then start immediately\n  const waitForCrashPointAndStart = async (fallbackCrashPoint) => {\n    const startTime = Date.now();\n    const maxWaitMs = 5000;\n    let crashPointToUse = null;\n    while (Date.now() - startTime < maxWaitMs) {\n      const g = await getCurrentGameRaw();\n      if (g && Number(g.crash_point) > 1) {\n        crashPointToUse = Number(g.crash_point);\n        break;\n      }\n      // Small delay before next attempt\n      await new Promise(r => setTimeout(r, 250));\n    }\n    if (crashPointToUse == null && Number(fallbackCrashPoint) > 1) {\n      crashPointToUse = Number(fallbackCrashPoint);\n    }\n    if (crashPointToUse != null) {\n      startGame(crashPointToUse);\n    } else {\n      // If still no crash point, start a new waiting cycle\n      startNewGame();\n    }\n  };\n\n  // Start the actual game\n  const startGame = (backendCrashPoint, initialMultiplierOverride) => {\n    if (isRunningRef.current) return;\n    // Clear any prior timers\n    if (gameInterval.current) clearInterval(gameInterval.current);\n    if (gameTimeout.current) clearTimeout(gameTimeout.current);\n\n    const numericCrashPoint = Number(backendCrashPoint);\n    const targetCrashPoint = Number.isFinite(numericCrashPoint) && numericCrashPoint > 1\n      ? numericCrashPoint\n      : 1.5;\n\n    const startMultiplier = Number.isFinite(initialMultiplierOverride) && initialMultiplierOverride > 1.0\n      ? initialMultiplierOverride\n      : 1.00;\n\n    console.log('Starting game with crash point:', targetCrashPoint, 'initial multiplier:', startMultiplier);\n    setGameState('playing');\n    setMultiplier(startMultiplier);\n    isRunningRef.current = true;\n\n    // Safety timeout in case interval misses the boundary, using configured tick/speed\n    const estimatedTicks = Math.max(0, Math.ceil((targetCrashPoint - startMultiplier) / MULTIPLIER_INCREMENT));\n    const estimatedMsToCrash = estimatedTicks * TICK_MS + 200;\n    gameTimeout.current = setTimeout(() => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      setGameState('crashed');\n      setGameHistory(prev => [targetCrashPoint, ...prev.slice(0, 9)]);\n      isRunningRef.current = false;\n    }, estimatedMsToCrash);\n\n    gameInterval.current = setInterval(() => {\n      setMultiplier(prev => {\n        const newMultiplier = prev + MULTIPLIER_INCREMENT;\n\n        if (newMultiplier >= targetCrashPoint) {\n          clearInterval(gameInterval.current);\n          if (gameTimeout.current) clearTimeout(gameTimeout.current);\n          setGameState('crashed');\n          setGameHistory(prev => [targetCrashPoint, ...prev.slice(0, 9)]);\n          isRunningRef.current = false;\n\n          if (isBetPlaced) {\n            setIsBetPlaced(false);\n            setBetHistory(prev => [\n              {\n                round: roundNumber,\n                amount: betAmount,\n                result: 'crash',\n                cashoutMultiplier: null,\n                payout: 0,\n                profit: -betAmount\n              },\n              ...prev.slice(0, 19)\n            ]);\n          }\n\n          return targetCrashPoint;\n        }\n\n        if (isAutoCashout && newMultiplier >= autoCashoutValue) {\n          cashout();\n        }\n\n        return newMultiplier;\n      });\n    }, TICK_MS);\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n  \n  const queueBetForNextRound = () => {\n    if (!isBetPlaced && balance >= betAmount) {\n      setQueuedBetAmount(betAmount);\n      setIsBetQueued(true);\n    }\n  };\n  \n  const cancelQueuedBet = () => {\n    setIsBetQueued(false);\n  };\n\n  // Effects\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      // Refresh relevant data at the end of each round\n      Promise.all([\n        fetchBalance().catch(() => undefined),\n        fetchGameHistory().catch(() => undefined),\n        fetchBetHistory().catch(() => undefined),\n      ]).finally(() => {\n        startNewGame();\n      });\n    }\n  }, [gameState]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (countdownInterval.current) clearInterval(countdownInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates (run once on mount)\n  useEffect(() => {\n    console.log('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        console.log('Starting API calls...');\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentOdds(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        console.log('All API calls completed');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        console.log('Component initialization complete');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Check for game updates every 2 seconds (ignore failures). Avoid disrupting local transitions.\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    gameCheckInterval.current = setInterval(async () => {\n      try {\n        // Use the sync endpoint for better synchronization\n        const response = await axios.get(`${API_BASE_URL}/api/aviator/sync/`);\n        const syncData = response.data;\n        const game = syncData.game;\n        \n        // Update round number and crash point\n        setRoundNumber(game.round_number);\n        setCrashPoint(Number(game.crash_point));\n        \n        // Only update game state if we're in waiting phase to avoid disrupting active games\n        if (gameStateRef.current === 'waiting') {\n          if (game.status === 'active') {\n            // Game has started, calculate initial multiplier and continue\n            const initialMul = calculateInitialMultiplier(game);\n            const remainingTime = calculateRemainingTime(game);\n            \n            if (remainingTime > 0) {\n              console.log(`Game started, continuing from ${initialMul.toFixed(3)}x`);\n              startGame(game.crash_point, initialMul);\n            }\n          }\n        }\n      } catch (error) {\n        // Ignore sync errors to avoid disrupting game flow\n        console.log('Sync check failed (non-critical):', error.message);\n      }\n    }, 2000);\n    \n    // Initial game start - check if we need to start immediately or wait\n    const timer = setTimeout(async () => {\n      console.log('Starting initial game...');\n      \n      // Check if we already have a game state that needs immediate handling\n      if (currentGame) {\n        if (currentGame.status === 'active') {\n          // Game is already active, continue from current state\n          const initialMul = calculateInitialMultiplier(currentGame);\n          const remainingTime = calculateRemainingTime(currentGame);\n          \n          if (remainingTime <= 0) {\n            // Game should have crashed, update state\n            setGameState('crashed');\n            setMultiplier(Number(currentGame.crash_point));\n          } else {\n            // Continue the active game\n            startGame(currentGame.crash_point, initialMul);\n          }\n        } else {\n          // Start normal game flow\n          startNewGame();\n        }\n      } else {\n        // No game data yet, start normal flow\n        startNewGame();\n      }\n    }, 1000);\n    \n    return () => {\n      console.log('Cleaning up Aviator component');\n      clearTimeout(timer);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    };\n  }, []);\n\n  console.log('Rendering Aviator component, currentOdds:', currentOdds, 'isLoading:', isLoading);\n\n  if (isLoading) {\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n          <h2>Loading Aviator Game...</h2>\n          <div className=\"loading-spinner\">⏳</div>\n          <p>Connecting to backend...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"balance-display\">\n          Balance: ${balance.toFixed(2)}\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n      <div className=\"debug-info\">\n        <small>API Base: {API_BASE_URL}</small>\n        <small>Current Odds: {currentOdds ? currentOdds.name : 'None'}</small>\n        <small>Game State: {gameState}</small>\n        <small>Round: #{roundNumber}</small>\n      </div>\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\" initial={false}>\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <h2>Next game in {timeLeft}s</h2>\n                <div className=\"countdown-circle\">\n                  <span>{timeLeft}</span>\n                </div>\n                <div className=\"round-info\">Round #{roundNumber}</div>\n                {currentOdds && (\n                  <div className=\"odds-info\">\n                    <small>Using: {currentOdds.name}</small>\n                    {currentOdds.use_custom_points && (\n                      <small>Custom Points: {currentOdds.custom_crash_points?.split(',').length || 0}</small>\n                    )}\n                  </div>\n                )}\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={false}\n                animate={{ opacity: 1, scale: 1 }}\n                className=\"playing-state\"\n              >\n                <h2 className=\"multiplier-text\">\n                  {multiplier.toFixed(2)}x\n                </h2>\n                <motion.div\n                  className=\"airplane\"\n                  animate={{\n                    y: [0, -20, 0],\n                    rotate: [0, 5, -5, 0]\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: \"easeInOut\"\n                  }}\n                >\n                  ✈️\n                </motion.div>\n                <div className=\"round-info\">Round #{roundNumber}</div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={false}\n                animate={{ opacity: 1, scale: 1 }}\n                className=\"crashed-state\"\n              >\n                <h2 className=\"crash-text\">CRASHED AT {Number.isFinite(Number(crashPoint)) ? Number(crashPoint).toFixed(2) : String(crashPoint)}x</h2>\n                <div className=\"crash-animation\">\n                  💥\n                </div>\n                <div className=\"round-info\">Round #{roundNumber}</div>\n                <div className=\"backend-info\">\n                  <small>Predetermined crash point from backend</small>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        <div className=\"betting-controls\">\n          <div className=\"bet-amount-controls\">\n            <button onClick={halfBet} className=\"bet-btn\">½</button>\n            <button onClick={resetBet} className=\"bet-btn\">Reset</button>\n            <button onClick={doubleBet} className=\"bet-btn\">2×</button>\n          </div>\n          \n          <div className=\"bet-input\">\n            <input\n              type=\"number\"\n              value={betAmount}\n              onChange={(e) => setBetAmount(Math.max(1, parseInt(e.target.value) || 1))}\n              min=\"1\"\n              max={balance}\n              className=\"bet-amount-input\"\n            />\n          </div>\n\n          <div className=\"quick-chips\">\n            <button className=\"chip\" onClick={() => addChip(1)}>+1</button>\n            <button className=\"chip\" onClick={() => addChip(5)}>+5</button>\n            <button className=\"chip\" onClick={() => addChip(10)}>+10</button>\n            <button className=\"chip\" onClick={() => addChip(50)}>+50</button>\n            <button className=\"chip\" onClick={() => addChip(100)}>+100</button>\n            <button className=\"chip\" onClick={setMaxBet}>Max</button>\n            <button className=\"chip outline\" onClick={clearBet}>Clear</button>\n          </div>\n          \n          <div className=\"action-buttons\">\n            {!isBetPlaced && (\n              <button\n                onClick={placeBet}\n                className=\"place-bet-btn\"\n                disabled={gameState !== 'waiting' || balance < betAmount}\n                title={\n                  gameState !== 'waiting'\n                    ? 'You can only place a bet during the waiting phase.'\n                    : balance < betAmount\n                    ? 'Insufficient balance.'\n                    : 'Place your bet.'\n                }\n              >\n                Place Bet ${betAmount}\n              </button>\n            )}\n            \n            {isBetPlaced && gameState === 'playing' && (\n              <button onClick={cashout} className=\"cashout-btn\">\n                Cashout ${(betAmount * multiplier).toFixed(2)}\n              </button>\n            )}\n\n            {!isBetPlaced && gameState !== 'waiting' && (\n              isBetQueued ? (\n                <div className=\"queued-controls\">\n                  <span className=\"queued-badge\">Queued ${queuedBetAmount} for next round</span>\n                  <button onClick={cancelQueuedBet} className=\"queue-cancel-btn\">Cancel</button>\n                </div>\n              ) : (\n                <button onClick={queueBetForNextRound} className=\"queue-bet-btn\">\n                  Queue ${betAmount} for next round\n                </button>\n              )\n            )}\n          </div>\n\n          <div className=\"bet-summary\">\n            <div className=\"summary-line\">\n              Potential at {autoCashoutValue.toFixed(2)}x: ${ (betAmount * autoCashoutValue).toFixed(2) }\n            </div>\n            <div className={`bet-status ${isBetPlaced ? 'active' : isBetQueued ? 'queued' : 'idle'}`}>\n              {isBetPlaced ? (\n                <>Active in Round {roundNumber}</>\n              ) : isBetQueued ? (\n                <>Queued ${queuedBetAmount} for next round</>\n              ) : (\n                <>No active bet</>\n              )}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"auto-cashout-section\">\n          <label className=\"auto-cashout-label\">\n            <input\n              type=\"checkbox\"\n              checked={isAutoCashout}\n              onChange={(e) => setIsAutoCashout(e.target.checked)}\n            />\n            Auto Cashout at\n          </label>\n          <input\n            type=\"number\"\n            value={autoCashoutValue}\n            onChange={(e) => setAutoCashoutValue(parseFloat(e.target.value) || 2.00)}\n            min=\"1.01\"\n            step=\"0.01\"\n            className=\"auto-cashout-input\"\n          />\n          <span>x</span>\n        </div>\n      </div>\n\n      <div className=\"game-history\">\n        <h3>Recent Results</h3>\n        <div className=\"history-grid\">\n          {gameHistory.map((result, index) => {\n            const num = Number(result);\n            const safeNum = Number.isFinite(num) ? num : 0;\n            const color = safeNum >= 2 ? 'green' : safeNum >= 1.5 ? 'orange' : 'red';\n            return (\n              <div key={index} className={`history-item ${color}`}>\n                {Number.isFinite(num) ? num.toFixed(2) : String(result)}x\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      <div className=\"bet-history\">\n        <h3>Your Bet History</h3>\n        <div className=\"bet-history-table\">\n          <div className=\"bet-history-header\">\n            <span>Round</span>\n            <span>Stake</span>\n            <span>Outcome</span>\n            <span>Payout</span>\n            <span>Profit</span>\n          </div>\n          {betHistory.length === 0 && (\n            <div className=\"bet-history-empty\">No bets yet</div>\n          )}\n          {betHistory.map((b, i) => (\n            <div className={`bet-history-row ${b.result === 'cashout' ? 'win' : 'loss'}`} key={i}>\n              <span>#{b.round || b.game?.round_number}</span>\n              <span>${Number(b.amount).toFixed(2)}</span>\n              <span>{b.result === 'cashout' ? `${Number(b.cashout_multiplier || b.cashoutMultiplier).toFixed(2)}x` : 'Crashed'}</span>\n              <span>${Number(b.payout).toFixed(2)}</span>\n              <span className=\"profit\">{`${b.profit >= 0 ? '+' : ''}${Number(b.profit).toFixed(2)}`}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"game-info\">\n        <h3>How to Play</h3>\n        <ul>\n          <li>Place your bet before the game starts</li>\n          <li>Watch the multiplier increase from 1.00x</li>\n          <li>Cash out before it crashes to win!</li>\n          <li>Set auto cashout for automatic wins</li>\n        </ul>\n        <div className=\"backend-info\">\n          <strong>Backend Controlled:</strong> Crash points are predetermined from your custom odds configuration\n          {currentOdds && (\n            <div className=\"odds-details\">\n              <p><strong>Current Odds Set:</strong> {currentOdds.name}</p>\n              <p><strong>Early Crash:</strong> {currentOdds.early_crash_probability}% ({currentOdds.early_crash_min}x - {currentOdds.early_crash_max}x)</p>\n              <p><strong>High Crash:</strong> {currentOdds.high_crash_min}x - {currentOdds.high_crash_max}x</p>\n              {currentOdds.use_custom_points && (\n                <p><strong>Custom Points:</strong> {currentOdds.custom_crash_points?.split(',').length || 0} predetermined crash points</p>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Aviator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}