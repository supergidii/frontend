{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Antoo\\\\Desktop\\\\betting\\\\betsite\\\\frontend\\\\src\\\\components\\\\Aviator.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Always attach Authorization header when token exists (backend ignores it for public endpoints)\naxios.interceptors.request.use(config => {\n  try {\n    const tok = localStorage.getItem('access_token');\n    if (tok) {\n      config.headers = config.headers || {};\n      config.headers['Authorization'] = `Bearer ${tok}`;\n    }\n  } catch (e) {}\n  return config;\n});\n\n// Optional: auto-redirect on auth errors\naxios.interceptors.response.use(resp => resp, error => {\n  var _error$response;\n  const status = error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status;\n  if (status === 401) {\n    // keep any existing intent; just send user to login\n    if (!localStorage.getItem('post_login_redirect')) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({\n        path: window.location.pathname\n      }));\n    }\n    // Don't hard redirect here to avoid loops during background polling\n  }\n  return Promise.reject(error);\n});\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = n => n.toLocaleString(undefined, {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\nconst Aviator = () => {\n  _s();\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  const [lastCrashPoint, setLastCrashPoint] = useState(null);\n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const lastAnimTimeRef = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n  const targetMultiplierRef = useRef(1.0);\n  const animationFrameRef = useRef(null);\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      var _error$response2;\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      // If unauthorized or network error, default to 0 until login\n      setBalance(0);\n    }\n  };\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      let didCrashThisTick = false;\n\n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n\n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n\n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n\n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n\n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n\n      // Only update upcoming crash point when not showing a crash banner\n      if (gameState !== 'crashed' && Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n\n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n\n      // Update game state only if it actually changed\n      // PRIORITIZE crash event regardless of phase to ensure banner shows\n      if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        var _ref, _gameData$crashed_at;\n        console.log('💥 Crash detected in fetchCurrentGame (prioritized):', gameData);\n        stateUpdates.gameState = 'crashed';\n        // Use the met crash value for the banner; do NOT overwrite with next round's crash point\n        const crashedValue = (_ref = (_gameData$crashed_at = gameData.crashed_at) !== null && _gameData$crashed_at !== void 0 ? _gameData$crashed_at : gameData.previous_crash_point) !== null && _ref !== void 0 ? _ref : gameData.crash_point;\n        if (crashedValue) {\n          const numericCrashedValue = Number(crashedValue);\n          if (!Number.isNaN(numericCrashedValue) && numericCrashedValue > 0) {\n            stateUpdates.multiplier = numericCrashedValue;\n            stateUpdates.crashPoint = numericCrashedValue;\n            setLastCrashPoint(numericCrashedValue);\n          }\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        didCrashThisTick = true;\n      } else if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        // Do not reset multiplier while UI is showing crashed state\n        if (gameState !== 'crashed') {\n          stateUpdates.multiplier = 1.00;\n        }\n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            // Avoid changing the countdown while showing crash; we'll refresh on transition\n            if (gameState !== 'crashed') {\n              stateUpdates.timeLeft = newTimeLeft;\n              lastCountdownUpdate.current = Date.now();\n            }\n          }\n        }\n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n          // New round: clear any legacy active bets and mark previous-round active slips as lost\n          setActiveBets([]);\n          setBetSlips(prev => prev.map(slip => slip.roundId !== gameData.round_number && slip.status === 'active' ? {\n            ...slip,\n            status: 'lost'\n          } : slip));\n\n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n          targetMultiplierRef.current = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n        // Client-side safeguard: if live multiplier reaches or exceeds target crash point, show crash immediately\n        const targetCrashPoint = Number(gameData.crash_point);\n        if (!Number.isNaN(targetCrashPoint) && typeof gameData.current_multiplier === 'number') {\n          if (gameData.current_multiplier >= targetCrashPoint) {\n            stateUpdates.gameState = 'crashed';\n            stateUpdates.multiplier = targetCrashPoint;\n            stateUpdates.crashPoint = targetCrashPoint;\n            stateUpdates.isBetPlaced = false;\n            stateUpdates.hasLocalActiveBet = false;\n            setLastCrashPoint(targetCrashPoint);\n            didCrashThisTick = true;\n          }\n        }\n      }\n\n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n\n      // If crash just happened, refresh recent history immediately and retry shortly after\n      if (didCrashThisTick) {\n        try {\n          await fetchGameHistory();\n        } catch (e) {\n          console.warn('Failed to refresh game history after crash:', e);\n        }\n        // Retry once after a short delay to ensure backend has persisted the crash\n        setTimeout(() => {\n          fetchGameHistory().catch(err => console.warn('Retry history refresh after crash failed:', err));\n        }, 800);\n      }\n\n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n\n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n\n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n\n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n\n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n\n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      return null;\n    }\n  };\n  const fetchGameHistory = async () => {\n    try {\n      var _response$data;\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.length);\n\n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data.map(game => Number(game.crash_point)).filter(point => !isNaN(point) && point > 0);\n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      var _error$response3;\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      let response;\n      try {\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      } catch (e) {\n        // Fallback for anonymous/testing\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history-public/?user_id=player_1`);\n      }\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      var _error$response4;\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    try {\n      var _response$data2, _response$data2$bet, _response$data3, _response$data3$bet, _response$data4, _response$data4$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1' // Simple user ID for anonymous betting\n      });\n      setBalance(response.data.balance);\n      setError(null);\n\n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$bet = _response$data2.bet) === null || _response$data2$bet === void 0 ? void 0 : _response$data2$bet.id) || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$bet = _response$data3.bet) === null || _response$data3$bet === void 0 ? void 0 : _response$data3$bet.id\n      };\n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n\n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if ((_response$data4 = response.data) !== null && _response$data4 !== void 0 && (_response$data4$bet = _response$data4.bet) !== null && _response$data4$bet !== void 0 && _response$data4$bet.id) {\n        setActiveBets(prev => [{\n          id: response.data.bet.id,\n          amount: Number(response.data.bet.amount)\n        }, ...prev]);\n      }\n\n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      var _error$response5, _error$response6, _error$response6$data;\n      const status = error === null || error === void 0 ? void 0 : (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status;\n      if (status === 401 || status === 403) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({\n          path: window.location.pathname,\n          action: 'placeBet',\n          payload: {\n            stake: betAmount\n          }\n        }));\n        window.location.href = '/login';\n        return;\n      }\n      setError((error === null || error === void 0 ? void 0 : (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || (error === null || error === void 0 ? void 0 : error.message) || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n\n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    setIsCashingOut(true);\n    try {\n      var _response$data5, _response$data5$bet;\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',\n        // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      setBalance(response.data.balance);\n      setError(null);\n\n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n\n      // Update legacy bet state\n      if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && (_response$data5$bet = _response$data5.bet) !== null && _response$data5$bet !== void 0 && _response$data5$bet.id) {\n        setActiveBets(prev => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n\n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n\n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      setError(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n  const addChip = amount => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  const clearBet = () => {\n    setBetAmount(1);\n  };\n\n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async betSlipId => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = enabled => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    try {\n      // Force refresh all data\n      await Promise.all([fetchBalance(), fetchCurrentGame(), fetchGameHistory(), fetchBetHistory()]);\n\n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wallet actions\n  const [walletAmount, setWalletAmount] = useState('');\n  const handleDeposit = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({\n        path: window.location.pathname,\n        action: 'deposit',\n        payload: {\n          amount: walletAmount\n        }\n      }));\n      window.location.href = '/login';\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/deposit/`, {\n        amount: walletAmount\n      });\n      setBalance(response.data.balance);\n    } catch (e) {\n      var _e$response, _e$response2, _e$response2$data;\n      console.error('Deposit failed', e);\n      if ((e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : _e$response.status) === 401) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({\n          path: window.location.pathname,\n          action: 'deposit',\n          payload: {\n            amount: walletAmount\n          }\n        }));\n        window.location.href = '/login';\n        return;\n      }\n      setError((e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.error) || 'Deposit failed. Please try again.');\n    }\n  };\n  const handleWithdraw = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({\n        path: window.location.pathname,\n        action: 'withdraw',\n        payload: {\n          amount: walletAmount\n        }\n      }));\n      window.location.href = '/login';\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/withdraw/`, {\n        amount: walletAmount\n      });\n      setBalance(response.data.balance);\n      setSuccess('Your withdrawal request has been received. Please note that due to high withdrawal activity today, processing may take a little longer than usual. Rest assured, your funds will be credited immediately once processing is complete. Thank you for your patience.');\n    } catch (e) {\n      var _e$response3, _e$response4, _e$response4$data;\n      console.error('Withdraw failed', e);\n      if ((e === null || e === void 0 ? void 0 : (_e$response3 = e.response) === null || _e$response3 === void 0 ? void 0 : _e$response3.status) === 401) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({\n          path: window.location.pathname,\n          action: 'withdraw',\n          payload: {\n            amount: walletAmount\n          }\n        }));\n        window.location.href = '/login';\n        return;\n      }\n      setError((e === null || e === void 0 ? void 0 : (_e$response4 = e.response) === null || _e$response4 === void 0 ? void 0 : (_e$response4$data = _e$response4.data) === null || _e$response4$data === void 0 ? void 0 : _e$response4$data.error) || 'Withdraw failed. Please try again.');\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n\n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n\n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n\n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if countdown is stuck during waiting state\n    if (gameStateRef.current === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state (state:', gameStateRef.current, ')');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if game state is stuck\n    if (gameStateRef.current === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n\n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameStateRef.current === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n\n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n\n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n\n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n\n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n\n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n    // Clear legacy active bets list so nothing remains active visually\n    setActiveBets([]);\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => slip.status === 'active' ? {\n      ...slip,\n      status: 'lost'\n    } : slip));\n\n    // Refresh bet history from backend to reflect losses\n    try {\n      await fetchBetHistory();\n    } catch (e) {\n      console.warn('Failed to refresh bet history on crash:', e);\n    }\n\n    // Optionally prefetch latest state so we have fresh round/crash info ready\n    try {\n      await fetchCurrentGame();\n    } catch (error) {\n      console.error('Error prefetching game after crash:', error);\n    }\n    console.log('✅ Crash handling complete - bets marked lost, awaiting next round');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition (show crash then transition)\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n\n      // Show crash for ~3s, then move to waiting and let backend drive countdown\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state (backend countdown)');\n        setGameState('waiting');\n        setMultiplier(1.00);\n        // Fetch latest state and refresh recent results to include last crash\n        fetchCurrentGame().catch(error => {\n          console.error('Error fetching game state after crash transition:', error);\n        });\n        fetchGameHistory().catch(error => {\n          console.warn('Error refreshing game history after crash transition:', error);\n        });\n      }, 3000);\n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n\n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n\n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch(error => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n\n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n\n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n\n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([fetchBalance(), fetchCurrentGame().catch(() => undefined), fetchGameHistory(), fetchBetHistory()]);\n\n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    initializeComponent();\n\n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n\n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n\n    // Start polling immediately\n    pollForUpdates();\n\n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n\n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    setupPolling();\n\n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n\n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n\n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  // Smooth multiplier animation toward backend target during playing state\n  useEffect(() => {\n    if (gameState !== 'playing') {\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n      lastAnimTimeRef.current = 0;\n      return;\n    }\n    let isCancelled = false;\n    const animate = timestamp => {\n      if (isCancelled || gameStateRef.current !== 'playing') return;\n      if (!lastAnimTimeRef.current) lastAnimTimeRef.current = timestamp;\n      const dtMs = timestamp - lastAnimTimeRef.current;\n      lastAnimTimeRef.current = timestamp;\n      const crashCap = Number(crashPoint) > 0 ? Number(crashPoint) : Infinity;\n      const backendTarget = Math.min(targetMultiplierRef.current || 1.0, crashCap);\n\n      // Increase at 0.05 per second to match backend\n      const increment = 0.05 * (dtMs / 1000);\n      const nextVal = Math.min(backendTarget, multiplier + increment);\n      if (nextVal !== multiplier) {\n        setMultiplier(nextVal);\n      }\n\n      // If we've reached the crash cap, let the normal crash handling flip state\n      if (nextVal >= crashCap && Number.isFinite(crashCap)) {\n        // no-op here; backend/client safeguard will set crashed\n      }\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      isCancelled = true;\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, [gameState, crashPoint, multiplier]);\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  if (isLoading) {\n    const isCrashLoading = gameState === 'loading_after_crash';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: isCrashLoading ? '💥' : '⏳'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1099,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Waiting duration used for countdown progress (seconds)\n  const WAIT_DURATION = 10;\n  const countdownPercent = Math.max(0, Math.min(100, Math.round(timeLeft / WAIT_DURATION * 100)));\n  const cylShouldExplode = gameState === 'crashed';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aviator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aviator-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Aviator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"balance-display\",\n          children: [\"Balance: Ksh \", balance.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `connection-indicator ${connectionStatus}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"connection-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1124,\n              columnNumber: 15\n            }, this), connectionStatus === 'connected' ? 'Live' : connectionStatus === 'disconnected' ? 'Reconnecting...' : connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: manualRefresh,\n            className: \"refresh-btn\",\n            disabled: isLoading,\n            title: \"Refresh game state\",\n            type: \"button\",\n            children: \"\\uD83D\\uDD04\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wallet-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            min: \"1\",\n            placeholder: \"Enter amount\",\n            value: walletAmount,\n            onChange: e => {\n              const v = e.target.value;\n              if (v === '' || Number(v) >= 1) {\n                setWalletAmount(v);\n              }\n            },\n            className: \"wallet-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => {\n              e.preventDefault();\n              handleDeposit();\n            },\n            className: \"wallet-btn\",\n            disabled: !walletAmount,\n            children: \"Deposit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => {\n              e.preventDefault();\n              handleWithdraw();\n            },\n            className: \"wallet-btn outline\",\n            disabled: !walletAmount,\n            children: \"Withdraw\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1154,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1116,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Error:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1160,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: [success, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSuccess(null),\n        className: \"error-close\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"multiplier-display\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: [gameState === 'waiting' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"waiting-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"cyl-progress-wrap\",\n                  \"aria-label\": \"Round countdown\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `cyl-progress ${cylShouldExplode ? 'explode' : ''}`,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-core\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1190,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-fill\",\n                      style: {\n                        width: `${countdownPercent}%`\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1191,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-gloss\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1192,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-ends cyl-left\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1193,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cyl-ends cyl-right\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1194,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1189,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cyl-timer-label\",\n                    children: [timeLeft, \"s\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1196,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1188,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane waiting`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1198,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1186,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Next game in \", timeLeft, \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1202,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"countdown-circle\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"countdown-number\",\n                  children: timeLeft\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1204,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1203,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1206,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1185,\n              columnNumber: 17\n            }, this)\n          }, \"waiting\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1178,\n            columnNumber: 15\n          }, this), gameState === 'playing' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"playing-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane flying`,\n                  children: \"\\u2708\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1221,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1220,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"multiplier-value\",\n                children: [multiplier.toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Flying!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1228,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1229,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 17\n            }, this)\n          }, \"playing\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1212,\n            columnNumber: 15\n          }, this), gameState === 'crashed' && /*#__PURE__*/_jsxDEV(motion.div, {\n            initial: {\n              opacity: 0,\n              scale: 0.8\n            },\n            animate: {\n              opacity: 1,\n              scale: 1\n            },\n            exit: {\n              opacity: 0,\n              scale: 0.8\n            },\n            className: \"crashed-state\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"game-display crashed-anim\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"aviator-plane-container\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `aviator-plane crashed`,\n                  children: \"\\uD83D\\uDCA5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1244,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1243,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"crash-text animated\",\n                children: [\"CRASHED AT \", Number((lastCrashPoint !== null && lastCrashPoint !== void 0 ? lastCrashPoint : crashPoint) || multiplier).toFixed(2), \"x\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1248,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"crash-burst\",\n                \"aria-hidden\": \"true\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 34\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 47\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 60\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1250,\n                  columnNumber: 73\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"game-status\",\n                children: \"Game Over!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1252,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"round-info\",\n                children: [\"Round #\", roundNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1253,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"backend-info\",\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Predetermined crash point from backend\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1255,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1254,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1242,\n              columnNumber: 17\n            }, this)\n          }, \"crashed\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 1235,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1176,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"betting-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"betting-controls-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"balance-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-label\",\n              children: \"Balance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"balance-amount\",\n              children: [\"Ksh \", formatMoney(balance)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1268,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stake-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-label\",\n              children: \"Stake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1272,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-input-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: betAmount,\n                min: \"10\",\n                max: balance,\n                disabled: !(gameState === 'waiting' && timeLeft > 0),\n                onChange: e => setBetAmount(Math.max(10, parseInt(e.target.value) || 10)),\n                className: \"stake-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1274,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: setMaxBet,\n                disabled: !(gameState === 'waiting' && timeLeft > 0),\n                className: \"max-btn\",\n                children: \"MAX\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1283,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1273,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"stake-limits\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Min: Ksh 10\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1286,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Max: Ksh \", formatMoney(balance)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1287,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1285,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => {\n              e.preventDefault();\n              placeBet();\n            },\n            disabled: gameState !== 'waiting' || timeLeft <= 0 || betAmount < 10 || betAmount > balance,\n            className: `place-bet-main-btn ${gameState === 'waiting' && timeLeft > 0 ? 'active' : 'disabled'}`,\n            children: gameState === 'waiting' && timeLeft > 0 ? 'Bet' : 'Bet (locked)'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"auto-bet-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"auto-bet-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: autoBet,\n                onChange: e => handleAutoBetToggle(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1302,\n                columnNumber: 17\n              }, this), \"Auto-Bet (next round)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1301,\n              columnNumber: 15\n            }, this), !autoBet && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"auto-bet-note\",\n              children: \"Will NOT auto-place on next round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1310,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1300,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bet-slips-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Your Bets\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1318,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"active-count\",\n              children: [\"Active: \", betSlips.filter(slip => slip.status === 'active').length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1319,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1317,\n            columnNumber: 13\n          }, this), betSlips.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-bets-message\",\n            children: \"Place a bet before takeoff to see it here.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1323,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bet-slips-list\",\n            children: betSlips.map(slip => {\n              var _slip$cashoutOdds;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `bet-slip ${slip.status}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-slip-info\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bet-stake\",\n                    children: [\"Stake: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"stake-amount\",\n                      children: [\"Ksh \", formatMoney(slip.stake)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1329,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1329,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"bet-details\",\n                    children: [\"Bet #\", String(slip.id).slice(0, 8), \" \\u2022 Round #\", slip.roundId]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1330,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1328,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"bet-slip-actions\",\n                  children: [slip.status === 'active' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"potential-win\",\n                      children: [\"Potential: Ksh \", formatMoney(slip.stake * multiplier)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1336,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      onClick: () => handleBetSlipCashout(slip.id),\n                      disabled: gameState !== 'playing' || isCashingOut,\n                      className: `cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`,\n                      children: [\"Cashout @ \", multiplier.toFixed(2), \"x\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1337,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true), slip.status === 'cashed' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"cashed-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"cashout-odds\",\n                      children: [\"Cashed @ \", (_slip$cashoutOdds = slip.cashoutOdds) === null || _slip$cashoutOdds === void 0 ? void 0 : _slip$cashoutOdds.toFixed(2), \"x\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1349,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"win-amount\",\n                      children: [\"+ Ksh \", formatMoney(slip.winAmount)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1350,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1348,\n                    columnNumber: 25\n                  }, this), slip.status === 'lost' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"lost-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"lost-label\",\n                      children: \"Lost\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1355,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"lost-amount\",\n                      children: [\"- Ksh \", formatMoney(slip.stake)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1356,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1354,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1333,\n                  columnNumber: 21\n                }, this)]\n              }, slip.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1327,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1325,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Recent Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1370,\n        columnNumber: 9\n      }, this), gameHistory.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-empty\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No game history yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1373,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: \"Games will appear here after they crash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1374,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1372,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-grid\",\n        children: gameHistory.map((result, index) => {\n          const numericResult = Number(result) || 1.0;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`,\n            children: [numericResult.toFixed(2), \"x\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1381,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1377,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1369,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1115,\n    columnNumber: 5\n  }, this);\n};\n_s(Aviator, \"vCHHZmp3qVZUJtl1fksrPD8Y68U=\");\n_c = Aviator;\nexport default Aviator;\nvar _c;\n$RefreshReg$(_c, \"Aviator\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","AnimatePresence","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","interceptors","request","use","config","tok","localStorage","getItem","headers","e","response","resp","error","_error$response","status","setItem","JSON","stringify","path","window","location","pathname","Promise","reject","debugLog","args","NODE_ENV","console","log","formatMoney","n","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","clamp","v","min","max","Math","generateBetId","a","random","toString","slice","b","Date","now","Aviator","_s","gameState","setGameState","multiplier","setMultiplier","betAmount","setBetAmount","balance","setBalance","isBetPlaced","setIsBetPlaced","gameHistory","setGameHistory","timeLeft","setTimeLeft","crashPoint","setCrashPoint","roundNumber","setRoundNumber","betHistory","setBetHistory","currentGame","setCurrentGame","setError","success","setSuccess","isLoading","setIsLoading","isCashingOut","setIsCashingOut","hasLocalActiveBet","setHasLocalActiveBet","activeBets","setActiveBets","connectionStatus","setConnectionStatus","pollingErrors","setPollingErrors","betSlips","setBetSlips","autoBet","setAutoBet","lastStake","setLastStake","lastCrashPoint","setLastCrashPoint","gameInterval","gameCheckInterval","gameTimeout","isRunningRef","lastUpdateTime","lastAnimTimeRef","isBetPlacedRef","hasLocalActiveBetRef","gameStateRef","pollingRetryCount","maxPollingRetries","lastSuccessfulPoll","heartbeatInterval","autoRefreshTimeout","consecutiveErrors","lastGameState","lastRoundNumber","periodicRefreshInterval","lastCountdownUpdate","lastBetStateUpdate","countdownStartDetected","previousTimeLeft","countdownStartTimeout","targetMultiplierRef","animationFrameRef","fetchBalance","get","data","_error$response2","fetchCurrentGame","isRetry","gameData","backendStatus","effectivePhase","phase","didCrashThisTick","current","round_number","time_remaining","current_multiplier","isNewRound","Number","crash_point","stateUpdates","game_crashed","_ref","_gameData$crashed_at","crashedValue","crashed_at","previous_crash_point","numericCrashedValue","isNaN","newTimeLeft","ceil","prev","map","slip","roundId","setTimeout","placeBet","targetCrashPoint","Object","entries","forEach","key","value","fetchGameHistory","warn","catch","err","checkActiveBet","abs","scheduleAutoRefresh","_response$data","length","crashPoints","game","filter","point","_error$response3","fetchBetHistory","_error$response4","hasActiveBet","has_active_bet","_response$data2","_response$data2$bet","_response$data3","_response$data3$bet","_response$data4","_response$data4$bet","post","amount","user_id","betSlip","id","bet","stake","placedAt","cashedAt","cashoutOdds","winAmount","backendBetId","_error$response5","_error$response6","_error$response6$data","action","payload","href","message","cashout","specificBetId","_response$data5","_response$data5$bet","bet_id","round","remaining","_error$response7","_error$response7$data","doubleBet","halfBet","floor","resetBet","addChip","next","setMaxBet","clearBet","handleBetSlipCashout","betSlipId","find","handleAutoBetToggle","enabled","manualRefresh","all","walletAmount","setWalletAmount","handleDeposit","accessToken","_e$response","_e$response2","_e$response2$data","handleWithdraw","_e$response3","_e$response4","_e$response4$data","clearTimeout","checkForAutoRefresh","timeSinceLastPoll","timeSinceCountdownUpdate","timeSinceBetStateUpdate","startPeriodicAutoRefresh","clearInterval","setInterval","detectCountdownStart","isNewCountdown","isNewRoundCountdown","handleGameCrash","crashTimeout","transitionTimeout","immediateCheck","countdownCheck","cancelAnimationFrame","initializeComponent","pollForUpdates","pollInterval","setupPolling","pollFrequency","statusCheckInterval","currentFrequency","isCancelled","animate","timestamp","dtMs","crashCap","Infinity","backendTarget","increment","nextVal","isFinite","requestAnimationFrame","isCrashLoading","className","children","fileName","_jsxFileName","lineNumber","columnNumber","WAIT_DURATION","countdownPercent","cylShouldExplode","toFixed","onClick","disabled","title","type","placeholder","onChange","target","preventDefault","mode","div","initial","opacity","scale","exit","style","width","parseInt","checked","_slip$cashoutOdds","String","result","index","numericResult","_c","$RefreshReg$"],"sources":["C:/Users/Antoo/Desktop/betting/betsite/frontend/src/components/Aviator.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport axios from 'axios';\nimport './Aviator.css';\n\n// Set the base URL for API calls (env override, default to local backend)\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Always attach Authorization header when token exists (backend ignores it for public endpoints)\naxios.interceptors.request.use((config) => {\n  try {\n    const tok = localStorage.getItem('access_token');\n    if (tok) {\n      config.headers = config.headers || {};\n      config.headers['Authorization'] = `Bearer ${tok}`;\n    }\n  } catch (e) {}\n  return config;\n});\n\n// Optional: auto-redirect on auth errors\naxios.interceptors.response.use(\n  (resp) => resp,\n  (error) => {\n    const status = error?.response?.status;\n    if (status === 401) {\n      // keep any existing intent; just send user to login\n      if (!localStorage.getItem('post_login_redirect')) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname }));\n      }\n      // Don't hard redirect here to avoid loops during background polling\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Debug logging helper - only logs in development\nconst debugLog = (...args) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...args);\n  }\n};\n\n// Helper functions for Betika-style flow\nconst formatMoney = (n) => n.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\nconst clamp = (v, min, max) => Math.min(max, Math.max(min, v));\n\n// Generate unique bet ID\nconst generateBetId = () => {\n  const a = Math.random().toString(36).slice(2, 9);\n  const b = Math.random().toString(36).slice(2, 9);\n  return `${Date.now()}-${a}${b}`;\n};\n\nconst Aviator = () => {\n  const [gameState, setGameState] = useState('waiting');\n  const [multiplier, setMultiplier] = useState(1.00);\n  const [betAmount, setBetAmount] = useState(10);\n  const [balance, setBalance] = useState(1000);\n  const [isBetPlaced, setIsBetPlaced] = useState(false);\n  const [gameHistory, setGameHistory] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(5);\n  const [crashPoint, setCrashPoint] = useState(0);\n  const [roundNumber, setRoundNumber] = useState(0);\n  const [betHistory, setBetHistory] = useState([]);\n  const [currentGame, setCurrentGame] = useState(null);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isCashingOut, setIsCashingOut] = useState(false);\n  const [hasLocalActiveBet, setHasLocalActiveBet] = useState(false);\n  const [activeBets, setActiveBets] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('connected');\n  const [pollingErrors, setPollingErrors] = useState(0);\n  const [betSlips, setBetSlips] = useState([]); // Betika-style bet slips\n  const [autoBet, setAutoBet] = useState(false);\n  const [lastStake, setLastStake] = useState(10);\n  const [lastCrashPoint, setLastCrashPoint] = useState(null);\n  \n  const gameInterval = useRef(null);\n  const gameCheckInterval = useRef(null);\n  const gameTimeout = useRef(null);\n  const isRunningRef = useRef(false);\n  const lastUpdateTime = useRef(0);\n  const lastAnimTimeRef = useRef(0);\n  const isBetPlacedRef = useRef(false);\n  const hasLocalActiveBetRef = useRef(false);\n  const gameStateRef = useRef('waiting');\n  const pollingRetryCount = useRef(0);\n  const maxPollingRetries = 5;\n  const lastSuccessfulPoll = useRef(Date.now());\n  const heartbeatInterval = useRef(null);\n  const autoRefreshTimeout = useRef(null);\n  const consecutiveErrors = useRef(0);\n  const lastGameState = useRef('waiting');\n  const lastRoundNumber = useRef(0);\n  const periodicRefreshInterval = useRef(null);\n  const lastCountdownUpdate = useRef(Date.now());\n  const lastBetStateUpdate = useRef(Date.now());\n  const countdownStartDetected = useRef(false);\n  const previousTimeLeft = useRef(0);\n  const countdownStartTimeout = useRef(null);\n  const targetMultiplierRef = useRef(1.0);\n  const animationFrameRef = useRef(null);\n\n  // API calls\n  const fetchBalance = async () => {\n    try {\n      debugLog('Fetching balance from:', `${API_BASE_URL}/api/aviator/balance/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/balance/`);\n      debugLog('Balance response:', response.data);\n      setBalance(response.data.balance);\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n      console.error('Error details:', error.response?.data);\n      // If unauthorized or network error, default to 0 until login\n      setBalance(0);\n    }\n  };\n\n  const fetchCurrentGame = async (isRetry = false) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/realtime/`);\n      const gameData = response.data;\n      const backendStatus = gameData.status; // 'waiting' | 'active' | 'crashed'\n      const effectivePhase = gameData.phase || (backendStatus === 'active' ? 'playing' : backendStatus);\n      let didCrashThisTick = false;\n      \n      // Reset error counters on successful fetch\n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      lastSuccessfulPoll.current = Date.now();\n      consecutiveErrors.current = 0;\n      \n      // Track game state changes for auto-refresh detection\n      lastGameState.current = effectivePhase;\n      lastRoundNumber.current = gameData.round_number;\n      \n      // Debug logging\n      debugLog('Backend data:', {\n        status: backendStatus,\n        phase: gameData.phase,\n        effectivePhase,\n        time_remaining: gameData.time_remaining,\n        round_number: gameData.round_number,\n        current_multiplier: gameData.current_multiplier\n      });\n      \n      // Check if this is a new round\n      const isNewRound = gameData.round_number !== roundNumber;\n      \n      // Only update state if there are actual changes to prevent unnecessary re-renders\n      if (gameData.round_number !== roundNumber) {\n        setRoundNumber(gameData.round_number);\n      }\n      \n      // Only update upcoming crash point when not showing a crash banner\n      if (gameState !== 'crashed' && Number(gameData.crash_point) !== crashPoint) {\n        setCrashPoint(Number(gameData.crash_point) || 1.5);\n      }\n      \n      // Batch state updates to prevent multiple re-renders\n      const stateUpdates = {};\n      \n      // Update game state only if it actually changed\n      // PRIORITIZE crash event regardless of phase to ensure banner shows\n      if (gameData.game_crashed && gameState !== 'crashed' && gameState !== 'loading_after_crash') {\n        console.log('💥 Crash detected in fetchCurrentGame (prioritized):', gameData);\n        stateUpdates.gameState = 'crashed';\n        // Use the met crash value for the banner; do NOT overwrite with next round's crash point\n        const crashedValue = gameData.crashed_at ?? gameData.previous_crash_point ?? gameData.crash_point;\n        if (crashedValue) {\n          const numericCrashedValue = Number(crashedValue);\n          if (!Number.isNaN(numericCrashedValue) && numericCrashedValue > 0) {\n            stateUpdates.multiplier = numericCrashedValue;\n            stateUpdates.crashPoint = numericCrashedValue;\n            setLastCrashPoint(numericCrashedValue);\n          }\n        }\n        stateUpdates.isBetPlaced = false;\n        stateUpdates.hasLocalActiveBet = false;\n        if (gameData.round_number) {\n          stateUpdates.roundNumber = gameData.round_number;\n        }\n        didCrashThisTick = true;\n      } else if (effectivePhase === 'waiting') {\n        // Transition to waiting state (backend controls the timing)\n        if (gameState !== 'waiting') {\n          debugLog('Transitioning to waiting state, time_remaining:', gameData.time_remaining);\n          stateUpdates.gameState = 'waiting';\n        }\n        // Do not reset multiplier while UI is showing crashed state\n        if (gameState !== 'crashed') {\n        stateUpdates.multiplier = 1.00;\n        }\n        \n        if (typeof gameData.time_remaining === 'number') {\n          const newTimeLeft = Math.max(0, Math.ceil(gameData.time_remaining));\n          if (newTimeLeft !== timeLeft) {\n            debugLog('Updating countdown:', timeLeft, '->', newTimeLeft);\n            // Avoid changing the countdown while showing crash; we'll refresh on transition\n            if (gameState !== 'crashed') {\n            stateUpdates.timeLeft = newTimeLeft;\n              lastCountdownUpdate.current = Date.now();\n            }\n          }\n        }\n        \n        if (isNewRound) {\n          stateUpdates.isBetPlaced = false;\n          stateUpdates.hasLocalActiveBet = false;\n          // New round: clear any legacy active bets and mark previous-round active slips as lost\n          setActiveBets([]);\n          setBetSlips(prev => prev.map(slip => (\n            slip.roundId !== gameData.round_number && slip.status === 'active'\n              ? { ...slip, status: 'lost' }\n              : slip\n          )));\n          \n          // Auto-bet if enabled\n          if (autoBet && lastStake >= 10 && balance >= lastStake) {\n            setTimeout(() => {\n              setBetAmount(lastStake);\n              placeBet();\n            }, 1000); // Small delay to ensure round is fully initialized\n          }\n        }\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        stateUpdates.gameState = 'playing';\n        if (typeof gameData.current_multiplier === 'number') {\n          stateUpdates.multiplier = gameData.current_multiplier;\n          targetMultiplierRef.current = gameData.current_multiplier;\n        }\n        // Do not update countdown during gameplay; countdown is only for waiting phase\n        stateUpdates.timeLeft = 0;\n        // Client-side safeguard: if live multiplier reaches or exceeds target crash point, show crash immediately\n        const targetCrashPoint = Number(gameData.crash_point);\n        if (!Number.isNaN(targetCrashPoint) && typeof gameData.current_multiplier === 'number') {\n          if (gameData.current_multiplier >= targetCrashPoint) {\n            stateUpdates.gameState = 'crashed';\n            stateUpdates.multiplier = targetCrashPoint;\n            stateUpdates.crashPoint = targetCrashPoint;\n            stateUpdates.isBetPlaced = false;\n            stateUpdates.hasLocalActiveBet = false;\n            setLastCrashPoint(targetCrashPoint);\n            didCrashThisTick = true;\n          }\n        }\n      }\n      \n      // Apply all state updates at once\n      Object.entries(stateUpdates).forEach(([key, value]) => {\n        switch (key) {\n          case 'gameState':\n            setGameState(value);\n            break;\n          case 'multiplier':\n            setMultiplier(value);\n            break;\n          case 'timeLeft':\n            setTimeLeft(value);\n            break;\n          case 'isBetPlaced':\n            setIsBetPlaced(value);\n            break;\n          case 'hasLocalActiveBet':\n            setHasLocalActiveBet(value);\n            break;\n          case 'roundNumber':\n            setRoundNumber(value);\n            break;\n          case 'crashPoint':\n            setCrashPoint(value);\n            break;\n          case 'isLoading':\n            setIsLoading(value);\n            break;\n          default:\n            // No action needed for unknown keys\n            break;\n        }\n      });\n      \n      // If crash just happened, refresh recent history immediately and retry shortly after\n      if (didCrashThisTick) {\n        try {\n          await fetchGameHistory();\n        } catch (e) {\n          console.warn('Failed to refresh game history after crash:', e);\n        }\n        // Retry once after a short delay to ensure backend has persisted the crash\n        setTimeout(() => {\n          fetchGameHistory().catch((err) => console.warn('Retry history refresh after crash failed:', err));\n        }, 800);\n      }\n      \n      // Handle async operations after state updates\n      if (effectivePhase === 'waiting' && isNewRound) {\n        await checkActiveBet();\n      } else if ((effectivePhase === 'playing' || effectivePhase === 'starting') && gameState !== 'playing') {\n        await checkActiveBet();\n      }\n      \n      // Update multiplier only during active gameplay to prevent flickering\n      if (stateUpdates.gameState === 'playing' || effectivePhase === 'playing') {\n        const now = Date.now();\n        // Debounce updates to prevent rapid re-renders\n        if (now - lastUpdateTime.current > 100) {\n          // Only update if multiplier actually changed to prevent unnecessary re-renders\n          if (typeof gameData.current_multiplier === 'number' && Math.abs(gameData.current_multiplier - multiplier) > 0.001) {\n            setMultiplier(gameData.current_multiplier);\n          }\n          lastUpdateTime.current = now;\n        }\n      }\n      \n      return gameData;\n    } catch (error) {\n      console.error('Error fetching real-time game state:', error);\n      \n      // Handle connection errors\n      setConnectionStatus('disconnected');\n      setPollingErrors(prev => prev + 1);\n      pollingRetryCount.current += 1;\n      consecutiveErrors.current += 1;\n      \n      // Trigger auto-refresh after consecutive errors\n      if (consecutiveErrors.current >= 3) {\n        console.warn('🔄 Auto-refresh triggered due to consecutive errors');\n        scheduleAutoRefresh();\n      }\n      \n      // If we have too many errors, try to recover\n      if (pollingRetryCount.current >= maxPollingRetries) {\n        console.warn('Too many polling errors, attempting recovery...');\n        setConnectionStatus('reconnecting');\n        \n        // Try to reinitialize the connection\n        setTimeout(() => {\n          pollingRetryCount.current = 0;\n          setConnectionStatus('connected');\n        }, 2000);\n      }\n      \n      return null;\n    }\n  };\n\n  const fetchGameHistory = async () => {\n    try {\n      debugLog('Fetching game history from:', `${API_BASE_URL}/api/aviator/game-history/`);\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/game-history/`);\n      debugLog('Game history response:', response.data);\n      debugLog('Game history response type:', typeof response.data);\n      debugLog('Game history response length:', response.data?.length);\n      \n      // Ensure we extract numeric crash points and filter out invalid values\n      const crashPoints = response.data\n        .map(game => Number(game.crash_point))\n        .filter(point => !isNaN(point) && point > 0);\n      \n      debugLog('Processed crash points:', crashPoints);\n      setGameHistory(crashPoints);\n    } catch (error) {\n      console.error('Error fetching game history:', error);\n      console.error('Error details:', error.response?.data);\n      // Set empty array as fallback\n      setGameHistory([]);\n    }\n  };\n\n  const fetchBetHistory = async () => {\n    try {\n      debugLog('Fetching bet history from:', `${API_BASE_URL}/api/aviator/history/`);\n      let response;\n      try {\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history/`);\n      } catch (e) {\n        // Fallback for anonymous/testing\n        response = await axios.get(`${API_BASE_URL}/api/aviator/history-public/?user_id=player_1`);\n      }\n      debugLog('Bet history response:', response.data);\n      setBetHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching bet history:', error);\n      console.error('Error details:', error.response?.data);\n    }\n  };\n\n  // Check if user has an active bet in the current round - simplified to prevent blinking\n  const checkActiveBet = async () => {\n    // Only check on new rounds or when explicitly needed\n    if (gameState === 'playing' && hasLocalActiveBetRef.current) {\n      // Don't check during active gameplay to prevent button blinking\n      return true;\n    }\n    \n    try {\n      const response = await axios.get(`${API_BASE_URL}/api/aviator/check-active-bet/?user_id=player_1&round_number=${roundNumber}`);\n      const hasActiveBet = response.data.has_active_bet;\n      setIsBetPlaced(hasActiveBet);\n      if (hasActiveBet) {\n        setHasLocalActiveBet(true);\n      } else if (gameState !== 'playing') {\n        setHasLocalActiveBet(false);\n      }\n      lastBetStateUpdate.current = Date.now();\n      return hasActiveBet;\n    } catch (error) {\n      console.error('Error checking active bet:', error);\n      // Don't change state on errors during gameplay\n      if (gameState !== 'playing') {\n        setIsBetPlaced(false);\n        setHasLocalActiveBet(false);\n        return false;\n      }\n      return hasLocalActiveBetRef.current;\n    }\n  };\n\n  // Place bet - Betika-style with bet slips\n  const placeBet = async () => {\n    // Validate bet placement conditions\n    if (gameState !== 'waiting') {\n      setError('Bets can only be placed before takeoff');\n      return;\n    }\n    if (!(timeLeft > 0)) {\n      setError('Bets can only be placed during the countdown');\n      return;\n    }\n    \n    if (balance < betAmount) {\n      setError('Insufficient balance');\n      return;\n    }\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/place-bet/`, {\n        amount: betAmount,\n        user_id: 'player_1'  // Simple user ID for anonymous betting\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Create bet slip for Betika-style display\n      const betSlip = {\n        id: response.data?.bet?.id || generateBetId(),\n        roundId: roundNumber,\n        stake: betAmount,\n        status: 'active',\n        placedAt: Date.now(),\n        cashedAt: null,\n        cashoutOdds: null,\n        winAmount: null,\n        backendBetId: response.data?.bet?.id\n      };\n      \n      setBetSlips(prev => [betSlip, ...prev]);\n      setLastStake(betAmount);\n      \n      // Update legacy bet state for compatibility\n      setIsBetPlaced(true);\n      setHasLocalActiveBet(true);\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => [{ id: response.data.bet.id, amount: Number(response.data.bet.amount) }, ...prev]);\n      }\n      \n      // Verify the bet was placed successfully\n      const hasActiveBet = await checkActiveBet();\n      if (!hasActiveBet) {\n        setIsBetPlaced(false);\n      }\n    } catch (error) {\n      const status = error?.response?.status;\n      if (status === 401 || status === 403) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'placeBet', payload: { stake: betAmount } }));\n        window.location.href = '/login';\n        return;\n      }\n      setError(error?.response?.data?.error || error?.message || 'Failed to place bet');\n      console.error('Error placing bet:', error);\n      // Ensure bet state is false if placement failed\n      setIsBetPlaced(false);\n      setHasLocalActiveBet(false);\n    }\n  };\n\n  // Cashout - Betika-style with bet slips\n  const cashout = async (specificBetId = null) => {\n    // Prevent multiple rapid clicks\n    if (isCashingOut) {\n      return;\n    }\n    \n    // Validate cashout conditions\n    if (gameState !== 'playing') {\n      setError('Can only cashout during active gameplay');\n      return;\n    }\n    \n    setIsCashingOut(true);\n    \n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/cashout/`, {\n        round_number: roundNumber,\n        multiplier: multiplier,\n        user_id: 'player_1',  // Simple user ID for anonymous betting\n        bet_id: specificBetId\n      });\n      \n      setBalance(response.data.balance);\n      setError(null);\n      \n      // Update bet slip status\n      if (specificBetId) {\n        setBetSlips(prev => prev.map(slip => {\n          if (slip.id === specificBetId || slip.backendBetId === specificBetId) {\n            return {\n              ...slip,\n              status: 'cashed',\n              cashedAt: Date.now(),\n              cashoutOdds: multiplier,\n              winAmount: Math.round(slip.stake * multiplier * 100) / 100\n            };\n          }\n          return slip;\n        }));\n      }\n      \n      // Update legacy bet state\n      if (response.data?.bet?.id) {\n        setActiveBets((prev) => prev.filter(b => b.id !== response.data.bet.id));\n      }\n      const remaining = activeBets.length - 1;\n      setIsBetPlaced(remaining > 0);\n      setHasLocalActiveBet(remaining > 0);\n      setBetHistory(prev => [response.data.bet, ...prev.slice(0, 19)]);\n      \n      // Refresh balance to ensure it's up to date\n      await fetchBalance();\n      \n      // Verify bet state was updated\n      await checkActiveBet();\n    } catch (error) {\n      setError(error.response?.data?.error || 'Failed to cashout');\n      console.error('Error cashing out:', error);\n    } finally {\n      setIsCashingOut(false);\n    }\n  };\n\n\n  // Bet controls\n  const doubleBet = () => {\n    if (balance >= betAmount * 2) {\n      setBetAmount(prev => prev * 2);\n    }\n  };\n\n  const halfBet = () => {\n    setBetAmount(prev => Math.max(1, Math.floor(prev / 2)));\n  };\n\n  const resetBet = () => {\n    setBetAmount(10);\n  };\n\n  const addChip = (amount) => {\n    setBetAmount(prev => {\n      const next = Math.max(1, prev + amount);\n      return Math.min(next, balance);\n    });\n  };\n  \n  const setMaxBet = () => {\n    setBetAmount(Math.max(1, Math.floor(balance)));\n  };\n  \n  const clearBet = () => {\n    setBetAmount(1);\n  };\n  \n  // Handle cashout for specific bet slip\n  const handleBetSlipCashout = async (betSlipId) => {\n    const betSlip = betSlips.find(slip => slip.id === betSlipId);\n    if (!betSlip || betSlip.status !== 'active') return;\n    \n    await cashout(betSlip.backendBetId || betSlipId);\n  };\n\n  // Auto-bet functionality\n  const handleAutoBetToggle = (enabled) => {\n    setAutoBet(enabled);\n  };\n\n  // Manual refresh function for recovery\n  const manualRefresh = async () => {\n    console.log('🔄 Manual refresh triggered');\n    setConnectionStatus('reconnecting');\n    setIsLoading(true);\n    \n    try {\n      // Force refresh all data\n      await Promise.all([\n        fetchBalance(),\n        fetchCurrentGame(),\n        fetchGameHistory(),\n        fetchBetHistory()\n      ]);\n      \n      // Check for active bet\n      if (roundNumber > 0) {\n        await checkActiveBet();\n      }\n      \n      setConnectionStatus('connected');\n      setPollingErrors(0);\n      pollingRetryCount.current = 0;\n      consecutiveErrors.current = 0;\n      console.log('✅ Manual refresh completed successfully');\n    } catch (error) {\n      console.error('❌ Manual refresh failed:', error);\n      setConnectionStatus('disconnected');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Wallet actions\n  const [walletAmount, setWalletAmount] = useState('');\n  const handleDeposit = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'deposit', payload: { amount: walletAmount } }));\n      window.location.href = '/login';\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/deposit/`, { amount: walletAmount });\n      setBalance(response.data.balance);\n    } catch (e) {\n      console.error('Deposit failed', e);\n      if (e?.response?.status === 401) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'deposit', payload: { amount: walletAmount } }));\n        window.location.href = '/login';\n        return;\n      }\n      setError(e?.response?.data?.error || 'Deposit failed. Please try again.');\n    }\n  };\n  const handleWithdraw = async () => {\n    const accessToken = localStorage.getItem('access_token');\n    if (!accessToken) {\n      localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'withdraw', payload: { amount: walletAmount } }));\n      window.location.href = '/login';\n      return;\n    }\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/aviator/withdraw/`, { amount: walletAmount });\n      setBalance(response.data.balance);\n      setSuccess('Your withdrawal request has been received. Please note that due to high withdrawal activity today, processing may take a little longer than usual. Rest assured, your funds will be credited immediately once processing is complete. Thank you for your patience.');\n    } catch (e) {\n      console.error('Withdraw failed', e);\n      if (e?.response?.status === 401) {\n        localStorage.setItem('post_login_redirect', JSON.stringify({ path: window.location.pathname, action: 'withdraw', payload: { amount: walletAmount } }));\n        window.location.href = '/login';\n        return;\n      }\n      setError(e?.response?.data?.error || 'Withdraw failed. Please try again.');\n    }\n  };\n\n  // Automatic refresh scheduling function\n  const scheduleAutoRefresh = () => {\n    // Clear any existing auto-refresh timeout\n    if (autoRefreshTimeout.current) {\n      clearTimeout(autoRefreshTimeout.current);\n    }\n    \n    // Schedule auto-refresh after a short delay to avoid rapid refreshes\n    autoRefreshTimeout.current = setTimeout(() => {\n      console.log('🔄 Auto-refresh executing...');\n      manualRefresh();\n    }, 2000); // 2 second delay\n  };\n\n  // Aggressive auto-refresh detection\n  const checkForAutoRefresh = () => {\n    const now = Date.now();\n    const timeSinceLastPoll = now - lastSuccessfulPoll.current;\n    const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n    const timeSinceBetStateUpdate = now - lastBetStateUpdate.current;\n    \n    // Auto-refresh conditions (more aggressive):\n    // 1. No successful polls for 8+ seconds (reduced from 15)\n    // 2. Countdown not updating for 5+ seconds during waiting state\n    // 3. Bet state not updating for 10+ seconds\n    // 4. Game state seems stuck\n    \n    if (timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: No successful polls for 8+ seconds');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if countdown is stuck during waiting state\n    if (gameStateRef.current === 'waiting' && timeSinceCountdownUpdate > 5000) {\n      console.warn('🔄 Auto-refresh: Countdown stuck during waiting state (state:', gameStateRef.current, ')');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if bet state is stuck\n    if (timeSinceBetStateUpdate > 10000) {\n      console.warn('🔄 Auto-refresh: Bet state not updating');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if game state is stuck\n    if (gameStateRef.current === 'playing' && timeSinceLastPoll > 6000) {\n      console.warn('🔄 Auto-refresh: Game state stuck in playing mode');\n      scheduleAutoRefresh();\n      return;\n    }\n    \n    // Check if we're in waiting state for too long (should transition to playing)\n    if (gameStateRef.current === 'waiting' && timeSinceLastPoll > 8000) {\n      console.warn('🔄 Auto-refresh: Stuck in waiting state too long');\n      scheduleAutoRefresh();\n      return;\n    }\n  };\n\n  // Periodic auto-refresh to prevent any stuck states\n  const startPeriodicAutoRefresh = () => {\n    if (periodicRefreshInterval.current) {\n      clearInterval(periodicRefreshInterval.current);\n    }\n    \n    // Auto-refresh every 30 seconds as a safety net\n    periodicRefreshInterval.current = setInterval(() => {\n      console.log('🔄 Periodic auto-refresh triggered (safety net)');\n      scheduleAutoRefresh();\n    }, 30000); // 30 seconds\n  };\n\n  // Detect countdown start and trigger auto-refresh\n  const detectCountdownStart = () => {\n    // Clear any existing timeout\n    if (countdownStartTimeout.current) {\n      clearTimeout(countdownStartTimeout.current);\n    }\n\n    // Check if countdown just started (transitioned from 0 or undefined to a positive number)\n    // OR if we're in a new round and countdown is starting\n    const isNewCountdown = gameState === 'waiting' && timeLeft > 0 && previousTimeLeft.current === 0;\n    const isNewRoundCountdown = gameState === 'waiting' && timeLeft > 0 && roundNumber > lastRoundNumber.current;\n    \n    if (isNewCountdown || isNewRoundCountdown) {\n      console.log('🚀 Countdown started detected! Auto-refreshing game state...', {\n        isNewCountdown,\n        isNewRoundCountdown,\n        timeLeft,\n        previousTimeLeft: previousTimeLeft.current,\n        roundNumber,\n        lastRoundNumber: lastRoundNumber.current\n      });\n      countdownStartDetected.current = true;\n      \n      // Trigger auto-refresh immediately when countdown starts\n      scheduleAutoRefresh();\n      \n      // Also set a small delay to ensure the refresh happens after countdown is fully initialized\n      countdownStartTimeout.current = setTimeout(() => {\n        console.log('🔄 Countdown start auto-refresh executing...');\n        manualRefresh();\n      }, 1000); // 1 second delay to ensure countdown is stable\n    }\n    \n    // Update previous time left for next comparison\n    previousTimeLeft.current = timeLeft;\n  };\n  \n\n\n  // Handle game crash\n  const handleGameCrash = useCallback(async () => {\n    console.log('🚨 Game crashed - handling crash state');\n    \n    // Reset bet state when game crashes\n    setIsBetPlaced(false);\n    setHasLocalActiveBet(false);\n    isBetPlacedRef.current = false;\n    hasLocalActiveBetRef.current = false;\n    // Clear legacy active bets list so nothing remains active visually\n    setActiveBets([]);\n\n    // Mark any still-active local bet slips as lost on crash\n    setBetSlips(prev => prev.map(slip => (\n      slip.status === 'active'\n        ? { ...slip, status: 'lost' }\n        : slip\n    )));\n    \n    // Refresh bet history from backend to reflect losses\n    try {\n      await fetchBetHistory();\n    } catch (e) {\n      console.warn('Failed to refresh bet history on crash:', e);\n    }\n    \n    // Optionally prefetch latest state so we have fresh round/crash info ready\n    try {\n      await fetchCurrentGame();\n    } catch (error) {\n      console.error('Error prefetching game after crash:', error);\n    }\n\n    console.log('✅ Crash handling complete - bets marked lost, awaiting next round');\n  }, [isBetPlaced, roundNumber, crashPoint]);\n\n  // Effects - handle crash state transition (show crash then transition)\n  useEffect(() => {\n    if (gameState === 'crashed') {\n      console.log('🔄 Processing crash state - will transition to loading after 2 seconds');\n      // Immediately mark any active bet as lost\n      try {\n        handleGameCrash();\n      } catch (e) {\n        console.error('Error while handling crash state updates:', e);\n      }\n      \n      // Show crash for ~3s, then move to waiting and let backend drive countdown\n      const crashTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from crashed to waiting state (backend countdown)');\n    setGameState('waiting');\n    setMultiplier(1.00);\n        // Fetch latest state and refresh recent results to include last crash\n        fetchCurrentGame().catch((error) => {\n          console.error('Error fetching game state after crash transition:', error);\n        });\n        fetchGameHistory().catch((error) => {\n          console.warn('Error refreshing game history after crash transition:', error);\n        });\n      }, 3000);\n\n      return () => clearTimeout(crashTimeout);\n    }\n  }, [gameState]);\n\n  // Effects - handle loading after crash transition\n  useEffect(() => {\n    if (gameState === 'loading_after_crash') {\n      console.log('🔄 Processing crash loading state...');\n      \n      // Set a timeout to transition from loading to waiting state\n      const transitionTimeout = setTimeout(() => {\n        console.log('✅ Transitioning from loading to waiting state');\n        console.log('Current gameState before transition:', gameState);\n        setIsLoading(false); // Set loading to false first\n        setGameState('waiting'); // Then transition to waiting\n        console.log('Loading set to false, game state set to waiting');\n        \n        // Force a fresh fetch to get the latest game state\n        setTimeout(() => {\n          console.log('Fetching fresh game state after transition...');\n          fetchCurrentGame().catch((error) => {\n            console.error('Error fetching game state after crash transition:', error);\n          });\n        }, 100); // Small delay to ensure state updates\n      }, 1500); // 1.5 second loading state\n      \n      return () => clearTimeout(transitionTimeout);\n    }\n  }, [gameState]);\n\n\n\n  // Only check bet state when game becomes active, not during gameplay\n  useEffect(() => {\n    if (gameState === 'playing') {\n      // Check bet state only once when game becomes active\n      const immediateCheck = async () => {\n        await checkActiveBet();\n      };\n      immediateCheck();\n    }\n  }, [gameState]);\n\n  // Auto-refresh when countdown gets stuck\n  useEffect(() => {\n    if (gameState === 'waiting' && timeLeft > 0) {\n      // Set a timeout to check if countdown is stuck\n      const countdownCheck = setTimeout(() => {\n        const now = Date.now();\n        const timeSinceCountdownUpdate = now - lastCountdownUpdate.current;\n        \n        // If countdown hasn't updated for 3+ seconds, trigger auto-refresh\n        if (timeSinceCountdownUpdate > 3000) {\n          console.warn('🔄 Auto-refresh: Countdown appears stuck, triggering refresh');\n          scheduleAutoRefresh();\n        }\n      }, 4000); // Check after 4 seconds\n      \n      return () => clearTimeout(countdownCheck);\n    }\n  }, [gameState, timeLeft]);\n\n  // Monitor countdown changes and detect when it starts\n  useEffect(() => {\n    detectCountdownStart();\n  }, [gameState, timeLeft]);\n\n  // Reset countdown detection when game state changes\n  useEffect(() => {\n    if (gameState !== 'waiting') {\n      countdownStartDetected.current = false;\n      previousTimeLeft.current = 0;\n      if (countdownStartTimeout.current) {\n        clearTimeout(countdownStartTimeout.current);\n      }\n    }\n  }, [gameState]);\n\n  // Keep a ref in sync with the state to make race-free decisions during polling\n  useEffect(() => {\n    isBetPlacedRef.current = isBetPlaced;\n  }, [isBetPlaced]);\n\n  useEffect(() => {\n    hasLocalActiveBetRef.current = hasLocalActiveBet;\n  }, [hasLocalActiveBet]);\n\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n\n  useEffect(() => {\n    return () => {\n      if (gameInterval.current) clearInterval(gameInterval.current);\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (gameTimeout.current) clearTimeout(gameTimeout.current);\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, []);\n\n  // Initialize and periodic updates\n  useEffect(() => {\n    debugLog('Aviator component mounted - starting initialization');\n    setIsLoading(true);\n    \n    const initializeComponent = async () => {\n      try {\n        debugLog('Starting API calls...');\n        await Promise.all([\n          fetchBalance(),\n          fetchCurrentGame().catch(() => undefined),\n          fetchGameHistory(),\n          fetchBetHistory()\n        ]);\n        \n        // Check for active bet after getting current game\n        if (roundNumber > 0) {\n          await checkActiveBet();\n        }\n        \n        debugLog('All API calls completed - server connected');\n      } catch (error) {\n        console.error('Error during initialization:', error);\n      } finally {\n        setIsLoading(false);\n        debugLog('Component initialization complete - ready for countdown');\n      }\n    };\n    \n    initializeComponent();\n    \n    // Poll backend for real-time updates - this will handle countdown automatically\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n    \n    // Enhanced polling function with better error handling\n    const pollForUpdates = async () => {\n      try {\n        // Always poll, even during crash loading state, but with reduced frequency\n        const pollInterval = gameStateRef.current === 'loading_after_crash' ? 1000 : 500;\n        \n        debugLog('Polling backend for updates...', 'State:', gameStateRef.current);\n        const gameData = await fetchCurrentGame();\n        \n        // If we got data, continue normal polling\n        if (gameData) {\n          // Reset any error states\n          setConnectionStatus('connected');\n          setPollingErrors(0);\n        }\n      } catch (error) {\n        console.error('Polling error:', error);\n        // Don't stop polling on errors - keep trying\n      }\n    };\n    \n    // Start polling immediately\n    pollForUpdates();\n    \n    // Set up interval for continuous polling with exponential backoff on errors\n    const setupPolling = () => {\n    if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      \n      // Adjust polling frequency based on connection status\n      const pollFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n      \n      gameCheckInterval.current = setInterval(pollForUpdates, pollFrequency);\n    };\n    \n    setupPolling();\n    \n    // Re-setup polling when connection status changes\n    const statusCheckInterval = setInterval(() => {\n      if (gameCheckInterval.current) {\n        const currentFrequency = connectionStatus === 'disconnected' ? 2000 : 500;\n        // Only restart if frequency needs to change\n        if (pollingErrors > 3 && currentFrequency === 500) {\n          setupPolling();\n        }\n      }\n    }, 5000);\n    \n    // Heartbeat monitoring - check if we haven't received updates for too long\n    heartbeatInterval.current = setInterval(() => {\n      // Use the aggressive auto-refresh detection\n      checkForAutoRefresh();\n    }, 2000); // Check every 2 seconds (more frequent)\n    \n    // Start periodic auto-refresh as a safety net\n    startPeriodicAutoRefresh();\n    \n    return () => {\n      debugLog('Cleaning up Aviator component');\n      if (gameCheckInterval.current) clearInterval(gameCheckInterval.current);\n      if (statusCheckInterval) clearInterval(statusCheckInterval);\n      if (heartbeatInterval.current) clearInterval(heartbeatInterval.current);\n      if (periodicRefreshInterval.current) clearInterval(periodicRefreshInterval.current);\n      if (autoRefreshTimeout.current) clearTimeout(autoRefreshTimeout.current);\n      if (countdownStartTimeout.current) clearTimeout(countdownStartTimeout.current);\n    };\n  }, []); // Removed gameState dependency\n\n  // Smooth multiplier animation toward backend target during playing state\n  useEffect(() => {\n    if (gameState !== 'playing') {\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n      lastAnimTimeRef.current = 0;\n      return;\n    }\n\n    let isCancelled = false;\n\n    const animate = (timestamp) => {\n      if (isCancelled || gameStateRef.current !== 'playing') return;\n      if (!lastAnimTimeRef.current) lastAnimTimeRef.current = timestamp;\n      const dtMs = timestamp - lastAnimTimeRef.current;\n      lastAnimTimeRef.current = timestamp;\n\n      const crashCap = Number(crashPoint) > 0 ? Number(crashPoint) : Infinity;\n      const backendTarget = Math.min(targetMultiplierRef.current || 1.0, crashCap);\n\n      // Increase at 0.05 per second to match backend\n      const increment = 0.05 * (dtMs / 1000);\n      const nextVal = Math.min(backendTarget, multiplier + increment);\n\n      if (nextVal !== multiplier) {\n        setMultiplier(nextVal);\n      }\n\n      // If we've reached the crash cap, let the normal crash handling flip state\n      if (nextVal >= crashCap && Number.isFinite(crashCap)) {\n        // no-op here; backend/client safeguard will set crashed\n      }\n\n      animationFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      isCancelled = true;\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, [gameState, crashPoint, multiplier]);\n\n  debugLog('Rendering Aviator component, gameState:', gameState, 'timeLeft:', timeLeft, 'isLoading:', isLoading, 'hasLocalActiveBet:', hasLocalActiveBet, 'isBetPlaced:', isBetPlaced, 'crashLoading:', gameState === 'loading_after_crash');\n  \n  if (isLoading) {\n      const isCrashLoading = gameState === 'loading_after_crash';\n    return (\n      <div className=\"aviator-container\">\n        <div className=\"loading-state\">\n            <h2>{isCrashLoading ? 'Game Crashed!' : 'Loading Aviator Game...'}</h2>\n            <div className=\"loading-spinner\">{isCrashLoading ? '💥' : '⏳'}</div>\n            <p>{isCrashLoading ? 'Preparing next round...' : 'Connecting to backend...'}</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Waiting duration used for countdown progress (seconds)\n  const WAIT_DURATION = 10;\n  const countdownPercent = Math.max(0, Math.min(100, Math.round((timeLeft / WAIT_DURATION) * 100)));\n  const cylShouldExplode = gameState === 'crashed';\n\n  return (\n    <div className=\"aviator-container\">\n      <div className=\"aviator-header\">\n        <h1>Aviator</h1>\n        <div className=\"header-info\">\n        <div className=\"balance-display\">\n            Balance: Ksh {balance.toFixed(2)}\n          </div>\n          <div className=\"header-controls\">\n            <div className={`connection-indicator ${connectionStatus}`}>\n              <span className=\"connection-dot\"></span>\n              {connectionStatus === 'connected' ? 'Live' : \n               connectionStatus === 'disconnected' ? 'Reconnecting...' : \n               connectionStatus === 'reconnecting' ? 'Reconnecting...' : 'Unknown'}\n            </div>\n            <button \n              onClick={manualRefresh} \n              className=\"refresh-btn\"\n              disabled={isLoading}\n              title=\"Refresh game state\"\n              type=\"button\"\n            >\n              🔄\n            </button>\n          </div>\n          <div className=\"wallet-controls\">\n            <input\n              type=\"number\"\n              min=\"1\"\n              placeholder=\"Enter amount\"\n              value={walletAmount}\n              onChange={(e) => {\n                const v = e.target.value;\n                if (v === '' || Number(v) >= 1) {\n                  setWalletAmount(v);\n                }\n              }}\n              className=\"wallet-input\"\n            />\n            <button type=\"button\" onClick={(e) => { e.preventDefault(); handleDeposit(); }} className=\"wallet-btn\" disabled={!walletAmount}>Deposit</button>\n            <button type=\"button\" onClick={(e) => { e.preventDefault(); handleWithdraw(); }} className=\"wallet-btn outline\" disabled={!walletAmount}>Withdraw</button>\n          </div>\n        </div>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          <strong>Error:</strong> {error}\n          <button onClick={() => setError(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n      {success && (\n        <div className=\"success-message\">\n          {success}\n          <button onClick={() => setSuccess(null)} className=\"error-close\">×</button>\n        </div>\n      )}\n\n      {/* debug-info removed per request */}\n\n      <div className=\"game-area\">\n        <div className=\"multiplier-display\">\n          <AnimatePresence mode=\"wait\">\n            {gameState === 'waiting' && (\n              <motion.div\n                key=\"waiting\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"waiting-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    {/* Cylindrical countdown bar within lane */}\n                    <div className=\"cyl-progress-wrap\" aria-label=\"Round countdown\">\n                      <div className={`cyl-progress ${cylShouldExplode ? 'explode' : ''}`}>\n                        <div className=\"cyl-core\"></div>\n                        <div className=\"cyl-fill\" style={{ width: `${countdownPercent}%` }}></div>\n                        <div className=\"cyl-gloss\"></div>\n                        <div className=\"cyl-ends cyl-left\"></div>\n                        <div className=\"cyl-ends cyl-right\"></div>\n                      </div>\n                      <div className=\"cyl-timer-label\">{timeLeft}s</div>\n                    </div>\n                    <div className={`aviator-plane waiting`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <h2>Next game in {timeLeft}s</h2>\n                  <div className=\"countdown-circle\">\n                    <span className=\"countdown-number\">{timeLeft}</span>\n                  </div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'playing' && (\n              <motion.div\n                key=\"playing\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"playing-state\"\n              >\n                <div className=\"game-display\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane flying`}>\n                      ✈️\n                    </div>\n                  </div>\n                  <div className=\"multiplier-value\">\n                    {multiplier.toFixed(2)}x\n                  </div>\n                  <div className=\"game-status\">Flying!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                </div>\n              </motion.div>\n            )}\n            \n            {gameState === 'crashed' && (\n              <motion.div\n                key=\"crashed\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.8 }}\n                className=\"crashed-state\"\n              >\n                <div className=\"game-display crashed-anim\">\n                  <div className=\"aviator-plane-container\">\n                    <div className={`aviator-plane crashed`}>\n                      💥\n                    </div>\n                  </div>\n                  <h2 className=\"crash-text animated\">CRASHED AT {Number((lastCrashPoint ?? crashPoint) || multiplier).toFixed(2)}x</h2>\n                  <div className=\"crash-burst\" aria-hidden=\"true\">\n                    <span></span><span></span><span></span><span></span><span></span>\n                  </div>\n                  <div className=\"game-status\">Game Over!</div>\n                  <div className=\"round-info\">Round #{roundNumber}</div>\n                  <div className=\"backend-info\">\n                    <small>Predetermined crash point from backend</small>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Betika-style Betting Panel */}\n        <div className=\"betting-panel\">\n          <div className=\"betting-controls-section\">\n            <div className=\"balance-section\">\n              <div className=\"balance-label\">Balance</div>\n              <div className=\"balance-amount\">Ksh {formatMoney(balance)}</div>\n          </div>\n          \n            <div className=\"stake-section\">\n              <div className=\"stake-label\">Stake</div>\n              <div className=\"stake-input-group\">\n            <input\n              type=\"number\"\n              value={betAmount}\n                  min=\"10\"\n              max={balance}\n                  disabled={!(gameState === 'waiting' && timeLeft > 0)}\n                  onChange={(e) => setBetAmount(Math.max(10, parseInt(e.target.value) || 10))}\n                  className=\"stake-input\"\n            />\n                <button onClick={setMaxBet} disabled={!(gameState === 'waiting' && timeLeft > 0)} className=\"max-btn\">MAX</button>\n          </div>\n              <div className=\"stake-limits\">\n                <span>Min: Ksh 10</span>\n                <span>Max: Ksh {formatMoney(balance)}</span>\n          </div>\n              </div>\n            \n              <button \n              type=\"button\"\n              onClick={(e) => { e.preventDefault(); placeBet(); }}\n              disabled={gameState !== 'waiting' || timeLeft <= 0 || betAmount < 10 || betAmount > balance}\n              className={`place-bet-main-btn ${gameState === 'waiting' && timeLeft > 0 ? 'active' : 'disabled'}`}\n            >\n              {gameState === 'waiting' && timeLeft > 0 ? 'Bet' : 'Bet (locked)'}\n              </button>\n\n            <div className=\"auto-bet-section\">\n              <label className=\"auto-bet-label\">\n                <input \n                  type=\"checkbox\" \n                  checked={autoBet} \n                  onChange={(e) => handleAutoBetToggle(e.target.checked)}\n                />\n                Auto-Bet (next round)\n              </label>\n              {!autoBet && (\n                <div className=\"auto-bet-note\">Will NOT auto-place on next round</div>\n              )}\n            </div>\n          </div>\n\n          {/* Bet Slips Section */}\n          <div className=\"bet-slips-section\">\n            <div className=\"bet-slips-header\">\n              <h3>Your Bets</h3>\n              <div className=\"active-count\">Active: {betSlips.filter(slip => slip.status === 'active').length}</div>\n              </div>\n\n            {betSlips.length === 0 ? (\n              <div className=\"no-bets-message\">Place a bet before takeoff to see it here.</div>\n            ) : (\n              <div className=\"bet-slips-list\">\n                {betSlips.map((slip) => (\n                  <div key={slip.id} className={`bet-slip ${slip.status}`}>\n                    <div className=\"bet-slip-info\">\n                      <div className=\"bet-stake\">Stake: <span className=\"stake-amount\">Ksh {formatMoney(slip.stake)}</span></div>\n                      <div className=\"bet-details\">Bet #{String(slip.id).slice(0, 8)} • Round #{slip.roundId}</div>\n                    </div>\n\n                    <div className=\"bet-slip-actions\">\n                      {slip.status === 'active' && (\n                        <>\n                          <div className=\"potential-win\">Potential: Ksh {formatMoney(slip.stake * multiplier)}</div>\n                    <button\n                            type=\"button\"\n                            onClick={() => handleBetSlipCashout(slip.id)}\n                      disabled={gameState !== 'playing' || isCashingOut}\n                            className={`cashout-btn ${gameState === 'playing' ? 'active' : 'disabled'}`}\n                    >\n                            Cashout @ {multiplier.toFixed(2)}x\n                    </button>\n                        </>\n                      )}\n                      {slip.status === 'cashed' && (\n                        <div className=\"cashed-info\">\n                          <div className=\"cashout-odds\">Cashed @ {slip.cashoutOdds?.toFixed(2)}x</div>\n                          <div className=\"win-amount\">+ Ksh {formatMoney(slip.winAmount)}</div>\n              </div>\n            )}\n                      {slip.status === 'lost' && (\n                        <div className=\"lost-info\">\n                          <div className=\"lost-label\">Lost</div>\n                          <div className=\"lost-amount\">- Ksh {formatMoney(slip.stake)}</div>\n          </div>\n              )}\n            </div>\n                  </div>\n                ))}\n              </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n      {/* Recent Results */}\n      <div className=\"game-history\">\n        <h3>Recent Results</h3>\n        {gameHistory.length === 0 ? (\n          <div className=\"history-empty\">\n            <p>No game history yet</p>\n            <small>Games will appear here after they crash</small>\n          </div>\n        ) : (\n          <div className=\"history-grid\">\n            {gameHistory.map((result, index) => {\n              const numericResult = Number(result) || 1.0;\n              return (\n                <div\n                  key={index}\n                  className={`history-item ${numericResult >= 2 ? 'green' : numericResult >= 1.5 ? 'orange' : 'red'}`}\n                >\n                  {numericResult.toFixed(2)}x\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n    </div>\n  );\n};\n\nexport default Aviator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}